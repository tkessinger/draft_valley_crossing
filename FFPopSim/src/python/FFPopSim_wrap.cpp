/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_NO_BUILD_NONE
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIG_CASTRANK_MODE
#define SWIG_PYTHON_CAST_MODE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_clone_t swig_types[2]
#define SWIGTYPE_p_difference_type swig_types[3]
#define SWIGTYPE_p_double swig_types[4]
#define SWIGTYPE_p_edge_t swig_types[5]
#define SWIGTYPE_p_genotype_value_pair_t swig_types[6]
#define SWIGTYPE_p_haploid_highd swig_types[7]
#define SWIGTYPE_p_haploid_lowd swig_types[8]
#define SWIGTYPE_p_hivgene swig_types[9]
#define SWIGTYPE_p_hivpopulation swig_types[10]
#define SWIGTYPE_p_index_value_pair_t swig_types[11]
#define SWIGTYPE_p_int swig_types[12]
#define SWIGTYPE_p_istream swig_types[13]
#define SWIGTYPE_p_key_type swig_types[14]
#define SWIGTYPE_p_mapped_type swig_types[15]
#define SWIGTYPE_p_multi_locus_genealogy swig_types[16]
#define SWIGTYPE_p_node_t swig_types[17]
#define SWIGTYPE_p_ostream swig_types[18]
#define SWIGTYPE_p_p_PyObject swig_types[19]
#define SWIGTYPE_p_poly_t swig_types[20]
#define SWIGTYPE_p_rooted_tree swig_types[21]
#define SWIGTYPE_p_size_type swig_types[22]
#define SWIGTYPE_p_stat_t swig_types[23]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[24]
#define SWIGTYPE_p_std__allocatorT_poly_t_t swig_types[25]
#define SWIGTYPE_p_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t swig_types[26]
#define SWIGTYPE_p_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t swig_types[27]
#define SWIGTYPE_p_std__allocatorT_step_t_t swig_types[28]
#define SWIGTYPE_p_std__allocatorT_tree_key_t_t swig_types[29]
#define SWIGTYPE_p_std__invalid_argument swig_types[30]
#define SWIGTYPE_p_std__lessT_tree_key_t_t swig_types[31]
#define SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t swig_types[32]
#define SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t swig_types[33]
#define SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t swig_types[34]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[35]
#define SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t swig_types[36]
#define SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t swig_types[37]
#define SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t swig_types[38]
#define SWIGTYPE_p_step_t swig_types[39]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[40]
#define SWIGTYPE_p_tree_key_t swig_types[41]
#define SWIGTYPE_p_value_type swig_types[42]
static swig_type_info *swig_types[44];
static swig_module_info swig_module = {swig_types, 43, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif
#ifndef METH_O
# error "This python version requires swig to be run with the '-nofastunpack' option"
#endif
#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _FFPopSim.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__FFPopSim

#else
#  define SWIG_init    init_FFPopSim

#endif
#define SWIG_name    "_FFPopSim"

#define SWIGVERSION 0x020012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT
#include "../ffpopsim_generic.h"
#include "../ffpopsim_lowd.h"
#include "../ffpopsim_highd.h"
#include "../hivpopulation.h"


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <list>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#ifndef SWIG_FILE_WITH_INIT
#  define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#include <numpy/arrayobject.h>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v=std::vector< int,std::allocator< int > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<step_t > {
      typedef pointer_category category;
      static const char* type_name() { return"step_t"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<step_t, std::allocator< step_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "step_t" "," "std::allocator< step_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_step_t_Sg__iterator(std::vector< step_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_step_t_Sg____nonzero__(std::vector< step_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_step_t_Sg____bool__(std::vector< step_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< step_t >::size_type std_vector_Sl_step_t_Sg____len__(std::vector< step_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< step_t >::value_type std_vector_Sl_step_t_Sg__pop(std::vector< step_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<step_t,std::allocator< step_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< step_t,std::allocator< step_t > > *std_vector_Sl_step_t_Sg____getslice__(std::vector< step_t > *self,std::vector< step_t >::difference_type i,std::vector< step_t >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_step_t_Sg____setslice__(std::vector< step_t > *self,std::vector< step_t >::difference_type i,std::vector< step_t >::difference_type j,std::vector< step_t,std::allocator< step_t > > const &v=std::vector< step_t,std::allocator< step_t > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_step_t_Sg____delslice__(std::vector< step_t > *self,std::vector< step_t >::difference_type i,std::vector< step_t >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_step_t_Sg____delitem____SWIG_0(std::vector< step_t > *self,std::vector< step_t >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< step_t,std::allocator< step_t > > *std_vector_Sl_step_t_Sg____getitem____SWIG_0(std::vector< step_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<step_t,std::allocator< step_t > >::difference_type id = i;
      std::vector<step_t,std::allocator< step_t > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_step_t_Sg____setitem____SWIG_0(std::vector< step_t > *self,PySliceObject *slice,std::vector< step_t,std::allocator< step_t > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<step_t,std::allocator< step_t > >::difference_type id = i;
      std::vector<step_t,std::allocator< step_t > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_step_t_Sg____setitem____SWIG_1(std::vector< step_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<step_t,std::allocator< step_t > >::difference_type id = i;
      std::vector<step_t,std::allocator< step_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_step_t_Sg____delitem____SWIG_1(std::vector< step_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<step_t,std::allocator< step_t > >::difference_type id = i;
      std::vector<step_t,std::allocator< step_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< step_t >::value_type const &std_vector_Sl_step_t_Sg____getitem____SWIG_1(std::vector< step_t > const *self,std::vector< step_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_step_t_Sg____setitem____SWIG_2(std::vector< step_t > *self,std::vector< step_t >::difference_type i,std::vector< step_t >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_step_t_Sg__append(std::vector< step_t > *self,std::vector< step_t >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< step_t >::iterator std_vector_Sl_step_t_Sg__erase__SWIG_0(std::vector< step_t > *self,std::vector< step_t >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< step_t >::iterator std_vector_Sl_step_t_Sg__erase__SWIG_1(std::vector< step_t > *self,std::vector< step_t >::iterator first,std::vector< step_t >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< step_t >::iterator std_vector_Sl_step_t_Sg__insert__SWIG_0(std::vector< step_t > *self,std::vector< step_t >::iterator pos,std::vector< step_t >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_step_t_Sg__insert__SWIG_1(std::vector< step_t > *self,std::vector< step_t >::iterator pos,std::vector< step_t >::size_type n,std::vector< step_t >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<tree_key_t > {
      typedef pointer_category category;
      static const char* type_name() { return"tree_key_t"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<tree_key_t, std::allocator< tree_key_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "tree_key_t" "," "std::allocator< tree_key_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_tree_key_t_Sg__iterator(std::vector< tree_key_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_tree_key_t_Sg____nonzero__(std::vector< tree_key_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_tree_key_t_Sg____bool__(std::vector< tree_key_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< tree_key_t >::size_type std_vector_Sl_tree_key_t_Sg____len__(std::vector< tree_key_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< tree_key_t >::value_type std_vector_Sl_tree_key_t_Sg__pop(std::vector< tree_key_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<tree_key_t,std::allocator< tree_key_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< tree_key_t,std::allocator< tree_key_t > > *std_vector_Sl_tree_key_t_Sg____getslice__(std::vector< tree_key_t > *self,std::vector< tree_key_t >::difference_type i,std::vector< tree_key_t >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg____setslice__(std::vector< tree_key_t > *self,std::vector< tree_key_t >::difference_type i,std::vector< tree_key_t >::difference_type j,std::vector< tree_key_t,std::allocator< tree_key_t > > const &v=std::vector< tree_key_t,std::allocator< tree_key_t > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg____delslice__(std::vector< tree_key_t > *self,std::vector< tree_key_t >::difference_type i,std::vector< tree_key_t >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg____delitem____SWIG_0(std::vector< tree_key_t > *self,std::vector< tree_key_t >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< tree_key_t,std::allocator< tree_key_t > > *std_vector_Sl_tree_key_t_Sg____getitem____SWIG_0(std::vector< tree_key_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<tree_key_t,std::allocator< tree_key_t > >::difference_type id = i;
      std::vector<tree_key_t,std::allocator< tree_key_t > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg____setitem____SWIG_0(std::vector< tree_key_t > *self,PySliceObject *slice,std::vector< tree_key_t,std::allocator< tree_key_t > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<tree_key_t,std::allocator< tree_key_t > >::difference_type id = i;
      std::vector<tree_key_t,std::allocator< tree_key_t > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg____setitem____SWIG_1(std::vector< tree_key_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<tree_key_t,std::allocator< tree_key_t > >::difference_type id = i;
      std::vector<tree_key_t,std::allocator< tree_key_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg____delitem____SWIG_1(std::vector< tree_key_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<tree_key_t,std::allocator< tree_key_t > >::difference_type id = i;
      std::vector<tree_key_t,std::allocator< tree_key_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< tree_key_t >::value_type const &std_vector_Sl_tree_key_t_Sg____getitem____SWIG_1(std::vector< tree_key_t > const *self,std::vector< tree_key_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg____setitem____SWIG_2(std::vector< tree_key_t > *self,std::vector< tree_key_t >::difference_type i,std::vector< tree_key_t >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg__append(std::vector< tree_key_t > *self,std::vector< tree_key_t >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< tree_key_t >::iterator std_vector_Sl_tree_key_t_Sg__erase__SWIG_0(std::vector< tree_key_t > *self,std::vector< tree_key_t >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< tree_key_t >::iterator std_vector_Sl_tree_key_t_Sg__erase__SWIG_1(std::vector< tree_key_t > *self,std::vector< tree_key_t >::iterator first,std::vector< tree_key_t >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< tree_key_t >::iterator std_vector_Sl_tree_key_t_Sg__insert__SWIG_0(std::vector< tree_key_t > *self,std::vector< tree_key_t >::iterator pos,std::vector< tree_key_t >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_tree_key_t_Sg__insert__SWIG_1(std::vector< tree_key_t > *self,std::vector< tree_key_t >::iterator pos,std::vector< tree_key_t >::size_type n,std::vector< tree_key_t >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <class T >
    struct traits_asptr<std::list<T> >  {
      static int asptr(PyObject *obj, std::list<T> **lis) {
	return traits_asptr_stdseq<std::list<T> >::asptr(obj, lis);
      }
    };

    template <class T>
    struct traits_from<std::list<T> > {
      static PyObject *from(const std::list<T> & vec) {
	return traits_from_stdseq<std::list<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::list<tree_key_t, std::allocator< tree_key_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "tree_key_t" ", " "std::allocator< tree_key_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_tree_key_t_Sg__iterator(std::list< tree_key_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_tree_key_t_Sg____nonzero__(std::list< tree_key_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_tree_key_t_Sg____bool__(std::list< tree_key_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< tree_key_t >::size_type std_list_Sl_tree_key_t_Sg____len__(std::list< tree_key_t > const *self){
      return self->size();
    }
SWIGINTERN std::list< tree_key_t >::value_type std_list_Sl_tree_key_t_Sg__pop(std::list< tree_key_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list<tree_key_t,std::allocator< tree_key_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::list< tree_key_t,std::allocator< tree_key_t > > *std_list_Sl_tree_key_t_Sg____getslice__(std::list< tree_key_t > *self,std::list< tree_key_t >::difference_type i,std::list< tree_key_t >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_tree_key_t_Sg____setslice__(std::list< tree_key_t > *self,std::list< tree_key_t >::difference_type i,std::list< tree_key_t >::difference_type j,std::list< tree_key_t,std::allocator< tree_key_t > > const &v=std::list< tree_key_t,std::allocator< tree_key_t > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_tree_key_t_Sg____delslice__(std::list< tree_key_t > *self,std::list< tree_key_t >::difference_type i,std::list< tree_key_t >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_tree_key_t_Sg____delitem____SWIG_0(std::list< tree_key_t > *self,std::list< tree_key_t >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::list< tree_key_t,std::allocator< tree_key_t > > *std_list_Sl_tree_key_t_Sg____getitem____SWIG_0(std::list< tree_key_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<tree_key_t,std::allocator< tree_key_t > >::difference_type id = i;
      std::list<tree_key_t,std::allocator< tree_key_t > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_tree_key_t_Sg____setitem____SWIG_0(std::list< tree_key_t > *self,PySliceObject *slice,std::list< tree_key_t,std::allocator< tree_key_t > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<tree_key_t,std::allocator< tree_key_t > >::difference_type id = i;
      std::list<tree_key_t,std::allocator< tree_key_t > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_tree_key_t_Sg____setitem____SWIG_1(std::list< tree_key_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<tree_key_t,std::allocator< tree_key_t > >::difference_type id = i;
      std::list<tree_key_t,std::allocator< tree_key_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_tree_key_t_Sg____delitem____SWIG_1(std::list< tree_key_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list<tree_key_t,std::allocator< tree_key_t > >::difference_type id = i;
      std::list<tree_key_t,std::allocator< tree_key_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< tree_key_t >::value_type const &std_list_Sl_tree_key_t_Sg____getitem____SWIG_1(std::list< tree_key_t > const *self,std::list< tree_key_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_tree_key_t_Sg____setitem____SWIG_2(std::list< tree_key_t > *self,std::list< tree_key_t >::difference_type i,std::list< tree_key_t >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_list_Sl_tree_key_t_Sg__append(std::list< tree_key_t > *self,std::list< tree_key_t >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< tree_key_t >::iterator std_list_Sl_tree_key_t_Sg__erase__SWIG_0(std::list< tree_key_t > *self,std::list< tree_key_t >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< tree_key_t >::iterator std_list_Sl_tree_key_t_Sg__erase__SWIG_1(std::list< tree_key_t > *self,std::list< tree_key_t >::iterator first,std::list< tree_key_t >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< tree_key_t >::iterator std_list_Sl_tree_key_t_Sg__insert__SWIG_0(std::list< tree_key_t > *self,std::list< tree_key_t >::iterator pos,std::list< tree_key_t >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_tree_key_t_Sg__insert__SWIG_1(std::list< tree_key_t > *self,std::list< tree_key_t >::iterator pos,std::list< tree_key_t >::size_type n,std::list< tree_key_t >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits<edge_t > {
      typedef pointer_category category;
      static const char* type_name() { return"edge_t"; }
    };
  }


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< tree_key_t, edge_t > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "tree_key_t" "," "edge_t" " >";
	  }
	};
      }
    

  namespace swig {
    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueITerator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueITerator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueITerator_T<OutIter>(current, begin, end, seq);
    }
  }


  namespace swig {
    template <class SwigPySeq, class K, class T, class Compare, class Alloc >
    inline void
    assign(const SwigPySeq& swigpyseq, std::map<K,T,Compare,Alloc > *map) {
      typedef typename std::map<K,T,Compare,Alloc >::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T, class Compare, class Alloc>
    struct traits_asptr<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<map_type, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<map_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T, class Compare, class Alloc >
    struct traits_from<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;

      static PyObject *asdict(const map_type& map) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	size_type size = map.size();
	int pysize = (size <= (size_type) INT_MAX) ? (int) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError,
			  "map size not valid in python");
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  swig::SwigVar_PyObject key = swig::from(i->first);
	  swig::SwigVar_PyObject val = swig::from(i->second);
	  PyDict_SetItem(obj, key, val);
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return obj;
      }
                
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_InternalNewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  return asdict(map);
	}
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map<tree_key_t, edge_t, std::less< tree_key_t >, std::allocator< std::pair< tree_key_t const,edge_t > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "tree_key_t" "," "edge_t" "," "std::less< tree_key_t >" "," "std::allocator< std::pair< tree_key_t const,edge_t > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_tree_key_t_Sc_edge_t_Sg__iterator(std::map< tree_key_t,edge_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_tree_key_t_Sc_edge_t_Sg____nonzero__(std::map< tree_key_t,edge_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_tree_key_t_Sc_edge_t_Sg____bool__(std::map< tree_key_t,edge_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< tree_key_t,edge_t >::size_type std_map_Sl_tree_key_t_Sc_edge_t_Sg____len__(std::map< tree_key_t,edge_t > const *self){
      return self->size();
    }
SWIGINTERN std::map< tree_key_t,edge_t >::mapped_type const &std_map_Sl_tree_key_t_Sc_edge_t_Sg____getitem__(std::map< tree_key_t,edge_t > *self,std::map< tree_key_t,edge_t >::key_type const &key){
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_edge_t_Sg____delitem__(std::map< tree_key_t,edge_t > *self,std::map< tree_key_t,edge_t >::key_type const &key){
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_tree_key_t_Sc_edge_t_Sg__has_key(std::map< tree_key_t,edge_t > const *self,std::map< tree_key_t,edge_t >::key_type const &key){
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_tree_key_t_Sc_edge_t_Sg__keys(std::map< tree_key_t,edge_t > *self){
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::size_type size = self->size();
      int pysize = (size <= (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_tree_key_t_Sc_edge_t_Sg__values(std::map< tree_key_t,edge_t > *self){
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::size_type size = self->size();
      int pysize = (size <= (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_tree_key_t_Sc_edge_t_Sg__items(std::map< tree_key_t,edge_t > *self){
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::size_type size = self->size();
      int pysize = (size <= (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_tree_key_t_Sc_edge_t_Sg____contains__(std::map< tree_key_t,edge_t > *self,std::map< tree_key_t,edge_t >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_tree_key_t_Sc_edge_t_Sg__key_iterator(std::map< tree_key_t,edge_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_tree_key_t_Sc_edge_t_Sg__value_iterator(std::map< tree_key_t,edge_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_edge_t_Sg____setitem____SWIG_0(std::map< tree_key_t,edge_t > *self,std::map< tree_key_t,edge_t >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_edge_t_Sg____setitem____SWIG_1(std::map< tree_key_t,edge_t > *self,std::map< tree_key_t,edge_t >::key_type const &key,std::map< tree_key_t,edge_t >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_tree_key_t_Sc_edge_t_Sg__asdict(std::map< tree_key_t,edge_t > *self){
      return swig::traits_from< std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_edge_t_Sg__erase__SWIG_1(std::map< tree_key_t,edge_t > *self,std::map< tree_key_t,edge_t >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_edge_t_Sg__erase__SWIG_2(std::map< tree_key_t,edge_t > *self,std::map< tree_key_t,edge_t >::iterator first,std::map< tree_key_t,edge_t >::iterator last){ self->erase(first, last); }

  namespace swig {
    template <>  struct traits<node_t > {
      typedef pointer_category category;
      static const char* type_name() { return"node_t"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair< tree_key_t, node_t > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "tree_key_t" "," "node_t" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map<tree_key_t, node_t, std::less< tree_key_t >, std::allocator< std::pair< tree_key_t const,node_t > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "tree_key_t" "," "node_t" "," "std::less< tree_key_t >" "," "std::allocator< std::pair< tree_key_t const,node_t > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_tree_key_t_Sc_node_t_Sg__iterator(std::map< tree_key_t,node_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_tree_key_t_Sc_node_t_Sg____nonzero__(std::map< tree_key_t,node_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_tree_key_t_Sc_node_t_Sg____bool__(std::map< tree_key_t,node_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< tree_key_t,node_t >::size_type std_map_Sl_tree_key_t_Sc_node_t_Sg____len__(std::map< tree_key_t,node_t > const *self){
      return self->size();
    }
SWIGINTERN std::map< tree_key_t,node_t >::mapped_type const &std_map_Sl_tree_key_t_Sc_node_t_Sg____getitem__(std::map< tree_key_t,node_t > *self,std::map< tree_key_t,node_t >::key_type const &key){
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_node_t_Sg____delitem__(std::map< tree_key_t,node_t > *self,std::map< tree_key_t,node_t >::key_type const &key){
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_tree_key_t_Sc_node_t_Sg__has_key(std::map< tree_key_t,node_t > const *self,std::map< tree_key_t,node_t >::key_type const &key){
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_tree_key_t_Sc_node_t_Sg__keys(std::map< tree_key_t,node_t > *self){
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::size_type size = self->size();
      int pysize = (size <= (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_tree_key_t_Sc_node_t_Sg__values(std::map< tree_key_t,node_t > *self){
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::size_type size = self->size();
      int pysize = (size <= (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_tree_key_t_Sc_node_t_Sg__items(std::map< tree_key_t,node_t > *self){
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::size_type size = self->size();
      int pysize = (size <= (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_tree_key_t_Sc_node_t_Sg____contains__(std::map< tree_key_t,node_t > *self,std::map< tree_key_t,node_t >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_tree_key_t_Sc_node_t_Sg__key_iterator(std::map< tree_key_t,node_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_tree_key_t_Sc_node_t_Sg__value_iterator(std::map< tree_key_t,node_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_node_t_Sg____setitem____SWIG_0(std::map< tree_key_t,node_t > *self,std::map< tree_key_t,node_t >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_node_t_Sg____setitem____SWIG_1(std::map< tree_key_t,node_t > *self,std::map< tree_key_t,node_t >::key_type const &key,std::map< tree_key_t,node_t >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_tree_key_t_Sc_node_t_Sg__asdict(std::map< tree_key_t,node_t > *self){
      return swig::traits_from< std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_node_t_Sg__erase__SWIG_1(std::map< tree_key_t,node_t > *self,std::map< tree_key_t,node_t >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_tree_key_t_Sc_node_t_Sg__erase__SWIG_2(std::map< tree_key_t,node_t > *self,std::map< tree_key_t,node_t >::iterator first,std::map< tree_key_t,node_t >::iterator last){ self->erase(first, last); }

  namespace swig {
    template <>  struct traits<poly_t > {
      typedef pointer_category category;
      static const char* type_name() { return"poly_t"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<poly_t, std::allocator< poly_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "poly_t" "," "std::allocator< poly_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_poly_t_Sg__iterator(std::vector< poly_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_poly_t_Sg____nonzero__(std::vector< poly_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_poly_t_Sg____bool__(std::vector< poly_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< poly_t >::size_type std_vector_Sl_poly_t_Sg____len__(std::vector< poly_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< poly_t >::value_type std_vector_Sl_poly_t_Sg__pop(std::vector< poly_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<poly_t,std::allocator< poly_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< poly_t,std::allocator< poly_t > > *std_vector_Sl_poly_t_Sg____getslice__(std::vector< poly_t > *self,std::vector< poly_t >::difference_type i,std::vector< poly_t >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_poly_t_Sg____setslice__(std::vector< poly_t > *self,std::vector< poly_t >::difference_type i,std::vector< poly_t >::difference_type j,std::vector< poly_t,std::allocator< poly_t > > const &v=std::vector< poly_t,std::allocator< poly_t > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_poly_t_Sg____delslice__(std::vector< poly_t > *self,std::vector< poly_t >::difference_type i,std::vector< poly_t >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_poly_t_Sg____delitem____SWIG_0(std::vector< poly_t > *self,std::vector< poly_t >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< poly_t,std::allocator< poly_t > > *std_vector_Sl_poly_t_Sg____getitem____SWIG_0(std::vector< poly_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<poly_t,std::allocator< poly_t > >::difference_type id = i;
      std::vector<poly_t,std::allocator< poly_t > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_poly_t_Sg____setitem____SWIG_0(std::vector< poly_t > *self,PySliceObject *slice,std::vector< poly_t,std::allocator< poly_t > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<poly_t,std::allocator< poly_t > >::difference_type id = i;
      std::vector<poly_t,std::allocator< poly_t > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_poly_t_Sg____setitem____SWIG_1(std::vector< poly_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<poly_t,std::allocator< poly_t > >::difference_type id = i;
      std::vector<poly_t,std::allocator< poly_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_poly_t_Sg____delitem____SWIG_1(std::vector< poly_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<poly_t,std::allocator< poly_t > >::difference_type id = i;
      std::vector<poly_t,std::allocator< poly_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< poly_t >::value_type const &std_vector_Sl_poly_t_Sg____getitem____SWIG_1(std::vector< poly_t > const *self,std::vector< poly_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_poly_t_Sg____setitem____SWIG_2(std::vector< poly_t > *self,std::vector< poly_t >::difference_type i,std::vector< poly_t >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_poly_t_Sg__append(std::vector< poly_t > *self,std::vector< poly_t >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< poly_t >::iterator std_vector_Sl_poly_t_Sg__erase__SWIG_0(std::vector< poly_t > *self,std::vector< poly_t >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< poly_t >::iterator std_vector_Sl_poly_t_Sg__erase__SWIG_1(std::vector< poly_t > *self,std::vector< poly_t >::iterator first,std::vector< poly_t >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< poly_t >::iterator std_vector_Sl_poly_t_Sg__insert__SWIG_0(std::vector< poly_t > *self,std::vector< poly_t >::iterator pos,std::vector< poly_t >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_poly_t_Sg__insert__SWIG_1(std::vector< poly_t > *self,std::vector< poly_t >::iterator pos,std::vector< poly_t >::size_type n,std::vector< poly_t >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 

SWIGINTERN char const *index_value_pair_t___str__(index_value_pair_t *self){
        static char buffer[255];
        sprintf(buffer,"index: %u, val: %.2e", (unsigned int)self->index,
                                               self->val);
        return &buffer[0];
}

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN char const *index_value_pair_t___repr__(index_value_pair_t *self){
        static char buffer[255];
        sprintf(buffer,"(%u, %.2e)", (unsigned int)self->index, self->val);
        return &buffer[0];
}

/* Macros to extract array attributes.
 */
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject *)a))
#define array_type(a)          (int)(PyArray_TYPE(a))
#define array_numdims(a)       (((PyArrayObject *)a)->nd)
#define array_dimensions(a)    (((PyArrayObject *)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject *)a)->dimensions[i])
#define array_data(a)          (((PyArrayObject *)a)->data)
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS(a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED(a))
#define array_is_fortran(a)    (PyArray_ISFORTRAN(a))

SWIGINTERN char const *genotype_value_pair_t___str__(genotype_value_pair_t *self){
        static char buffer[255];
        unsigned long L = (self->genotype).size();
        if(L > 2)
                sprintf(buffer,"genotype: %d...%d, val: %.2e",
                               (int)(self->genotype)[0],
                               (int)(self->genotype)[L-1],
                               self->val);
        else if(L == 2)
                sprintf(buffer,"genotype: %d%d, val: %.2e",
                               (int)(self->genotype)[0],
                               (int)(self->genotype)[1],
                               self->val);
        else if(L == 1)
                sprintf(buffer,"genotype: %d, val: %.2e",
                               (int)(self->genotype)[0],
                               self->val);
        else
                sprintf(buffer,"genotype: (empty), val: %.2e",
                               self->val);
        return &buffer[0];
}
SWIGINTERN char const *genotype_value_pair_t___repr__(genotype_value_pair_t *self){
        static char buffer[255];
        unsigned long L = (self->genotype).size();
        if(L > 2)
                sprintf(buffer,"([%d, ..., %d], %.2e)",
                               (int)(self->genotype)[0],
                               (int)(self->genotype)[L-1],
                               self->val);
        else if(L == 2)
                sprintf(buffer,"([%d, %d], %.2e)",
                               (int)(self->genotype)[0],
                               (int)(self->genotype)[1],
                               self->val);
        else if(L == 1)
                sprintf(buffer,"([%d], %.2e)",
                               (int)(self->genotype)[0],
                               self->val);
        else
                sprintf(buffer,"([], %.2e)", self->val);
        return &buffer[0];
}
SWIGINTERN char const *stat_t___str__(stat_t *self){
        static char buffer[255];
        sprintf(buffer,"mean: %e, variance: %e", self->mean, self->variance);
        return &buffer[0];
}
SWIGINTERN char const *stat_t___repr__(stat_t *self){
        static char buffer[255];
        sprintf(buffer,"(%e, %e)", self->mean, self->variance);
        return &buffer[0];
}

const int haploid_lowd_L_get(haploid_lowd *h) {
  return (const int) h->get_number_of_loci();
}
const int haploid_lowd_number_of_loci_get(haploid_lowd *h) {
  return (const int) h->get_number_of_loci();
}

const int haploid_lowd_N_get(haploid_lowd *h) {
  return (const int) h->get_population_size();
}
const int haploid_lowd_population_size_get(haploid_lowd *h) {
  return (const int) h->get_population_size();
}

int haploid_lowd_generation_get(haploid_lowd *h) {
  return (const int) h->get_generation();
}
void haploid_lowd_generation_set(haploid_lowd *h, int g) {
  h->set_generation(g);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


/* Support older NumPy data type names
*/
#if NDARRAY_VERSION < 0x01000000
#define NPY_BOOL          PyArray_BOOL
#define NPY_BYTE          PyArray_BYTE
#define NPY_UBYTE         PyArray_UBYTE
#define NPY_SHORT         PyArray_SHORT
#define NPY_USHORT        PyArray_USHORT
#define NPY_INT           PyArray_INT
#define NPY_UINT          PyArray_UINT
#define NPY_LONG          PyArray_LONG
#define NPY_ULONG         PyArray_ULONG
#define NPY_LONGLONG      PyArray_LONGLONG
#define NPY_ULONGLONG     PyArray_ULONGLONG
#define NPY_FLOAT         PyArray_FLOAT
#define NPY_DOUBLE        PyArray_DOUBLE
#define NPY_LONGDOUBLE    PyArray_LONGDOUBLE
#define NPY_CFLOAT        PyArray_CFLOAT
#define NPY_CDOUBLE       PyArray_CDOUBLE
#define NPY_CLONGDOUBLE   PyArray_CLONGDOUBLE
#define NPY_OBJECT        PyArray_OBJECT
#define NPY_STRING        PyArray_STRING
#define NPY_UNICODE       PyArray_UNICODE
#define NPY_VOID          PyArray_VOID
#define NPY_NTYPES        PyArray_NTYPES
#define NPY_NOTYPE        PyArray_NOTYPE
#define NPY_CHAR          PyArray_CHAR
#define NPY_USERDEF       PyArray_USERDEF
#define npy_intp          intp

#define NPY_MAX_BYTE      MAX_BYTE
#define NPY_MIN_BYTE      MIN_BYTE
#define NPY_MAX_UBYTE     MAX_UBYTE
#define NPY_MAX_SHORT     MAX_SHORT
#define NPY_MIN_SHORT     MIN_SHORT
#define NPY_MAX_USHORT    MAX_USHORT
#define NPY_MAX_INT       MAX_INT
#define NPY_MIN_INT       MIN_INT
#define NPY_MAX_UINT      MAX_UINT
#define NPY_MAX_LONG      MAX_LONG
#define NPY_MIN_LONG      MIN_LONG
#define NPY_MAX_ULONG     MAX_ULONG
#define NPY_MAX_LONGLONG  MAX_LONGLONG
#define NPY_MIN_LONGLONG  MIN_LONGLONG
#define NPY_MAX_ULONGLONG MAX_ULONGLONG
#define NPY_MAX_INTP      MAX_INTP
#define NPY_MIN_INTP      MIN_INTP

#define NPY_FARRAY        FARRAY
#define NPY_F_CONTIGUOUS  F_CONTIGUOUS
#endif


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj) {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;

    return "unkown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode) {
    static const char* type_names[25] = {"bool", "byte", "unsigned byte",
                                   "short", "unsigned short", "int",
                                   "unsigned int", "long", "unsigned long",
                                   "long long", "unsigned long long",
                                   "float", "double", "long double",
                                   "complex float", "complex double",
                                   "complex long double", "object",
                                   "string", "unicode", "void", "ntypes",
                                   "notype", "char", "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  Allow character and byte
   * to match.  Also allow int and long to match.  This is deprecated.
   * You should use PyArray_EquivTypenums() instead.
   */
  int type_match(int actual_type, int desired_type) {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }


  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input, int typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char * desired_type = typecode_string(typecode);
      const char * actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type, actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input, int typecode,
                                               int* is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject* py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary, int* is_new_object,
                                 int min_dims, int max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                             array_type(ary),
                                                             min_dims,
                                                             max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary, int* is_new_object,
                              int min_dims, int max_dims)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(ary->descr);
      result = (PyArrayObject*) PyArray_FromArray(ary, ary->descr, NPY_FORTRAN);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int typecode,
                                                          int* is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input, typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int typecode,
                                                       int* is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input, typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2, 0, 0);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }



  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary, int exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions, array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary, int* exact_dimensions, int n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str, array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary, npy_intp* size, int n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims, actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be FORTRAN ordered.  If the
   * the PyArrayObject is already FORTRAN ordered, do nothing.  Else,
   * set the FORTRAN ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    if (array_is_fortran(ary)) return success;
    /* Set the FORTRAN ordered flag */
    ary->flags = NPY_FARRAY;
    /* Recompute the strides */
    ary->strides[0] = ary->strides[nd-1];
    for (i=1; i < nd; ++i)
      ary->strides[i] = ary->strides[i-1] * array_size(ary,i-1);
    return success;
  }

 
SWIGINTERN char const *haploid_lowd___str__(haploid_lowd *self){
        static char buffer[255];
        sprintf(buffer,"haploid_lowd: L = %d, N = %f", (int)self->L(), self->N());
        return &buffer[0];
}
SWIGINTERN char const *haploid_lowd___repr__(haploid_lowd *self){
        static char buffer[255];
        sprintf(buffer,"<haploid_lowd(%d, %g)>", (int)self->L(), self->N());
        return &buffer[0];
}
SWIGINTERN int haploid_lowd__set_genotypes(haploid_lowd *self,int len1,double *indices,int len2,double *vals){
        vector<index_value_pair_t> gt;
        index_value_pair_t temp;
        for(size_t i = 0; i != (size_t)len1; i++) {
                temp.index = (int)indices[i];
                temp.val = vals[i];
                gt.push_back(temp);
        }
        return self->set_genotypes(gt);
}
SWIGINTERN int haploid_lowd__set_mutation_rates(haploid_lowd *self,double *IN_ARRAY2,int DIM1,int DIM2){
        double ** mrs = new double*[2];
        for(size_t i = 0; i < 2; i++)
                mrs[i] = &(IN_ARRAY2[DIM2 * i]);
        int result = self->set_mutation_rates(mrs);
        delete[] mrs;
        return result;
}
SWIGINTERN void haploid_lowd_get_fitnesses(haploid_lowd *self,int DIM1,double *ARGOUT_ARRAY1){
        for(size_t i=0; i < (size_t)DIM1; i++)
                ARGOUT_ARRAY1[i] = self->get_fitness(i);
}
SWIGINTERN int haploid_lowd__set_fitness_func(haploid_lowd *self,int len1,double *indices,int len2,double *vals){
        vector<index_value_pair_t> iv;
        index_value_pair_t temp;
        for(size_t i = 0; i != (size_t)len1; i++) {
                temp.index = (int)indices[i];
                temp.val = vals[i];
                iv.push_back(temp);
        }
        return (self->fitness).init_list(iv);
}
SWIGINTERN int haploid_lowd__set_fitness_coeff(haploid_lowd *self,int len1,double *indices,int len2,double *vals){
        vector<index_value_pair_t> iv;
        index_value_pair_t temp;
        for(size_t i = 0; i != (size_t)len1; i++) {
                temp.index = (int)indices[i];
                temp.val = vals[i];
                iv.push_back(temp);
        }
        return (self->fitness).init_coeff_list(iv);
}
SWIGINTERN void haploid_lowd_set_fitness_additive(haploid_lowd *self,int DIM1,double *IN_ARRAY1){
        if(DIM1 != self->L())
                PyErr_Format(PyExc_ValueError, "The array had a wrong length.");
        if ((self->fitness).additive(IN_ARRAY1))
                PyErr_Format(PyExc_RuntimeError, "Error in the C++ function.");
}

const int clone_t_number_of_traits_get(clone_t *c) {
        return (const int) c->trait.size();
}


const int haploid_highd_L_get(haploid_highd *h) {
  return (const int) h->get_number_of_loci();
}
const int haploid_highd_number_of_loci_get(haploid_highd *h) {
  return (const int) h->get_number_of_loci();
}

const int haploid_highd_N_get(haploid_highd *h) {
  return (const int) h->get_population_size();
}
const int haploid_highd_population_size_get(haploid_highd *h) {
  return (const int) h->get_population_size();
}

int haploid_highd_generation_get(haploid_highd *h) {
  return (const int) h->get_generation();
}
void haploid_highd_generation_set(haploid_highd *h, int g) {
  h->set_generation(g);
}

const int haploid_highd_number_of_clones_get(haploid_highd *h) {
  return (const int) h->get_number_of_clones();
}

const int haploid_highd_number_of_traits_get(haploid_highd *h) {
  return (const int) h->get_number_of_traits();
}

const double haploid_highd_max_fitness_get(haploid_highd *h) {
  return (const double) h->get_max_fitness();
}

const double haploid_highd_participation_ratio_get(haploid_highd *h) {
  return (const double) h->get_participation_ratio();
}

const bool haploid_highd_all_polymorphic_get(haploid_highd *h) {
  return (const bool) h->is_all_polymorphic();
}

const bool haploid_highd_most_polymorphic_get(haploid_highd *h) {
  return (const bool) h->is_most_polymorphic();
}

SWIGINTERN char const *clone_t___str__(clone_t *self){
        static char buffer[255];
        sprintf(buffer,"clone: %u traits, genome size = %u",
                       (unsigned int)(self->trait).size(),
                       (unsigned int)(self->genotype).size());
        return &buffer[0];
}
SWIGINTERN char const *clone_t___repr__(clone_t *self){
        static char buffer[255];
        sprintf(buffer,"<clone>");
        return &buffer[0];
}
SWIGINTERN void clone_t__get_trait(clone_t *self,int DIM1,double *ARGOUT_ARRAY1){
        for(size_t i=0; i < (size_t)DIM1; i++)
                ARGOUT_ARRAY1[i] = (self->trait)[i];
}
SWIGINTERN char const *tree_key_t___str__(tree_key_t *self){
        static char buffer[255];
        sprintf(buffer,"tree key: index = %d, age = %d", (int)(self->index), (int)(self->age));
        return &buffer[0];
}
SWIGINTERN char const *tree_key_t___repr__(tree_key_t *self){
        static char buffer[255];
        sprintf(buffer,"tree_key(%d, %d)", (int)(self->index), (int)(self->age));
        return &buffer[0];
}
SWIGINTERN char const *step_t___str__(step_t *self){
        static char buffer[255];
        sprintf(buffer,"tree_step: pos = %d, step = %d", (int)(self->pos), (int)(self->step));
        return &buffer[0];
}
SWIGINTERN char const *step_t___repr__(step_t *self){
        static char buffer[255];
        sprintf(buffer,"tree_step(%d, %d)", (int)(self->pos), (int)(self->step));
        return &buffer[0];
}
SWIGINTERN char const *node_t___str__(node_t *self){
        static char buffer[255];
        sprintf(buffer,"tree_node");
        return &buffer[0];
}
SWIGINTERN char const *node_t___repr__(node_t *self){
        static char buffer[255];
        sprintf(buffer,"<tree_node>");
        return &buffer[0];
}
SWIGINTERN int node_t__get_crossover_chunk(node_t *self,int i){return (self->crossover)[i];}
SWIGINTERN char const *edge_t___str__(edge_t *self){
        static char buffer[255];
        sprintf(buffer,"tree_edge");
        return &buffer[0];
}
SWIGINTERN char const *edge_t___repr__(edge_t *self){
        static char buffer[255];
        sprintf(buffer,"<tree_edge>");
        return &buffer[0];
}
SWIGINTERN int edge_t__get_segment_chunk(edge_t *self,int i){return (self->segment)[i];}
SWIGINTERN char const *poly_t___str__(poly_t *self){
        static char buffer[255];
        sprintf(buffer,"polymorphism: birth = %d, sweep time = %d, effect = %f, fitness = %f, fitness variance = %f",
                       (int)(self->birth),
                       (int)(self->sweep_time),
                       (double)(self->effect),
                       (double)(self->fitness),
                       (double)(self->fitness_variance));
        return &buffer[0];
}
SWIGINTERN char const *poly_t___repr__(poly_t *self){
        static char buffer[255];
        sprintf(buffer,"polymorphism(b=%d, age=%d, e=%f, f=%f, fvar=%f)",
                       (int)(self->birth),
                       (int)(self->sweep_time),
                       (double)(self->effect),
                       (double)(self->fitness),
                       (double)(self->fitness_variance));
        return &buffer[0];
}

SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN char const *rooted_tree___str__(rooted_tree *self){
        static char buffer[255];
        sprintf(buffer,"genealogy tree with %u nodes", (unsigned int)(self->nodes).size());
        return &buffer[0];
}
SWIGINTERN char const *rooted_tree___repr__(rooted_tree *self){
        static char buffer[255];
        sprintf(buffer,"<rooted_tree(%u nodes)>", (unsigned int)(self->nodes).size());
        return &buffer[0];
}
SWIGINTERN std::vector< tree_key_t > rooted_tree__ancestors_at_age(rooted_tree *self,int age,tree_key_t subtree_root){
        vector <tree_key_t> ancestors;
        self->ancestors_at_age(age, subtree_root, ancestors);
        return ancestors;
}
SWIGINTERN rooted_tree rooted_tree_create_subtree_from_keys(rooted_tree *self,std::vector< tree_key_t > leaves){
        rooted_tree other;
        self->construct_subtree(leaves, other);
        return other;
}
SWIGINTERN char const *multi_locus_genealogy___str__(multi_locus_genealogy *self){
        static char buffer[255];
        sprintf(buffer,"multi_locus_genealogy for %u loci", (unsigned int)(self->loci).size());
        return &buffer[0];
}
SWIGINTERN char const *multi_locus_genealogy___repr__(multi_locus_genealogy *self){
        static char buffer[255];
        sprintf(buffer,"<multi_locus_genealogy(%u)>", (unsigned int)(self->loci).size());
        return &buffer[0];
}
SWIGINTERN int multi_locus_genealogy__get_number_of_loci(multi_locus_genealogy *self){
        return (self->loci).size();
}
SWIGINTERN void multi_locus_genealogy__get_loci(multi_locus_genealogy *self,int DIM1,int *ARGOUT_ARRAY1){
        for(size_t i = 0; i < (self->loci).size(); i++)
                ARGOUT_ARRAY1[i] = (self->loci)[i];
}
SWIGINTERN rooted_tree multi_locus_genealogy_get_tree(multi_locus_genealogy *self,int locus){
        vector<int>::iterator index;
        index = std::find((self->loci).begin(), (self->loci).end(), locus);
        if(index == (self->loci).end()) {
                throw (int)1;
        } else
                return (self->trees)[(int)(index - (self->loci).begin())];
}

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN char const *haploid_highd___str__(haploid_highd *self){
        static char buffer[255];
        sprintf(buffer,"haploid_highd: L = %d, N = %d", self->L(), self->N());
        return &buffer[0];
}
SWIGINTERN char const *haploid_highd___repr__(haploid_highd *self){
        static char buffer[255];
        sprintf(buffer,"<haploid_highd(%d, %d)>", self->L(), self->N());
        return &buffer[0];
}
SWIGINTERN clone_t haploid_highd_get_clone(haploid_highd *self,unsigned long n){
        return self->population.at(n);

}
SWIGINTERN void haploid_highd__set_mutant_loci(haploid_highd *self,int *IN_ARRAY1,int DIM1){
        /* call the C++ method */
        self->set_mutant_loci(IN_ARRAY1);
        self->update_fitness();
}
SWIGINTERN void haploid_highd__set_trait_weights(haploid_highd *self,double *IN_ARRAY1,int DIM1){
        /* call the C++ method */
        self->set_trait_weights(IN_ARRAY1);
        self->update_fitness();
}
SWIGINTERN void haploid_highd__get_trait_weights(haploid_highd *self,double *ARGOUT_ARRAY1,int DIM1){
        /* check trait number */
        if(DIM1 != self->get_number_of_traits())
                throw HP_BADARG; 

        /* set the output array */
        for(size_t t=0; t < (size_t)DIM1; t++)
                ARGOUT_ARRAY1[t] = self->get_trait_weight(t);
}
SWIGINTERN int haploid_highd_set_genotypes(haploid_highd *self,int len1,double *genotypes,int len2,double *counts){
        /* We use a flattened array */
        len1 /= len2;
        vector<genotype_value_pair_t> gt;
        genotype_value_pair_t temp;
        for(size_t i = 0; i != (size_t)len2; i++) {
                temp.genotype = boost::dynamic_bitset<>(len1);
                for(size_t j=0; j < (size_t)len1; j++)
                        temp.genotype[j] = (bool)genotypes[i * len1 + j];
                temp.val = counts[i];
                gt.push_back(temp);
        }
        return self->set_genotypes(gt);
}
SWIGINTERN multi_locus_genealogy haploid_highd__get_genealogy(haploid_highd *self){
        return self->genealogy;
}
SWIGINTERN void haploid_highd_get_allele_frequencies(haploid_highd *self,double *ARGOUT_ARRAY1,int DIM1){
        for(size_t i=0; i < (size_t)self->get_number_of_loci(); i++)
                ARGOUT_ARRAY1[i] = self->get_allele_frequency(i);
}
SWIGINTERN void haploid_highd_get_derived_allele_frequencies(haploid_highd *self,double *ARGOUT_ARRAY1,int DIM1){
        if (self->is_all_polymorphic()){
                for(size_t i=0; i < (size_t)self->get_number_of_loci(); i++)
                        ARGOUT_ARRAY1[i] = self->get_derived_allele_frequency(i);
    }
}
SWIGINTERN void haploid_highd_get_trait_additive(haploid_highd *self,double *ARGOUT_ARRAY1,int DIM1,int t=0){
        /* Initialize to zero */
        for(size_t i=0; i < (size_t)DIM1; i++)
                ARGOUT_ARRAY1[i] = 0;

        /* Add any coefficient you found */
        hypercube_highd *trait = &((self->trait)[t]);
        coeff_single_locus_t * coeff;
        for(size_t i=0; i < trait->coefficients_single_locus.size(); i++) {
                coeff = &(trait->coefficients_single_locus[i]);
                ARGOUT_ARRAY1[coeff->locus] += coeff->value;
        }
}
SWIGINTERN void haploid_highd_set_trait_additive(haploid_highd *self,int DIM1,double *IN_ARRAY1,int t=0){
        /* reset trait landscape */
        self->trait[t].reset_additive();
        
        /* set the new coefficients */
        vector <int> loci(1,0);
        for(size_t i = 0; i < (size_t)DIM1; i++) {
                if(abs(IN_ARRAY1[i]) > HP_NOTHING) {
                        loci[0] = i;
                        self->add_trait_coefficient(IN_ARRAY1[i], loci, t);
                }
        }

        /* update the population */
        self->update_traits();
        self->update_fitness();
}
SWIGINTERN void haploid_highd_set_fitness_additive(haploid_highd *self,int DIM1,double *IN_ARRAY1){
        /* reset trait landscape */
        self->trait[0].reset_additive();
        
        /* set the new coefficients */
        vector <int> loci(1,0);
        for(size_t i = 0; i < (size_t)DIM1; i++) {
                if(abs(IN_ARRAY1[i]) > HP_NOTHING) {
                        loci[0] = i;
                        self->add_trait_coefficient(IN_ARRAY1[i], loci, 0);
                }
        }

        /* update the population */
        self->update_traits();
        self->update_fitness();
}
SWIGINTERN boost::dynamic_bitset< > haploid_highd_get_genotype(haploid_highd *self,int n){
        return self->population[n].genotype;
}

double hivpopulation_treatment_get(hivpopulation *h) {
  return (double) h->get_treatment();
}
void hivpopulation_treatment_set(hivpopulation *h, double t) {
  h->set_treatment(t);
}

SWIGINTERN char const *hivgene___str__(hivgene *self){
        static char buffer[255];
        sprintf(buffer,"hivgene: start: %d, end: %d", self->start, self->end);
        return &buffer[0];
}
SWIGINTERN char const *hivgene___repr__(hivgene *self){
        static char buffer[255];
        sprintf(buffer,"hivgene(%d, %d)", self->start, self->end);
        return &buffer[0];
}

SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN char const *hivpopulation___str__(hivpopulation *self){
        static char buffer[255];
        sprintf(buffer,"hivpopulation: N = %d", self->N());
        return &buffer[0];
}
SWIGINTERN char const *hivpopulation___repr__(hivpopulation *self){
        static char buffer[255];
        sprintf(buffer,"<hivpopulation(%d)>", self->N());
        return &buffer[0];
}
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_incr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_decr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  ptrdiff_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_distance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_equal",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_advance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___ne__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___iadd__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___isub__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___add__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"SwigPyIterator___sub__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap__intVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:_intVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_intVector___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > const &arg4_defvalue = std::vector< int,std::allocator< int > >() ;
  std::vector< int,std::allocator< int > > *arg4 = (std::vector< int,std::allocator< int > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:_intVector___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_intVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_intVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_intVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  try {
    std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:_intVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_intVector___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_intVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_intVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"_intVector___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap__intVector___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap__intVector___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_intVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__intVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"_intVector___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap__intVector___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap__intVector___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_intVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__intVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_intVector___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"_intVector___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap__intVector___setitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap__intVector___setitem____SWIG_0(self, argc, argv);
    case 3:
      return _wrap__intVector___setitem____SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_intVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__intVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:_intVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__intVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__intVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__intVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__intVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:_intVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_intVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_intVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__intVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__intVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"_intVector_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap__intVector_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap__intVector_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_intVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new__intVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__intVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new__intVector" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new__intVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new__intVector",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new__intVector__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new__intVector__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new__intVector__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new__intVector__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__intVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__intVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:_intVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:_intVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_intVector_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_intVector_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"_intVector_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap__intVector_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap__intVector_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_intVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__intVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_intVector_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,arg2,(int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_intVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_intVector_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_intVector_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"_intVector_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int(argv[3], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap__intVector_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap__intVector_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_intVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__intVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:_intVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_intVector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__intVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_intVector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__intVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__intVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_intVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_intVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_tree_step_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_iterator" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_step_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___nonzero__" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (bool)std_vector_Sl_step_t_Sg____nonzero__((std::vector< step_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___bool__" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (bool)std_vector_Sl_step_t_Sg____bool__((std::vector< step_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___len__" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = std_vector_Sl_step_t_Sg____len__((std::vector< step_t > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_pop" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  try {
    result = std_vector_Sl_step_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< step_t >::value_type(static_cast< const std::vector< step_t >::value_type& >(result))), SWIGTYPE_p_step_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::difference_type arg2 ;
  std::vector< step_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< step_t,std::allocator< step_t > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_tree_step___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___getslice__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step___getslice__" "', argument " "2"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_tree_step___getslice__" "', argument " "3"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< step_t >::difference_type >(val3);
  try {
    result = (std::vector< step_t,std::allocator< step_t > > *)std_vector_Sl_step_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::difference_type arg2 ;
  std::vector< step_t >::difference_type arg3 ;
  std::vector< step_t,std::allocator< step_t > > const &arg4_defvalue = std::vector< step_t,std::allocator< step_t > >() ;
  std::vector< step_t,std::allocator< step_t > > *arg4 = (std::vector< step_t,std::allocator< step_t > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:vector_tree_step___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___setslice__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step___setslice__" "', argument " "2"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_tree_step___setslice__" "', argument " "3"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< step_t >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<step_t,std::allocator< step_t > > *ptr = (std::vector<step_t,std::allocator< step_t > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_tree_step___setslice__" "', argument " "4"" of type '" "std::vector< step_t,std::allocator< step_t > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step___setslice__" "', argument " "4"" of type '" "std::vector< step_t,std::allocator< step_t > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  try {
    std_vector_Sl_step_t_Sg____setslice__(arg1,arg2,arg3,(std::vector< step_t,std::allocator< step_t > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::difference_type arg2 ;
  std::vector< step_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_tree_step___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___delslice__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step___delslice__" "', argument " "2"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_tree_step___delslice__" "', argument " "3"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< step_t >::difference_type >(val3);
  try {
    std_vector_Sl_step_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___delitem__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step___delitem__" "', argument " "2"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::difference_type >(val2);
  try {
    std_vector_Sl_step_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< step_t,std::allocator< step_t > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___getitem__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< step_t,std::allocator< step_t > > *)std_vector_Sl_step_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< step_t,std::allocator< step_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___setitem__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<step_t,std::allocator< step_t > > *ptr = (std::vector<step_t,std::allocator< step_t > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_step___setitem__" "', argument " "3"" of type '" "std::vector< step_t,std::allocator< step_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step___setitem__" "', argument " "3"" of type '" "std::vector< step_t,std::allocator< step_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_step_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< step_t,std::allocator< step_t > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___setitem__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_step_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___delitem__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_step_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_step___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_step___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_vector_tree_step___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_step___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< step_t >::__delitem__(std::vector< step_t >::difference_type)\n"
    "    std::vector< step_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< step_t >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___getitem__" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step___getitem__" "', argument " "2"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::difference_type >(val2);
  try {
    result = (std::vector< step_t >::value_type *) &std_vector_Sl_step_t_Sg____getitem____SWIG_1((std::vector< step_t > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_step_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_step___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_step___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_tree_step___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_step___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< step_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< step_t >::__getitem__(std::vector< step_t >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::difference_type arg2 ;
  std::vector< step_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step___setitem__" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step___setitem__" "', argument " "2"" of type '" "std::vector< step_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_step___setitem__" "', argument " "3"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step___setitem__" "', argument " "3"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< step_t >::value_type * >(argp3);
  try {
    std_vector_Sl_step_t_Sg____setitem____SWIG_2(arg1,arg2,(step_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_step___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_step_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_step___setitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_vector_tree_step___setitem____SWIG_0(self, argc, argv);
    case 3:
      return _wrap_vector_tree_step___setitem____SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_step___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< step_t >::__setitem__(PySliceObject *,std::vector< step_t,std::allocator< step_t > > const &)\n"
    "    std::vector< step_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< step_t >::__setitem__(std::vector< step_t >::difference_type,std::vector< step_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_tree_step_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_append" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_tree_step_append" "', argument " "2"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step_append" "', argument " "2"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< step_t >::value_type * >(argp2);
  std_vector_Sl_step_t_Sg__append(arg1,(step_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_step__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< step_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< step_t > *)new std::vector< step_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_step__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< step_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<step_t,std::allocator< step_t > > *ptr = (std::vector<step_t,std::allocator< step_t > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_tree_step" "', argument " "1"" of type '" "std::vector< step_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_tree_step" "', argument " "1"" of type '" "std::vector< step_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< step_t > *)new std::vector< step_t >((std::vector< step_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_empty" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (bool)((std::vector< step_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_size" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = ((std::vector< step_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_clear" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_tree_step_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_swap" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_tree_step_swap" "', argument " "2"" of type '" "std::vector< step_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step_swap" "', argument " "2"" of type '" "std::vector< step_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< step_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< step_t > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_get_allocator" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = ((std::vector< step_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< step_t >::allocator_type(static_cast< const std::vector< step_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_step_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_begin" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< step_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_end" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< step_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_rbegin" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< step_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_rend" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< step_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_step__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< step_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_tree_step" "', argument " "1"" of type '" "std::vector< step_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< step_t >::size_type >(val1);
  result = (std::vector< step_t > *)new std::vector< step_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_pop_back" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_resize" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step_resize" "', argument " "2"" of type '" "std::vector< step_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< step_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_erase" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_erase" "', argument " "2"" of type '" "std::vector< step_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< step_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_erase" "', argument " "2"" of type '" "std::vector< step_t >::iterator""'");
    }
  }
  result = std_vector_Sl_step_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< step_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::iterator arg2 ;
  std::vector< step_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< step_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_erase" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_erase" "', argument " "2"" of type '" "std::vector< step_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< step_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_erase" "', argument " "2"" of type '" "std::vector< step_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_erase" "', argument " "3"" of type '" "std::vector< step_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< step_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_erase" "', argument " "3"" of type '" "std::vector< step_t >::iterator""'");
    }
  }
  result = std_vector_Sl_step_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< step_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_step_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_step_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_tree_step_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_step_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< step_t >::erase(std::vector< step_t >::iterator)\n"
    "    std::vector< step_t >::erase(std::vector< step_t >::iterator,std::vector< step_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_step__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t >::size_type arg1 ;
  std::vector< step_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< step_t > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_tree_step" "', argument " "1"" of type '" "std::vector< step_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< step_t >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_tree_step" "', argument " "2"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_tree_step" "', argument " "2"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< step_t >::value_type * >(argp2);
  result = (std::vector< step_t > *)new std::vector< step_t >(arg1,(std::vector< step_t >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_step(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_vector_tree_step",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_step_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_vector_tree_step__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_vector_tree_step__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_vector_tree_step__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_vector_tree_step__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_tree_step'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< step_t >::vector()\n"
    "    std::vector< step_t >::vector(std::vector< step_t > const &)\n"
    "    std::vector< step_t >::vector(std::vector< step_t >::size_type)\n"
    "    std::vector< step_t >::vector(std::vector< step_t >::size_type,std::vector< step_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_tree_step_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_push_back" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_tree_step_push_back" "', argument " "2"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step_push_back" "', argument " "2"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< step_t >::value_type * >(argp2);
  (arg1)->push_back((std::vector< step_t >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_front" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (std::vector< step_t >::value_type *) &((std::vector< step_t > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_step_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_back" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = (std::vector< step_t >::value_type *) &((std::vector< step_t > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_step_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::size_type arg2 ;
  std::vector< step_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_tree_step_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_assign" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step_assign" "', argument " "2"" of type '" "std::vector< step_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_step_assign" "', argument " "3"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step_assign" "', argument " "3"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< step_t >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< step_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::size_type arg2 ;
  std::vector< step_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_resize" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step_resize" "', argument " "2"" of type '" "std::vector< step_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_step_resize" "', argument " "3"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step_resize" "', argument " "3"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< step_t >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< step_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_step_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_step_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_step_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_tree_step_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_step_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< step_t >::resize(std::vector< step_t >::size_type)\n"
    "    std::vector< step_t >::resize(std::vector< step_t >::size_type,std::vector< step_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::iterator arg2 ;
  std::vector< step_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< step_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_insert" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_insert" "', argument " "2"" of type '" "std::vector< step_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< step_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_insert" "', argument " "2"" of type '" "std::vector< step_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_step_insert" "', argument " "3"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step_insert" "', argument " "3"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< step_t >::value_type * >(argp3);
  result = std_vector_Sl_step_t_Sg__insert__SWIG_0(arg1,arg2,(step_t const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< step_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::iterator arg2 ;
  std::vector< step_t >::size_type arg3 ;
  std::vector< step_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_insert" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_insert" "', argument " "2"" of type '" "std::vector< step_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< step_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_step_insert" "', argument " "2"" of type '" "std::vector< step_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_tree_step_insert" "', argument " "3"" of type '" "std::vector< step_t >::size_type""'");
  } 
  arg3 = static_cast< std::vector< step_t >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_tree_step_insert" "', argument " "4"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_step_insert" "', argument " "4"" of type '" "std::vector< step_t >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< step_t >::value_type * >(argp4);
  std_vector_Sl_step_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(step_t const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_step_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_step_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<step_t,std::allocator< step_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< step_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_step_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_step_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_tree_step_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_step_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< step_t >::insert(std::vector< step_t >::iterator,std::vector< step_t >::value_type const &)\n"
    "    std::vector< step_t >::insert(std::vector< step_t >::iterator,std::vector< step_t >::size_type,std::vector< step_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  std::vector< step_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_tree_step_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_reserve" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_step_reserve" "', argument " "2"" of type '" "std::vector< step_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< step_t >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_step_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_step_capacity" "', argument " "1"" of type '" "std::vector< step_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  result = ((std::vector< step_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_tree_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< step_t > *arg1 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_tree_step" "', argument " "1"" of type '" "std::vector< step_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< step_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_tree_step_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_tree_step_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_tree_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_iterator" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_tree_key_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___nonzero__" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (bool)std_vector_Sl_tree_key_t_Sg____nonzero__((std::vector< tree_key_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___bool__" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (bool)std_vector_Sl_tree_key_t_Sg____bool__((std::vector< tree_key_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___len__" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = std_vector_Sl_tree_key_t_Sg____len__((std::vector< tree_key_t > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_pop" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  try {
    result = std_vector_Sl_tree_key_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< tree_key_t >::value_type(static_cast< const std::vector< tree_key_t >::value_type& >(result))), SWIGTYPE_p_tree_key_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::difference_type arg2 ;
  std::vector< tree_key_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< tree_key_t,std::allocator< tree_key_t > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_tree_key___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___getslice__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key___getslice__" "', argument " "2"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_tree_key___getslice__" "', argument " "3"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< tree_key_t >::difference_type >(val3);
  try {
    result = (std::vector< tree_key_t,std::allocator< tree_key_t > > *)std_vector_Sl_tree_key_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::difference_type arg2 ;
  std::vector< tree_key_t >::difference_type arg3 ;
  std::vector< tree_key_t,std::allocator< tree_key_t > > const &arg4_defvalue = std::vector< tree_key_t,std::allocator< tree_key_t > >() ;
  std::vector< tree_key_t,std::allocator< tree_key_t > > *arg4 = (std::vector< tree_key_t,std::allocator< tree_key_t > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:vector_tree_key___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___setslice__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key___setslice__" "', argument " "2"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_tree_key___setslice__" "', argument " "3"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< tree_key_t >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<tree_key_t,std::allocator< tree_key_t > > *ptr = (std::vector<tree_key_t,std::allocator< tree_key_t > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_tree_key___setslice__" "', argument " "4"" of type '" "std::vector< tree_key_t,std::allocator< tree_key_t > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key___setslice__" "', argument " "4"" of type '" "std::vector< tree_key_t,std::allocator< tree_key_t > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  try {
    std_vector_Sl_tree_key_t_Sg____setslice__(arg1,arg2,arg3,(std::vector< tree_key_t,std::allocator< tree_key_t > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::difference_type arg2 ;
  std::vector< tree_key_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_tree_key___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___delslice__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key___delslice__" "', argument " "2"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_tree_key___delslice__" "', argument " "3"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< tree_key_t >::difference_type >(val3);
  try {
    std_vector_Sl_tree_key_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___delitem__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key___delitem__" "', argument " "2"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::difference_type >(val2);
  try {
    std_vector_Sl_tree_key_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< tree_key_t,std::allocator< tree_key_t > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___getitem__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< tree_key_t,std::allocator< tree_key_t > > *)std_vector_Sl_tree_key_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< tree_key_t,std::allocator< tree_key_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___setitem__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<tree_key_t,std::allocator< tree_key_t > > *ptr = (std::vector<tree_key_t,std::allocator< tree_key_t > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_key___setitem__" "', argument " "3"" of type '" "std::vector< tree_key_t,std::allocator< tree_key_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key___setitem__" "', argument " "3"" of type '" "std::vector< tree_key_t,std::allocator< tree_key_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_tree_key_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< tree_key_t,std::allocator< tree_key_t > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___setitem__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_tree_key_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___delitem__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_tree_key_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_key___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_key___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_vector_tree_key___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_key___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tree_key_t >::__delitem__(std::vector< tree_key_t >::difference_type)\n"
    "    std::vector< tree_key_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< tree_key_t >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___getitem__" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key___getitem__" "', argument " "2"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::difference_type >(val2);
  try {
    result = (std::vector< tree_key_t >::value_type *) &std_vector_Sl_tree_key_t_Sg____getitem____SWIG_1((std::vector< tree_key_t > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_key___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_key___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_tree_key___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_key___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tree_key_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< tree_key_t >::__getitem__(std::vector< tree_key_t >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::difference_type arg2 ;
  std::vector< tree_key_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key___setitem__" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key___setitem__" "', argument " "2"" of type '" "std::vector< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_key___setitem__" "', argument " "3"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key___setitem__" "', argument " "3"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< tree_key_t >::value_type * >(argp3);
  try {
    std_vector_Sl_tree_key_t_Sg____setitem____SWIG_2(arg1,arg2,(tree_key_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_key___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_key___setitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_vector_tree_key___setitem____SWIG_0(self, argc, argv);
    case 3:
      return _wrap_vector_tree_key___setitem____SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_key___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tree_key_t >::__setitem__(PySliceObject *,std::vector< tree_key_t,std::allocator< tree_key_t > > const &)\n"
    "    std::vector< tree_key_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< tree_key_t >::__setitem__(std::vector< tree_key_t >::difference_type,std::vector< tree_key_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_tree_key_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_append" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_tree_key_append" "', argument " "2"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key_append" "', argument " "2"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< tree_key_t >::value_type * >(argp2);
  std_vector_Sl_tree_key_t_Sg__append(arg1,(tree_key_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_key__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< tree_key_t > *)new std::vector< tree_key_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_key__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< tree_key_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<tree_key_t,std::allocator< tree_key_t > > *ptr = (std::vector<tree_key_t,std::allocator< tree_key_t > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_tree_key" "', argument " "1"" of type '" "std::vector< tree_key_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_tree_key" "', argument " "1"" of type '" "std::vector< tree_key_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< tree_key_t > *)new std::vector< tree_key_t >((std::vector< tree_key_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_empty" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (bool)((std::vector< tree_key_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_size" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = ((std::vector< tree_key_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_clear" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_tree_key_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_swap" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_tree_key_swap" "', argument " "2"" of type '" "std::vector< tree_key_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key_swap" "', argument " "2"" of type '" "std::vector< tree_key_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< tree_key_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< tree_key_t > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_get_allocator" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = ((std::vector< tree_key_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< tree_key_t >::allocator_type(static_cast< const std::vector< tree_key_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_tree_key_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_begin" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_end" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_rbegin" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tree_key_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_rend" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tree_key_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_key__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< tree_key_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_tree_key" "', argument " "1"" of type '" "std::vector< tree_key_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< tree_key_t >::size_type >(val1);
  result = (std::vector< tree_key_t > *)new std::vector< tree_key_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_pop_back" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_resize" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key_resize" "', argument " "2"" of type '" "std::vector< tree_key_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< tree_key_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_erase" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_erase" "', argument " "2"" of type '" "std::vector< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_erase" "', argument " "2"" of type '" "std::vector< tree_key_t >::iterator""'");
    }
  }
  result = std_vector_Sl_tree_key_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::iterator arg2 ;
  std::vector< tree_key_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< tree_key_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_erase" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_erase" "', argument " "2"" of type '" "std::vector< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_erase" "', argument " "2"" of type '" "std::vector< tree_key_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_erase" "', argument " "3"" of type '" "std::vector< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_erase" "', argument " "3"" of type '" "std::vector< tree_key_t >::iterator""'");
    }
  }
  result = std_vector_Sl_tree_key_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_key_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_key_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_tree_key_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_key_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tree_key_t >::erase(std::vector< tree_key_t >::iterator)\n"
    "    std::vector< tree_key_t >::erase(std::vector< tree_key_t >::iterator,std::vector< tree_key_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_key__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t >::size_type arg1 ;
  std::vector< tree_key_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< tree_key_t > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_tree_key" "', argument " "1"" of type '" "std::vector< tree_key_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< tree_key_t >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_tree_key" "', argument " "2"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_tree_key" "', argument " "2"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< tree_key_t >::value_type * >(argp2);
  result = (std::vector< tree_key_t > *)new std::vector< tree_key_t >(arg1,(std::vector< tree_key_t >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_tree_key(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_vector_tree_key",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_vector_tree_key__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_vector_tree_key__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_vector_tree_key__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_vector_tree_key__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_tree_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tree_key_t >::vector()\n"
    "    std::vector< tree_key_t >::vector(std::vector< tree_key_t > const &)\n"
    "    std::vector< tree_key_t >::vector(std::vector< tree_key_t >::size_type)\n"
    "    std::vector< tree_key_t >::vector(std::vector< tree_key_t >::size_type,std::vector< tree_key_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_tree_key_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_push_back" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_tree_key_push_back" "', argument " "2"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key_push_back" "', argument " "2"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< tree_key_t >::value_type * >(argp2);
  (arg1)->push_back((std::vector< tree_key_t >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_front" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (std::vector< tree_key_t >::value_type *) &((std::vector< tree_key_t > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_back" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = (std::vector< tree_key_t >::value_type *) &((std::vector< tree_key_t > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::size_type arg2 ;
  std::vector< tree_key_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_tree_key_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_assign" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key_assign" "', argument " "2"" of type '" "std::vector< tree_key_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_key_assign" "', argument " "3"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key_assign" "', argument " "3"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< tree_key_t >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< tree_key_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::size_type arg2 ;
  std::vector< tree_key_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_resize" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key_resize" "', argument " "2"" of type '" "std::vector< tree_key_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_key_resize" "', argument " "3"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key_resize" "', argument " "3"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< tree_key_t >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< tree_key_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_key_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_key_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_tree_key_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_key_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tree_key_t >::resize(std::vector< tree_key_t >::size_type)\n"
    "    std::vector< tree_key_t >::resize(std::vector< tree_key_t >::size_type,std::vector< tree_key_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::iterator arg2 ;
  std::vector< tree_key_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< tree_key_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_insert" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_insert" "', argument " "2"" of type '" "std::vector< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_insert" "', argument " "2"" of type '" "std::vector< tree_key_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_tree_key_insert" "', argument " "3"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key_insert" "', argument " "3"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< tree_key_t >::value_type * >(argp3);
  result = std_vector_Sl_tree_key_t_Sg__insert__SWIG_0(arg1,arg2,(tree_key_t const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::iterator arg2 ;
  std::vector< tree_key_t >::size_type arg3 ;
  std::vector< tree_key_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_insert" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_insert" "', argument " "2"" of type '" "std::vector< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_tree_key_insert" "', argument " "2"" of type '" "std::vector< tree_key_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_tree_key_insert" "', argument " "3"" of type '" "std::vector< tree_key_t >::size_type""'");
  } 
  arg3 = static_cast< std::vector< tree_key_t >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_tree_key_insert" "', argument " "4"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_tree_key_insert" "', argument " "4"" of type '" "std::vector< tree_key_t >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< tree_key_t >::value_type * >(argp4);
  std_vector_Sl_tree_key_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(tree_key_t const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_tree_key_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_tree_key_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_tree_key_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_tree_key_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tree_key_t >::insert(std::vector< tree_key_t >::iterator,std::vector< tree_key_t >::value_type const &)\n"
    "    std::vector< tree_key_t >::insert(std::vector< tree_key_t >::iterator,std::vector< tree_key_t >::size_type,std::vector< tree_key_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  std::vector< tree_key_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_tree_key_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_reserve" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_tree_key_reserve" "', argument " "2"" of type '" "std::vector< tree_key_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< tree_key_t >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_tree_key_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_tree_key_capacity" "', argument " "1"" of type '" "std::vector< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  result = ((std::vector< tree_key_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_tree_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tree_key_t > *arg1 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_tree_key" "', argument " "1"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< tree_key_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_tree_key_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_tree_key_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_list_tree_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_iterator" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_tree_key_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___nonzero__" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (bool)std_list_Sl_tree_key_t_Sg____nonzero__((std::list< tree_key_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___bool__" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (bool)std_list_Sl_tree_key_t_Sg____bool__((std::list< tree_key_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___len__" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = std_list_Sl_tree_key_t_Sg____len__((std::list< tree_key_t > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_pop" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  try {
    result = std_list_Sl_tree_key_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::list< tree_key_t >::value_type(static_cast< const std::list< tree_key_t >::value_type& >(result))), SWIGTYPE_p_tree_key_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::difference_type arg2 ;
  std::list< tree_key_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::list< tree_key_t,std::allocator< tree_key_t > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:list_tree_key___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___getslice__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key___getslice__" "', argument " "2"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "list_tree_key___getslice__" "', argument " "3"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg3 = static_cast< std::list< tree_key_t >::difference_type >(val3);
  try {
    result = (std::list< tree_key_t,std::allocator< tree_key_t > > *)std_list_Sl_tree_key_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::difference_type arg2 ;
  std::list< tree_key_t >::difference_type arg3 ;
  std::list< tree_key_t,std::allocator< tree_key_t > > const &arg4_defvalue = std::list< tree_key_t,std::allocator< tree_key_t > >() ;
  std::list< tree_key_t,std::allocator< tree_key_t > > *arg4 = (std::list< tree_key_t,std::allocator< tree_key_t > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:list_tree_key___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___setslice__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key___setslice__" "', argument " "2"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "list_tree_key___setslice__" "', argument " "3"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg3 = static_cast< std::list< tree_key_t >::difference_type >(val3);
  if (obj3) {
    {
      std::list<tree_key_t,std::allocator< tree_key_t > > *ptr = (std::list<tree_key_t,std::allocator< tree_key_t > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "list_tree_key___setslice__" "', argument " "4"" of type '" "std::list< tree_key_t,std::allocator< tree_key_t > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key___setslice__" "', argument " "4"" of type '" "std::list< tree_key_t,std::allocator< tree_key_t > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  try {
    std_list_Sl_tree_key_t_Sg____setslice__(arg1,arg2,arg3,(std::list< tree_key_t,std::allocator< tree_key_t > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::difference_type arg2 ;
  std::list< tree_key_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:list_tree_key___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___delslice__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key___delslice__" "', argument " "2"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "list_tree_key___delslice__" "', argument " "3"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg3 = static_cast< std::list< tree_key_t >::difference_type >(val3);
  try {
    std_list_Sl_tree_key_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___delitem__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key___delitem__" "', argument " "2"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::difference_type >(val2);
  try {
    std_list_Sl_tree_key_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::list< tree_key_t,std::allocator< tree_key_t > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___getitem__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::list< tree_key_t,std::allocator< tree_key_t > > *)std_list_Sl_tree_key_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< tree_key_t,std::allocator< tree_key_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___setitem__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::list<tree_key_t,std::allocator< tree_key_t > > *ptr = (std::list<tree_key_t,std::allocator< tree_key_t > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "list_tree_key___setitem__" "', argument " "3"" of type '" "std::list< tree_key_t,std::allocator< tree_key_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key___setitem__" "', argument " "3"" of type '" "std::list< tree_key_t,std::allocator< tree_key_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_tree_key_t_Sg____setitem____SWIG_0(arg1,arg2,(std::list< tree_key_t,std::allocator< tree_key_t > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___setitem__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_list_Sl_tree_key_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___delitem__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_list_Sl_tree_key_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"list_tree_key___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_list_tree_key___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_list_tree_key___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'list_tree_key___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< tree_key_t >::__delitem__(std::list< tree_key_t >::difference_type)\n"
    "    std::list< tree_key_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_list_tree_key___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::list< tree_key_t >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___getitem__" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key___getitem__" "', argument " "2"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::difference_type >(val2);
  try {
    result = (std::list< tree_key_t >::value_type *) &std_list_Sl_tree_key_t_Sg____getitem____SWIG_1((std::list< tree_key_t > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"list_tree_key___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_list_tree_key___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_list_tree_key___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'list_tree_key___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< tree_key_t >::__getitem__(PySliceObject *)\n"
    "    std::list< tree_key_t >::__getitem__(std::list< tree_key_t >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_list_tree_key___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::difference_type arg2 ;
  std::list< tree_key_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key___setitem__" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key___setitem__" "', argument " "2"" of type '" "std::list< tree_key_t >::difference_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "list_tree_key___setitem__" "', argument " "3"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key___setitem__" "', argument " "3"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp3);
  try {
    std_list_Sl_tree_key_t_Sg____setitem____SWIG_2(arg1,arg2,(tree_key_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"list_tree_key___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_list_tree_key___setitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_list_tree_key___setitem____SWIG_0(self, argc, argv);
    case 3:
      return _wrap_list_tree_key___setitem____SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'list_tree_key___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< tree_key_t >::__setitem__(PySliceObject *,std::list< tree_key_t,std::allocator< tree_key_t > > const &)\n"
    "    std::list< tree_key_t >::__setitem__(PySliceObject *)\n"
    "    std::list< tree_key_t >::__setitem__(std::list< tree_key_t >::difference_type,std::list< tree_key_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_list_tree_key_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:list_tree_key_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_append" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "list_tree_key_append" "', argument " "2"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key_append" "', argument " "2"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp2);
  std_list_Sl_tree_key_t_Sg__append(arg1,(tree_key_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_list_tree_key__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::list< tree_key_t > *)new std::list< tree_key_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_list_tree_key__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::list< tree_key_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::list<tree_key_t,std::allocator< tree_key_t > > *ptr = (std::list<tree_key_t,std::allocator< tree_key_t > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_list_tree_key" "', argument " "1"" of type '" "std::list< tree_key_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_list_tree_key" "', argument " "1"" of type '" "std::list< tree_key_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< tree_key_t > *)new std::list< tree_key_t >((std::list< tree_key_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_empty" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (bool)((std::list< tree_key_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_size" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = ((std::list< tree_key_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_clear" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:list_tree_key_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_swap" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "list_tree_key_swap" "', argument " "2"" of type '" "std::list< tree_key_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key_swap" "', argument " "2"" of type '" "std::list< tree_key_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< tree_key_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< tree_key_t > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_get_allocator" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = ((std::list< tree_key_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< tree_key_t >::allocator_type(static_cast< const std::list< tree_key_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_tree_key_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_begin" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_end" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_rbegin" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< tree_key_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_rend" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< tree_key_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_list_tree_key__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::list< tree_key_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_list_tree_key" "', argument " "1"" of type '" "std::list< tree_key_t >::size_type""'");
  } 
  arg1 = static_cast< std::list< tree_key_t >::size_type >(val1);
  result = (std::list< tree_key_t > *)new std::list< tree_key_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_pop_back" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_resize" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key_resize" "', argument " "2"" of type '" "std::list< tree_key_t >::size_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::list< tree_key_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_erase" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_erase" "', argument " "2"" of type '" "std::list< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_erase" "', argument " "2"" of type '" "std::list< tree_key_t >::iterator""'");
    }
  }
  result = std_list_Sl_tree_key_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::iterator arg2 ;
  std::list< tree_key_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::list< tree_key_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_erase" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_erase" "', argument " "2"" of type '" "std::list< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_erase" "', argument " "2"" of type '" "std::list< tree_key_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_erase" "', argument " "3"" of type '" "std::list< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_erase" "', argument " "3"" of type '" "std::list< tree_key_t >::iterator""'");
    }
  }
  result = std_list_Sl_tree_key_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"list_tree_key_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_list_tree_key_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_list_tree_key_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'list_tree_key_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< tree_key_t >::erase(std::list< tree_key_t >::iterator)\n"
    "    std::list< tree_key_t >::erase(std::list< tree_key_t >::iterator,std::list< tree_key_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_list_tree_key__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t >::size_type arg1 ;
  std::list< tree_key_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::list< tree_key_t > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_list_tree_key" "', argument " "1"" of type '" "std::list< tree_key_t >::size_type""'");
  } 
  arg1 = static_cast< std::list< tree_key_t >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_list_tree_key" "', argument " "2"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_list_tree_key" "', argument " "2"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp2);
  result = (std::list< tree_key_t > *)new std::list< tree_key_t >(arg1,(std::list< tree_key_t >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_list_tree_key(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_list_tree_key",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_list_tree_key__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_list_tree_key__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_list_tree_key__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_list_tree_key__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_list_tree_key'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< tree_key_t >::list()\n"
    "    std::list< tree_key_t >::list(std::list< tree_key_t > const &)\n"
    "    std::list< tree_key_t >::list(std::list< tree_key_t >::size_type)\n"
    "    std::list< tree_key_t >::list(std::list< tree_key_t >::size_type,std::list< tree_key_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_list_tree_key_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:list_tree_key_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_push_back" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "list_tree_key_push_back" "', argument " "2"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key_push_back" "', argument " "2"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp2);
  (arg1)->push_back((std::list< tree_key_t >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_front" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (std::list< tree_key_t >::value_type *) &((std::list< tree_key_t > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_back" "', argument " "1"" of type '" "std::list< tree_key_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  result = (std::list< tree_key_t >::value_type *) &((std::list< tree_key_t > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::size_type arg2 ;
  std::list< tree_key_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:list_tree_key_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_assign" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key_assign" "', argument " "2"" of type '" "std::list< tree_key_t >::size_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "list_tree_key_assign" "', argument " "3"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key_assign" "', argument " "3"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::list< tree_key_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::size_type arg2 ;
  std::list< tree_key_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_resize" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "list_tree_key_resize" "', argument " "2"" of type '" "std::list< tree_key_t >::size_type""'");
  } 
  arg2 = static_cast< std::list< tree_key_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "list_tree_key_resize" "', argument " "3"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key_resize" "', argument " "3"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::list< tree_key_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"list_tree_key_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_list_tree_key_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_list_tree_key_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'list_tree_key_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< tree_key_t >::resize(std::list< tree_key_t >::size_type)\n"
    "    std::list< tree_key_t >::resize(std::list< tree_key_t >::size_type,std::list< tree_key_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_list_tree_key_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::iterator arg2 ;
  std::list< tree_key_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::list< tree_key_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_insert" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_insert" "', argument " "2"" of type '" "std::list< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_insert" "', argument " "2"" of type '" "std::list< tree_key_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "list_tree_key_insert" "', argument " "3"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key_insert" "', argument " "3"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp3);
  result = std_list_Sl_tree_key_t_Sg__insert__SWIG_0(arg1,arg2,(tree_key_t const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< tree_key_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::iterator arg2 ;
  std::list< tree_key_t >::size_type arg3 ;
  std::list< tree_key_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_insert" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_insert" "', argument " "2"" of type '" "std::list< tree_key_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "list_tree_key_insert" "', argument " "2"" of type '" "std::list< tree_key_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "list_tree_key_insert" "', argument " "3"" of type '" "std::list< tree_key_t >::size_type""'");
  } 
  arg3 = static_cast< std::list< tree_key_t >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "list_tree_key_insert" "', argument " "4"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key_insert" "', argument " "4"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp4);
  std_list_Sl_tree_key_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(tree_key_t const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"list_tree_key_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::list<tree_key_t,std::allocator< tree_key_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< tree_key_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_list_tree_key_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_list_tree_key_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'list_tree_key_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< tree_key_t >::insert(std::list< tree_key_t >::iterator,std::list< tree_key_t >::value_type const &)\n"
    "    std::list< tree_key_t >::insert(std::list< tree_key_t >::iterator,std::list< tree_key_t >::size_type,std::list< tree_key_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_list_tree_key_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_pop_front" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  std::list< tree_key_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:list_tree_key_push_front",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_push_front" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "list_tree_key_push_front" "', argument " "2"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "list_tree_key_push_front" "', argument " "2"" of type '" "std::list< tree_key_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< tree_key_t >::value_type * >(argp2);
  (arg1)->push_front((std::list< tree_key_t >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_list_tree_key_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "list_tree_key_reverse" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_list_tree_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< tree_key_t > *arg1 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_list_tree_key" "', argument " "1"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< tree_key_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *list_tree_key_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *list_tree_key_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_map_key_edge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< tree_key_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< tree_key_t,edge_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_tree_key_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_key_edge" "', argument " "1"" of type '" "std::less< tree_key_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_key_edge" "', argument " "1"" of type '" "std::less< tree_key_t > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< tree_key_t > * >(argp1);
  result = (std::map< tree_key_t,edge_t > *)new std::map< tree_key_t,edge_t >((std::less< tree_key_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_iterator" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_tree_key_t_Sc_edge_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge___nonzero__" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (bool)std_map_Sl_tree_key_t_Sc_edge_t_Sg____nonzero__((std::map< tree_key_t,edge_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge___bool__" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (bool)std_map_Sl_tree_key_t_Sc_edge_t_Sg____bool__((std::map< tree_key_t,edge_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,edge_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge___len__" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = std_map_Sl_tree_key_t_Sc_edge_t_Sg____len__((std::map< tree_key_t,edge_t > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  std::map< tree_key_t,edge_t >::mapped_type *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge___getitem__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge___getitem__" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge___getitem__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge___getitem__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  try {
    result = (std::map< tree_key_t,edge_t >::mapped_type *) &std_map_Sl_tree_key_t_Sc_edge_t_Sg____getitem__(arg1,(tree_key_t const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_edge_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge___delitem__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge___delitem__" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge___delitem__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge___delitem__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  try {
    std_map_Sl_tree_key_t_Sc_edge_t_Sg____delitem__(arg1,(tree_key_t const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge_has_key",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_has_key" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge_has_key" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge_has_key" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  result = (bool)std_map_Sl_tree_key_t_Sc_edge_t_Sg__has_key((std::map< tree_key_t,edge_t > const *)arg1,(tree_key_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_keys" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (PyObject *)std_map_Sl_tree_key_t_Sc_edge_t_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_values" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (PyObject *)std_map_Sl_tree_key_t_Sc_edge_t_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_items" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (PyObject *)std_map_Sl_tree_key_t_Sc_edge_t_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge___contains__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge___contains__" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge___contains__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge___contains__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  result = (bool)std_map_Sl_tree_key_t_Sc_edge_t_Sg____contains__(arg1,(tree_key_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_key_iterator" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_tree_key_t_Sc_edge_t_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_value_iterator" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_tree_key_t_Sc_edge_t_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge___setitem__" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge___setitem__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge___setitem__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  std_map_Sl_tree_key_t_Sc_edge_t_Sg____setitem____SWIG_0(arg1,(tree_key_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  std::map< tree_key_t,edge_t >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge___setitem__" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge___setitem__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge___setitem__" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_edge_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "map_key_edge___setitem__" "', argument " "3"" of type '" "std::map< tree_key_t,edge_t >::mapped_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge___setitem__" "', argument " "3"" of type '" "std::map< tree_key_t,edge_t >::mapped_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::map< tree_key_t,edge_t >::mapped_type * >(argp3);
  try {
    std_map_Sl_tree_key_t_Sc_edge_t_Sg____setitem____SWIG_1(arg1,(tree_key_t const &)*arg2,(edge_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"map_key_edge___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_edge_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_map_key_edge___setitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_map_key_edge___setitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'map_key_edge___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< tree_key_t,edge_t >::__setitem__(std::map< tree_key_t,edge_t >::key_type const &)\n"
    "    std::map< tree_key_t,edge_t >::__setitem__(std::map< tree_key_t,edge_t >::key_type const &,std::map< tree_key_t,edge_t >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_key_edge_asdict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_asdict" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (PyObject *)std_map_Sl_tree_key_t_Sc_edge_t_Sg__asdict(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_key_edge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::map< tree_key_t,edge_t > *)new std::map< tree_key_t,edge_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_key_edge__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< tree_key_t,edge_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > > *ptr = (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_key_edge" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_key_edge" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< tree_key_t,edge_t > *)new std::map< tree_key_t,edge_t >((std::map< tree_key_t,edge_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_key_edge(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_map_key_edge",0,1,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_tree_key_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_map_key_edge__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_map_key_edge__SWIG_0(self, argc, argv);
    case 3:
      return _wrap_new_map_key_edge__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_map_key_edge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< tree_key_t,edge_t >::map(std::less< tree_key_t > const &)\n"
    "    std::map< tree_key_t,edge_t >::map()\n"
    "    std::map< tree_key_t,edge_t >::map(std::map< tree_key_t,edge_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_key_edge_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_empty" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (bool)((std::map< tree_key_t,edge_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,edge_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_size" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = ((std::map< tree_key_t,edge_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_clear" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_swap" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge_swap" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge_swap" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< tree_key_t const,edge_t > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_get_allocator" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = ((std::map< tree_key_t,edge_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< tree_key_t,edge_t >::allocator_type(static_cast< const std::map< tree_key_t,edge_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,edge_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_begin" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,edge_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,edge_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_end" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,edge_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,edge_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_rbegin" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,edge_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,edge_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_rend" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,edge_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::map< tree_key_t,edge_t >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_erase" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge_erase" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge_erase" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  result = (arg1)->erase((std::map< tree_key_t,edge_t >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  std::map< tree_key_t,edge_t >::size_type result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge_count",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_count" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge_count" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge_count" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  result = ((std::map< tree_key_t,edge_t > const *)arg1)->count((std::map< tree_key_t,edge_t >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_erase" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_edge_erase" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_edge_erase" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::iterator""'");
    }
  }
  std_map_Sl_tree_key_t_Sc_edge_t_Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::iterator arg2 ;
  std::map< tree_key_t,edge_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_erase" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_edge_erase" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_edge_erase" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_edge_erase" "', argument " "3"" of type '" "std::map< tree_key_t,edge_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_edge_erase" "', argument " "3"" of type '" "std::map< tree_key_t,edge_t >::iterator""'");
    }
  }
  std_map_Sl_tree_key_t_Sc_edge_t_Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"map_key_edge_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,edge_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_map_key_edge_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_map_key_edge_erase__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_map_key_edge_erase__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'map_key_edge_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< tree_key_t,edge_t >::erase(std::map< tree_key_t,edge_t >::key_type const &)\n"
    "    std::map< tree_key_t,edge_t >::erase(std::map< tree_key_t,edge_t >::iterator)\n"
    "    std::map< tree_key_t,edge_t >::erase(std::map< tree_key_t,edge_t >::iterator,std::map< tree_key_t,edge_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_key_edge_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  std::map< tree_key_t,edge_t >::iterator result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge_find",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_find" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge_find" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge_find" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  result = (arg1)->find((std::map< tree_key_t,edge_t >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,edge_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  std::map< tree_key_t,edge_t >::iterator result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge_lower_bound",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_lower_bound" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge_lower_bound" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge_lower_bound" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  result = (arg1)->lower_bound((std::map< tree_key_t,edge_t >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,edge_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_edge_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  std::map< tree_key_t,edge_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  std::map< tree_key_t,edge_t >::iterator result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_edge_upper_bound",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_edge_upper_bound" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_edge_upper_bound" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_edge_upper_bound" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t >::key_type * >(argp2);
  result = (arg1)->upper_bound((std::map< tree_key_t,edge_t >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,edge_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_map_key_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,edge_t > *arg1 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_key_edge" "', argument " "1"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *map_key_edge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *map_key_edge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_map_key_node__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< tree_key_t > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< tree_key_t,node_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_tree_key_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_key_node" "', argument " "1"" of type '" "std::less< tree_key_t > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_key_node" "', argument " "1"" of type '" "std::less< tree_key_t > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< tree_key_t > * >(argp1);
  result = (std::map< tree_key_t,node_t > *)new std::map< tree_key_t,node_t >((std::less< tree_key_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_iterator" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_tree_key_t_Sc_node_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node___nonzero__" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (bool)std_map_Sl_tree_key_t_Sc_node_t_Sg____nonzero__((std::map< tree_key_t,node_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node___bool__" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (bool)std_map_Sl_tree_key_t_Sc_node_t_Sg____bool__((std::map< tree_key_t,node_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,node_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node___len__" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = std_map_Sl_tree_key_t_Sc_node_t_Sg____len__((std::map< tree_key_t,node_t > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  std::map< tree_key_t,node_t >::mapped_type *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node___getitem__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node___getitem__" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node___getitem__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node___getitem__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  try {
    result = (std::map< tree_key_t,node_t >::mapped_type *) &std_map_Sl_tree_key_t_Sc_node_t_Sg____getitem__(arg1,(tree_key_t const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_node_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node___delitem__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node___delitem__" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node___delitem__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node___delitem__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  try {
    std_map_Sl_tree_key_t_Sc_node_t_Sg____delitem__(arg1,(tree_key_t const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node_has_key",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_has_key" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node_has_key" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node_has_key" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  result = (bool)std_map_Sl_tree_key_t_Sc_node_t_Sg__has_key((std::map< tree_key_t,node_t > const *)arg1,(tree_key_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_keys" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (PyObject *)std_map_Sl_tree_key_t_Sc_node_t_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_values" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (PyObject *)std_map_Sl_tree_key_t_Sc_node_t_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_items" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (PyObject *)std_map_Sl_tree_key_t_Sc_node_t_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node___contains__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node___contains__" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node___contains__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node___contains__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  result = (bool)std_map_Sl_tree_key_t_Sc_node_t_Sg____contains__(arg1,(tree_key_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_key_iterator" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_tree_key_t_Sc_node_t_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_value_iterator" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_tree_key_t_Sc_node_t_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node___setitem__" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node___setitem__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node___setitem__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  std_map_Sl_tree_key_t_Sc_node_t_Sg____setitem____SWIG_0(arg1,(tree_key_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  std::map< tree_key_t,node_t >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node___setitem__" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node___setitem__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node___setitem__" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_node_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "map_key_node___setitem__" "', argument " "3"" of type '" "std::map< tree_key_t,node_t >::mapped_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node___setitem__" "', argument " "3"" of type '" "std::map< tree_key_t,node_t >::mapped_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::map< tree_key_t,node_t >::mapped_type * >(argp3);
  try {
    std_map_Sl_tree_key_t_Sc_node_t_Sg____setitem____SWIG_1(arg1,(tree_key_t const &)*arg2,(node_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"map_key_node___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_node_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_map_key_node___setitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_map_key_node___setitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'map_key_node___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< tree_key_t,node_t >::__setitem__(std::map< tree_key_t,node_t >::key_type const &)\n"
    "    std::map< tree_key_t,node_t >::__setitem__(std::map< tree_key_t,node_t >::key_type const &,std::map< tree_key_t,node_t >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_key_node_asdict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_asdict" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (PyObject *)std_map_Sl_tree_key_t_Sc_node_t_Sg__asdict(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_key_node__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::map< tree_key_t,node_t > *)new std::map< tree_key_t,node_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_key_node__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< tree_key_t,node_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > > *ptr = (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_key_node" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_key_node" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< tree_key_t,node_t > *)new std::map< tree_key_t,node_t >((std::map< tree_key_t,node_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_key_node(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_map_key_node",0,1,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_tree_key_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_map_key_node__SWIG_1(self, argc, argv);
    case 2:
      return _wrap_new_map_key_node__SWIG_0(self, argc, argv);
    case 3:
      return _wrap_new_map_key_node__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_map_key_node'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< tree_key_t,node_t >::map(std::less< tree_key_t > const &)\n"
    "    std::map< tree_key_t,node_t >::map()\n"
    "    std::map< tree_key_t,node_t >::map(std::map< tree_key_t,node_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_key_node_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_empty" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (bool)((std::map< tree_key_t,node_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,node_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_size" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = ((std::map< tree_key_t,node_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_clear" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_swap" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node_swap" "', argument " "2"" of type '" "std::map< tree_key_t,node_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node_swap" "', argument " "2"" of type '" "std::map< tree_key_t,node_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< tree_key_t const,node_t > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_get_allocator" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = ((std::map< tree_key_t,node_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< tree_key_t,node_t >::allocator_type(static_cast< const std::map< tree_key_t,node_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,node_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_begin" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,node_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,node_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_end" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,node_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,node_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_rbegin" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,node_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,node_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_rend" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,node_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::map< tree_key_t,node_t >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_erase" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node_erase" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node_erase" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  result = (arg1)->erase((std::map< tree_key_t,node_t >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  std::map< tree_key_t,node_t >::size_type result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node_count",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_count" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node_count" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node_count" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  result = ((std::map< tree_key_t,node_t > const *)arg1)->count((std::map< tree_key_t,node_t >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_erase" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_node_erase" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_node_erase" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::iterator""'");
    }
  }
  std_map_Sl_tree_key_t_Sc_node_t_Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::iterator arg2 ;
  std::map< tree_key_t,node_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_erase" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_node_erase" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_node_erase" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_node_erase" "', argument " "3"" of type '" "std::map< tree_key_t,node_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_key_node_erase" "', argument " "3"" of type '" "std::map< tree_key_t,node_t >::iterator""'");
    }
  }
  std_map_Sl_tree_key_t_Sc_node_t_Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"map_key_node_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tree_key_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::map<tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< tree_key_t,node_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_map_key_node_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_map_key_node_erase__SWIG_1(self, argc, argv);
    case 3:
      return _wrap_map_key_node_erase__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'map_key_node_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< tree_key_t,node_t >::erase(std::map< tree_key_t,node_t >::key_type const &)\n"
    "    std::map< tree_key_t,node_t >::erase(std::map< tree_key_t,node_t >::iterator)\n"
    "    std::map< tree_key_t,node_t >::erase(std::map< tree_key_t,node_t >::iterator,std::map< tree_key_t,node_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_key_node_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  std::map< tree_key_t,node_t >::iterator result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node_find",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_find" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node_find" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node_find" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  result = (arg1)->find((std::map< tree_key_t,node_t >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,node_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  std::map< tree_key_t,node_t >::iterator result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node_lower_bound",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_lower_bound" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node_lower_bound" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node_lower_bound" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  result = (arg1)->lower_bound((std::map< tree_key_t,node_t >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,node_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_key_node_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  std::map< tree_key_t,node_t >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  std::map< tree_key_t,node_t >::iterator result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:map_key_node_upper_bound",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_key_node_upper_bound" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_key_node_upper_bound" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_key_node_upper_bound" "', argument " "2"" of type '" "std::map< tree_key_t,node_t >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t >::key_type * >(argp2);
  result = (arg1)->upper_bound((std::map< tree_key_t,node_t >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< tree_key_t,node_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_map_key_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< tree_key_t,node_t > *arg1 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_key_node" "', argument " "1"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *map_key_node_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *map_key_node_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_polymorphism_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_iterator" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_poly_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___nonzero__" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (bool)std_vector_Sl_poly_t_Sg____nonzero__((std::vector< poly_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___bool__" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (bool)std_vector_Sl_poly_t_Sg____bool__((std::vector< poly_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___len__" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = std_vector_Sl_poly_t_Sg____len__((std::vector< poly_t > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_pop" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  try {
    result = std_vector_Sl_poly_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< poly_t >::value_type(static_cast< const std::vector< poly_t >::value_type& >(result))), SWIGTYPE_p_poly_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::difference_type arg2 ;
  std::vector< poly_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< poly_t,std::allocator< poly_t > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_polymorphism___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___getslice__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism___getslice__" "', argument " "2"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_polymorphism___getslice__" "', argument " "3"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< poly_t >::difference_type >(val3);
  try {
    result = (std::vector< poly_t,std::allocator< poly_t > > *)std_vector_Sl_poly_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::difference_type arg2 ;
  std::vector< poly_t >::difference_type arg3 ;
  std::vector< poly_t,std::allocator< poly_t > > const &arg4_defvalue = std::vector< poly_t,std::allocator< poly_t > >() ;
  std::vector< poly_t,std::allocator< poly_t > > *arg4 = (std::vector< poly_t,std::allocator< poly_t > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:vector_polymorphism___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___setslice__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism___setslice__" "', argument " "2"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_polymorphism___setslice__" "', argument " "3"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< poly_t >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<poly_t,std::allocator< poly_t > > *ptr = (std::vector<poly_t,std::allocator< poly_t > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_polymorphism___setslice__" "', argument " "4"" of type '" "std::vector< poly_t,std::allocator< poly_t > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism___setslice__" "', argument " "4"" of type '" "std::vector< poly_t,std::allocator< poly_t > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  try {
    std_vector_Sl_poly_t_Sg____setslice__(arg1,arg2,arg3,(std::vector< poly_t,std::allocator< poly_t > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::difference_type arg2 ;
  std::vector< poly_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_polymorphism___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___delslice__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism___delslice__" "', argument " "2"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_polymorphism___delslice__" "', argument " "3"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< poly_t >::difference_type >(val3);
  try {
    std_vector_Sl_poly_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___delitem__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism___delitem__" "', argument " "2"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::difference_type >(val2);
  try {
    std_vector_Sl_poly_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< poly_t,std::allocator< poly_t > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___getitem__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< poly_t,std::allocator< poly_t > > *)std_vector_Sl_poly_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< poly_t,std::allocator< poly_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___setitem__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<poly_t,std::allocator< poly_t > > *ptr = (std::vector<poly_t,std::allocator< poly_t > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_polymorphism___setitem__" "', argument " "3"" of type '" "std::vector< poly_t,std::allocator< poly_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism___setitem__" "', argument " "3"" of type '" "std::vector< poly_t,std::allocator< poly_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_poly_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< poly_t,std::allocator< poly_t > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___setitem__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_poly_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___delitem__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_poly_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_polymorphism___delitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_polymorphism___delitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_vector_polymorphism___delitem____SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_polymorphism___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< poly_t >::__delitem__(std::vector< poly_t >::difference_type)\n"
    "    std::vector< poly_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< poly_t >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___getitem__" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism___getitem__" "', argument " "2"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::difference_type >(val2);
  try {
    result = (std::vector< poly_t >::value_type *) &std_vector_Sl_poly_t_Sg____getitem____SWIG_1((std::vector< poly_t > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_poly_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_polymorphism___getitem__",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_polymorphism___getitem____SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_polymorphism___getitem____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_polymorphism___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< poly_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< poly_t >::__getitem__(std::vector< poly_t >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::difference_type arg2 ;
  std::vector< poly_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism___setitem__" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism___setitem__" "', argument " "2"" of type '" "std::vector< poly_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_poly_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_polymorphism___setitem__" "', argument " "3"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism___setitem__" "', argument " "3"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< poly_t >::value_type * >(argp3);
  try {
    std_vector_Sl_poly_t_Sg____setitem____SWIG_2(arg1,arg2,(poly_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_polymorphism___setitem__",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = PySlice_Check(argv[1]);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = swig::asptr(argv[2], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_poly_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_polymorphism___setitem____SWIG_1(self, argc, argv);
    case 2:
      return _wrap_vector_polymorphism___setitem____SWIG_0(self, argc, argv);
    case 3:
      return _wrap_vector_polymorphism___setitem____SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_polymorphism___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< poly_t >::__setitem__(PySliceObject *,std::vector< poly_t,std::allocator< poly_t > > const &)\n"
    "    std::vector< poly_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< poly_t >::__setitem__(std::vector< poly_t >::difference_type,std::vector< poly_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_polymorphism_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_append" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_poly_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_polymorphism_append" "', argument " "2"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism_append" "', argument " "2"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< poly_t >::value_type * >(argp2);
  std_vector_Sl_poly_t_Sg__append(arg1,(poly_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_polymorphism__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< poly_t > *)new std::vector< poly_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_polymorphism__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< poly_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<poly_t,std::allocator< poly_t > > *ptr = (std::vector<poly_t,std::allocator< poly_t > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_polymorphism" "', argument " "1"" of type '" "std::vector< poly_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_polymorphism" "', argument " "1"" of type '" "std::vector< poly_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< poly_t > *)new std::vector< poly_t >((std::vector< poly_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_empty" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (bool)((std::vector< poly_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_size" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = ((std::vector< poly_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_clear" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_polymorphism_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_swap" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_polymorphism_swap" "', argument " "2"" of type '" "std::vector< poly_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism_swap" "', argument " "2"" of type '" "std::vector< poly_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< poly_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< poly_t > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_get_allocator" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = ((std::vector< poly_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< poly_t >::allocator_type(static_cast< const std::vector< poly_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_poly_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_begin" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< poly_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_end" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< poly_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_rbegin" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< poly_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_rend" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< poly_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_polymorphism__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< poly_t > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_polymorphism" "', argument " "1"" of type '" "std::vector< poly_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< poly_t >::size_type >(val1);
  result = (std::vector< poly_t > *)new std::vector< poly_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_pop_back" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_resize" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism_resize" "', argument " "2"" of type '" "std::vector< poly_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< poly_t >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_erase" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_erase" "', argument " "2"" of type '" "std::vector< poly_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_erase" "', argument " "2"" of type '" "std::vector< poly_t >::iterator""'");
    }
  }
  result = std_vector_Sl_poly_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< poly_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::iterator arg2 ;
  std::vector< poly_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< poly_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_erase" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_erase" "', argument " "2"" of type '" "std::vector< poly_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_erase" "', argument " "2"" of type '" "std::vector< poly_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_erase" "', argument " "3"" of type '" "std::vector< poly_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_erase" "', argument " "3"" of type '" "std::vector< poly_t >::iterator""'");
    }
  }
  result = std_vector_Sl_poly_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< poly_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_polymorphism_erase",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_polymorphism_erase__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_polymorphism_erase__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_polymorphism_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< poly_t >::erase(std::vector< poly_t >::iterator)\n"
    "    std::vector< poly_t >::erase(std::vector< poly_t >::iterator,std::vector< poly_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_polymorphism__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t >::size_type arg1 ;
  std::vector< poly_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< poly_t > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_polymorphism" "', argument " "1"" of type '" "std::vector< poly_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< poly_t >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_poly_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_polymorphism" "', argument " "2"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_polymorphism" "', argument " "2"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< poly_t >::value_type * >(argp2);
  result = (std::vector< poly_t > *)new std::vector< poly_t >(arg1,(std::vector< poly_t >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_polymorphism(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_vector_polymorphism",0,2,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (argc == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t(argv[0], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_poly_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_new_vector_polymorphism__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_new_vector_polymorphism__SWIG_2(self, argc, argv);
    case 3:
      return _wrap_new_vector_polymorphism__SWIG_1(self, argc, argv);
    case 4:
      return _wrap_new_vector_polymorphism__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_polymorphism'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< poly_t >::vector()\n"
    "    std::vector< poly_t >::vector(std::vector< poly_t > const &)\n"
    "    std::vector< poly_t >::vector(std::vector< poly_t >::size_type)\n"
    "    std::vector< poly_t >::vector(std::vector< poly_t >::size_type,std::vector< poly_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_polymorphism_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_push_back" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_poly_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_polymorphism_push_back" "', argument " "2"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism_push_back" "', argument " "2"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< poly_t >::value_type * >(argp2);
  (arg1)->push_back((std::vector< poly_t >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_front" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (std::vector< poly_t >::value_type *) &((std::vector< poly_t > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_poly_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_back" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = (std::vector< poly_t >::value_type *) &((std::vector< poly_t > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_poly_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::size_type arg2 ;
  std::vector< poly_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vector_polymorphism_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_assign" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism_assign" "', argument " "2"" of type '" "std::vector< poly_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_poly_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_polymorphism_assign" "', argument " "3"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism_assign" "', argument " "3"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< poly_t >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< poly_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::size_type arg2 ;
  std::vector< poly_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_resize" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism_resize" "', argument " "2"" of type '" "std::vector< poly_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_poly_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_polymorphism_resize" "', argument " "3"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism_resize" "', argument " "3"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< poly_t >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< poly_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_polymorphism_resize",0,3,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_poly_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_polymorphism_resize__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_polymorphism_resize__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_polymorphism_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< poly_t >::resize(std::vector< poly_t >::size_type)\n"
    "    std::vector< poly_t >::resize(std::vector< poly_t >::size_type,std::vector< poly_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::iterator arg2 ;
  std::vector< poly_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< poly_t >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_insert" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_insert" "', argument " "2"" of type '" "std::vector< poly_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_insert" "', argument " "2"" of type '" "std::vector< poly_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_poly_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_polymorphism_insert" "', argument " "3"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism_insert" "', argument " "3"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< poly_t >::value_type * >(argp3);
  result = std_vector_Sl_poly_t_Sg__insert__SWIG_0(arg1,arg2,(poly_t const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< poly_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::iterator arg2 ;
  std::vector< poly_t >::size_type arg3 ;
  std::vector< poly_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_insert" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_insert" "', argument " "2"" of type '" "std::vector< poly_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_polymorphism_insert" "', argument " "2"" of type '" "std::vector< poly_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_polymorphism_insert" "', argument " "3"" of type '" "std::vector< poly_t >::size_type""'");
  } 
  arg3 = static_cast< std::vector< poly_t >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_poly_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_polymorphism_insert" "', argument " "4"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_polymorphism_insert" "', argument " "4"" of type '" "std::vector< poly_t >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< poly_t >::value_type * >(argp4);
  std_vector_Sl_poly_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(poly_t const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"vector_polymorphism_insert",0,4,argv))) SWIG_fail;
  --argc;
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (argc == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_poly_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (argc == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = swig::asptr(argv[0], (std::vector<poly_t,std::allocator< poly_t > >**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< poly_t >::iterator > *>(iter) != 0));
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_poly_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      return _wrap_vector_polymorphism_insert__SWIG_0(self, argc, argv);
    case 2:
      return _wrap_vector_polymorphism_insert__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_polymorphism_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< poly_t >::insert(std::vector< poly_t >::iterator,std::vector< poly_t >::value_type const &)\n"
    "    std::vector< poly_t >::insert(std::vector< poly_t >::iterator,std::vector< poly_t >::size_type,std::vector< poly_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  std::vector< poly_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vector_polymorphism_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_reserve" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_polymorphism_reserve" "', argument " "2"" of type '" "std::vector< poly_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< poly_t >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_polymorphism_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_polymorphism_capacity" "', argument " "1"" of type '" "std::vector< poly_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  result = ((std::vector< poly_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_polymorphism(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< poly_t > *arg1 = (std::vector< poly_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_polymorphism" "', argument " "1"" of type '" "std::vector< poly_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< poly_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_polymorphism_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_polymorphism_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_index_value_pair_index_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  index_value_pair_t *arg1 = (index_value_pair_t *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"index_value_pair_index_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_index_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "index_value_pair_index_set" "', argument " "1"" of type '" "index_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< index_value_pair_t * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "index_value_pair_index_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->index = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_index_value_pair_index_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  index_value_pair_t *arg1 = (index_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_index_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "index_value_pair_index_get" "', argument " "1"" of type '" "index_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< index_value_pair_t * >(argp1);
  result =  ((arg1)->index);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_index_value_pair_val_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  index_value_pair_t *arg1 = (index_value_pair_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"index_value_pair_val_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_index_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "index_value_pair_val_set" "', argument " "1"" of type '" "index_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< index_value_pair_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "index_value_pair_val_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->val = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_index_value_pair_val_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  index_value_pair_t *arg1 = (index_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_index_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "index_value_pair_val_get" "', argument " "1"" of type '" "index_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< index_value_pair_t * >(argp1);
  result = (double) ((arg1)->val);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_index_value_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  double arg2 = (double) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "index_in",(char *) "val_in", NULL 
  };
  index_value_pair_t *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_index_value_pair",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_index_value_pair" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_index_value_pair" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  result = (index_value_pair_t *)new index_value_pair_t(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_index_value_pair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_index_value_pair___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  index_value_pair_t *arg1 = (index_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_index_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "index_value_pair___str__" "', argument " "1"" of type '" "index_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< index_value_pair_t * >(argp1);
  result = (char *)index_value_pair_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_index_value_pair___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  index_value_pair_t *arg1 = (index_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_index_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "index_value_pair___repr__" "', argument " "1"" of type '" "index_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< index_value_pair_t * >(argp1);
  result = (char *)index_value_pair_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_index_value_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  index_value_pair_t *arg1 = (index_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_index_value_pair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_index_value_pair" "', argument " "1"" of type '" "index_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< index_value_pair_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *index_value_pair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_index_value_pair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *index_value_pair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_genotype_value_pair_genotype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  genotype_value_pair_t *arg1 = (genotype_value_pair_t *) 0 ;
  boost::dynamic_bitset< > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::dynamic_bitset< > temp2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"genotype_value_pair_genotype_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_genotype_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "genotype_value_pair_genotype_set" "', argument " "1"" of type '" "genotype_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< genotype_value_pair_t * >(argp1);
  {
    /* Ensure input is a Python sequence */
    PyObject *tmplist = PySequence_Fast(swig_obj[1], "I expected a sequence");
    unsigned long L = PySequence_Length(tmplist);
    
    /* Create boost::dynamic_bitset from Python list */
    temp2.resize(L);
    long tmplong;
    for(size_t i=0; i < L; i++) {
      tmplong = PyInt_AsLong(PySequence_Fast_GET_ITEM(tmplist, i));
      if(tmplong < 0) {
        PyErr_SetString(PyExc_ValueError, "Expecting an array of bool.");
        SWIG_fail;
      }
      temp2[i] = (bool)tmplong; 
    }      
    arg2 = temp2;
  }
  if (arg1) (arg1)->genotype = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_genotype_value_pair_genotype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  genotype_value_pair_t *arg1 = (genotype_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  boost::dynamic_bitset< > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_genotype_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "genotype_value_pair_genotype_get" "', argument " "1"" of type '" "genotype_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< genotype_value_pair_t * >(argp1);
  result =  ((arg1)->genotype);
  {
    unsigned long L = (&result)->size();
    npy_intp dims[1] = {
      (npy_intp) L
    };
    PyObject *array = PyArray_ZEROS(1, dims, NPY_BOOL, 0);
    if (!array) SWIG_fail;
    
    /* no checks on memory alignments, since we create a new array */
    bool *ptr = (bool *)PyArray_DATA(array);
    for(int i=0; i < L; i++, ptr++)
    if((&result)->test(i))
    *ptr = true;
    resultobj = array;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_genotype_value_pair_val_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  genotype_value_pair_t *arg1 = (genotype_value_pair_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"genotype_value_pair_val_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_genotype_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "genotype_value_pair_val_set" "', argument " "1"" of type '" "genotype_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< genotype_value_pair_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "genotype_value_pair_val_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->val = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_genotype_value_pair_val_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  genotype_value_pair_t *arg1 = (genotype_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_genotype_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "genotype_value_pair_val_get" "', argument " "1"" of type '" "genotype_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< genotype_value_pair_t * >(argp1);
  result = (double) ((arg1)->val);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_genotype_value_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::dynamic_bitset< > arg1 = (boost::dynamic_bitset< >) boost::dynamic_bitset< >(0) ;
  double arg2 = (double) 0 ;
  boost::dynamic_bitset< > temp1 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "genotype_in",(char *) "val_in", NULL 
  };
  genotype_value_pair_t *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_genotype_value_pair",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    {
      /* Ensure input is a Python sequence */
      PyObject *tmplist = PySequence_Fast(obj0, "I expected a sequence");
      unsigned long L = PySequence_Length(tmplist);
      
      /* Create boost::dynamic_bitset from Python list */
      temp1.resize(L);
      long tmplong;
      for(size_t i=0; i < L; i++) {
        tmplong = PyInt_AsLong(PySequence_Fast_GET_ITEM(tmplist, i));
        if(tmplong < 0) {
          PyErr_SetString(PyExc_ValueError, "Expecting an array of bool.");
          SWIG_fail;
        }
        temp1[i] = (bool)tmplong; 
      }      
      arg1 = temp1;
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_genotype_value_pair" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  result = (genotype_value_pair_t *)new genotype_value_pair_t(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_genotype_value_pair_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_genotype_value_pair___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  genotype_value_pair_t *arg1 = (genotype_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_genotype_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "genotype_value_pair___str__" "', argument " "1"" of type '" "genotype_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< genotype_value_pair_t * >(argp1);
  result = (char *)genotype_value_pair_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_genotype_value_pair___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  genotype_value_pair_t *arg1 = (genotype_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_genotype_value_pair_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "genotype_value_pair___repr__" "', argument " "1"" of type '" "genotype_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< genotype_value_pair_t * >(argp1);
  result = (char *)genotype_value_pair_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_genotype_value_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  genotype_value_pair_t *arg1 = (genotype_value_pair_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_genotype_value_pair_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_genotype_value_pair" "', argument " "1"" of type '" "genotype_value_pair_t *""'"); 
  }
  arg1 = reinterpret_cast< genotype_value_pair_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *genotype_value_pair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_genotype_value_pair_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *genotype_value_pair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_stat_mean_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  stat_t *arg1 = (stat_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"stat_mean_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stat_mean_set" "', argument " "1"" of type '" "stat_t *""'"); 
  }
  arg1 = reinterpret_cast< stat_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stat_mean_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->mean = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stat_mean_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  stat_t *arg1 = (stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stat_mean_get" "', argument " "1"" of type '" "stat_t *""'"); 
  }
  arg1 = reinterpret_cast< stat_t * >(argp1);
  result = (double) ((arg1)->mean);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stat_variance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  stat_t *arg1 = (stat_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"stat_variance_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stat_variance_set" "', argument " "1"" of type '" "stat_t *""'"); 
  }
  arg1 = reinterpret_cast< stat_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stat_variance_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->variance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stat_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  stat_t *arg1 = (stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stat_variance_get" "', argument " "1"" of type '" "stat_t *""'"); 
  }
  arg1 = reinterpret_cast< stat_t * >(argp1);
  result = (double) ((arg1)->variance);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_stat(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 = (double) 0 ;
  double arg2 = (double) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "mean_in",(char *) "variance_in", NULL 
  };
  stat_t *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_stat",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_double(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_stat" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_stat" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  result = (stat_t *)new stat_t(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stat_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stat___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  stat_t *arg1 = (stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stat___str__" "', argument " "1"" of type '" "stat_t *""'"); 
  }
  arg1 = reinterpret_cast< stat_t * >(argp1);
  result = (char *)stat_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stat___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  stat_t *arg1 = (stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stat___repr__" "', argument " "1"" of type '" "stat_t *""'"); 
  }
  arg1 = reinterpret_cast< stat_t * >(argp1);
  result = (char *)stat_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_stat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  stat_t *arg1 = (stat_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stat_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_stat" "', argument " "1"" of type '" "stat_t *""'"); 
  }
  arg1 = reinterpret_cast< stat_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *stat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stat_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *stat_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_haploid_lowd(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 1 ;
  int arg2 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "L",(char *) "rng_seed", NULL 
  };
  haploid_lowd *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_haploid_lowd",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_haploid_lowd" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_haploid_lowd" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try {
      result = (haploid_lowd *)new haploid_lowd(arg1,arg2);
    } catch (int err) {
      PyErr_SetString(PyExc_ValueError,"Construction impossible. Please check input args.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_haploid_lowd, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_haploid_lowd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_haploid_lowd" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_carrying_capacity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_lowd_carrying_capacity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_carrying_capacity_set" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_carrying_capacity_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->carrying_capacity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_carrying_capacity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_carrying_capacity_get" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (double) ((arg1)->carrying_capacity);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_outcrossing_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_lowd_outcrossing_rate_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_outcrossing_rate_set" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_outcrossing_rate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->outcrossing_rate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_outcrossing_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_outcrossing_rate_get" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (double) ((arg1)->outcrossing_rate);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_circular_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_lowd_circular_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_circular_set" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_circular_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->circular = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_circular_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_circular_get" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (bool) ((arg1)->circular);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd__get_mutation_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus",(char *) "direction", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd__get_mutation_rate",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd__get_mutation_rate" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd__get_mutation_rate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_lowd__get_mutation_rate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_mutation_rate(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd__get_recombination_model(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd__get_recombination_model" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (int)(arg1)->get_recombination_model();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_recombination_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd_get_recombination_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_recombination_rate" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_recombination_rate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_recombination_rate(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_set_allele_frequencies(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequencies",(char *) "N", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd_set_allele_frequencies",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_set_allele_frequencies" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_lowd_set_allele_frequencies" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    result = (int)(arg1)->set_allele_frequencies(arg2,arg3);
    if (result) {
      PyErr_SetString(PyExc_RuntimeError,"Error in the C++ function.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_set_wildtype(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "N", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd_set_wildtype",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_set_wildtype" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_set_wildtype" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    result = (int)(arg1)->set_wildtype(arg2);
    if (result) {
      PyErr_SetString(PyExc_RuntimeError,"Error in the C++ function.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd__set_recombination_model(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rec_model", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd__set_recombination_model",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd__set_recombination_model" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd__set_recombination_model" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    result = (int)(arg1)->set_recombination_model(arg2);
    if (result == HG_BADARG) {
      PyErr_SetString(PyExc_ValueError,"Recombination model nor recognized.");
      SWIG_fail;
    } else if (result == HG_MEMERR) {
      PyErr_SetString(PyExc_ValueError,"Unable to allocate/release memory for the recombination patterns.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd__set_recombination_rates(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 = (int) -1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rec_rates",(char *) "rec_model", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:haploid_lowd__set_recombination_rates",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd__set_recombination_rates" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  {
    /* Ensure input is a Python sequence */
    PyObject *tmplist = PySequence_Fast(obj1, "I expected a sequence");
    unsigned long L = PySequence_Length(tmplist);
    
    /* Get circular and L properties from the class (we are in the Python world here) */
    bool circular = (bool)PyInt_AsLong(PyObject_GetAttrString(obj0, "circular"));
    unsigned long Lint = PyInt_AsLong(PyObject_GetAttrString(obj0, "L"));
    
    /* Check lengths */
    if((!(circular)) && (L != Lint - 1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting an array of length L-1.");
      SWIG_fail;
    }        
    if((circular) && (L != Lint)) {
      PyErr_SetString(PyExc_ValueError, "Expecting an array of length L.");
      SWIG_fail;
    } 
    
    /* Create C array from Python list */
    arg2 = new double[L];
    double tmpdouble;
    for(size_t i=0; i < L; i++) {
      tmpdouble = (double)PyFloat_AsDouble(PySequence_Fast_GET_ITEM(tmplist, i));
      if (tmpdouble < 0) {
        PyErr_SetString(PyExc_ValueError,"Expecting a sequence of positive floats");
        SWIG_fail;
      }
      arg2[i] = tmpdouble;
    }
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_lowd__set_recombination_rates" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (int)(arg1)->set_recombination_rates(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2) delete[] arg2;
  }
  return resultobj;
fail:
  {
    if(arg2) delete[] arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_evolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gen", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_lowd_evolve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_evolve" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_evolve" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    result = (int)(arg1)->evolve(arg2);
    if (result) {
      PyErr_SetString(PyExc_RuntimeError,"Error in the C++ function.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_evolve_norec(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gen", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_lowd_evolve_norec",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_evolve_norec" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_evolve_norec" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    result = (int)(arg1)->evolve_norec(arg2);
    if (result) {
      PyErr_SetString(PyExc_RuntimeError,"Error in the C++ function.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_evolve_deterministic(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gen", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_lowd_evolve_deterministic",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_evolve_deterministic" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_evolve_deterministic" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    result = (int)(arg1)->evolve_deterministic(arg2);
    if (result) {
      PyErr_SetString(PyExc_RuntimeError,"Error in the C++ function.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_genotype_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "genotype", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd_get_genotype_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_genotype_frequency" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_genotype_frequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_genotype_frequency(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_allele_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd_get_allele_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_allele_frequency" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_allele_frequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_allele_frequency(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_pair_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus1",(char *) "locus2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd_get_pair_frequency",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_pair_frequency" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_pair_frequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_lowd_get_pair_frequency" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_pair_frequency(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_chi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd_get_chi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_chi" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_chi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_chi(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_chi2(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus1",(char *) "locus2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd_get_chi2",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_chi2" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_chi2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_lowd_get_chi2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_chi2(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_LD(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus1",(char *) "locus2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd_get_LD",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_LD" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_LD" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_lowd_get_LD" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_LD(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_moment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus1",(char *) "locus2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd_get_moment",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_moment" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_moment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_lowd_get_moment" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_moment(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_genotype_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_genotype_entropy" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (double)(arg1)->genotype_entropy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_allele_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_allele_entropy" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (double)(arg1)->allele_entropy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_fitness(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "genotype", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd_get_fitness",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_fitness" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_get_fitness" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_fitness(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_fitness_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stat_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_fitness_statistics" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (arg1)->get_fitness_statistics();
  resultobj = SWIG_NewPointerObj((new stat_t(static_cast< const stat_t& >(result))), SWIGTYPE_p_stat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd___str__" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (char *)haploid_lowd___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd___repr__" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (char *)haploid_lowd___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_L_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_L_get" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (int)haploid_lowd_L_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_number_of_loci_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_number_of_loci_get" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (int)haploid_lowd_number_of_loci_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_N_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_N_get" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (int)haploid_lowd_N_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_population_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_population_size_get" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (int)haploid_lowd_population_size_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_generation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_lowd_generation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_generation_set" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_lowd_generation_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  haploid_lowd_generation_set(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_generation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_generation_get" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  result = (int)haploid_lowd_generation_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd__set_genotypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "len1",(char *) "len2", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd__set_genotypes",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd__set_genotypes" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  {
    npy_intp size[1] = {
      -1
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int) array_size(array2,0);
    arg3 = (double*) array_data(array2);
  }
  {
    npy_intp size[1] = {
      -1
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int) array_size(array4,0);
    arg5 = (double*) array_data(array4);
  }
  result = (int)haploid_lowd__set_genotypes(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd__set_mutation_rates(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "IN_ARRAY2", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd__set_mutation_rates",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd__set_mutation_rates" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 2) ||
      !require_size(array2, size, 2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
    arg4 = (int) array_size(array2,1);
  }
  result = (int)haploid_lowd__set_mutation_rates(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_get_fitnesses(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "DIM1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd_get_fitnesses",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_get_fitnesses" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg2 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg2;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg3 = (double*) array_data(array2);
  }
  haploid_lowd_get_fitnesses(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd__set_fitness_func(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "len1",(char *) "len2", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd__set_fitness_func",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd__set_fitness_func" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  {
    npy_intp size[1] = {
      -1
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int) array_size(array2,0);
    arg3 = (double*) array_data(array2);
  }
  {
    npy_intp size[1] = {
      -1
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int) array_size(array4,0);
    arg5 = (double*) array_data(array4);
  }
  result = (int)haploid_lowd__set_fitness_func(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd__set_fitness_coeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "len1",(char *) "len2", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_lowd__set_fitness_coeff",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd__set_fitness_coeff" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  {
    npy_intp size[1] = {
      -1
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int) array_size(array2,0);
    arg3 = (double*) array_data(array2);
  }
  {
    npy_intp size[1] = {
      -1
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int) array_size(array4,0);
    arg5 = (double*) array_data(array4);
  }
  result = (int)haploid_lowd__set_fitness_coeff(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_lowd_set_fitness_additive(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_lowd *arg1 = (haploid_lowd *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "DIM1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_lowd_set_fitness_additive",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_lowd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_lowd_set_fitness_additive" "', argument " "1"" of type '" "haploid_lowd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_lowd * >(argp1);
  {
    npy_intp size[1] = {
      -1
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int) array_size(array2,0);
    arg3 = (double*) array_data(array2);
  }
  {
    haploid_lowd_set_fitness_additive(arg1,arg2,arg3);
    if (PyErr_Occurred()) SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *haploid_lowd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_haploid_lowd, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *haploid_lowd_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_clone_genotype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  boost::dynamic_bitset< > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::dynamic_bitset< > temp2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"clone_genotype_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone_genotype_set" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  {
    /* Ensure input is a Python sequence */
    PyObject *tmplist = PySequence_Fast(swig_obj[1], "I expected a sequence");
    unsigned long L = PySequence_Length(tmplist);
    
    /* Create boost::dynamic_bitset from Python list */
    temp2.resize(L);
    long tmplong;
    for(size_t i=0; i < L; i++) {
      tmplong = PyInt_AsLong(PySequence_Fast_GET_ITEM(tmplist, i));
      if(tmplong < 0) {
        PyErr_SetString(PyExc_ValueError, "Expecting an array of bool.");
        SWIG_fail;
      }
      temp2[i] = (bool)tmplong; 
    }      
    arg2 = temp2;
  }
  if (arg1) (arg1)->genotype = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone_genotype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  boost::dynamic_bitset< > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone_genotype_get" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  result =  ((arg1)->genotype);
  {
    unsigned long L = (&result)->size();
    npy_intp dims[1] = {
      (npy_intp) L
    };
    PyObject *array = PyArray_ZEROS(1, dims, NPY_BOOL, 0);
    if (!array) SWIG_fail;
    
    /* no checks on memory alignments, since we create a new array */
    bool *ptr = (bool *)PyArray_DATA(array);
    for(int i=0; i < L; i++, ptr++)
    if((&result)->test(i))
    *ptr = true;
    resultobj = array;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone_fitness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"clone_fitness_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone_fitness_set" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clone_fitness_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fitness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone_fitness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone_fitness_get" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  result = (double) ((arg1)->fitness);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone_clone_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"clone_clone_size_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone_clone_size_set" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clone_clone_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->clone_size = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone_clone_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone_clone_size_get" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  result = (int) ((arg1)->clone_size);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "n_traits", NULL 
  };
  clone_t *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_clone",kwnames,&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_clone" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  result = (clone_t *)new clone_t(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_clone_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  clone_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:clone___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone___eq__" "', argument " "1"" of type '" "clone_t const *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_clone_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "clone___eq__" "', argument " "2"" of type '" "clone_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clone___eq__" "', argument " "2"" of type '" "clone_t const &""'"); 
  }
  arg2 = reinterpret_cast< clone_t * >(argp2);
  result = (bool)((clone_t const *)arg1)->operator ==((clone_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  clone_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:clone___ne__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone___ne__" "', argument " "1"" of type '" "clone_t const *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_clone_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "clone___ne__" "', argument " "2"" of type '" "clone_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clone___ne__" "', argument " "2"" of type '" "clone_t const &""'"); 
  }
  arg2 = reinterpret_cast< clone_t * >(argp2);
  result = (bool)((clone_t const *)arg1)->operator !=((clone_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  clone_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:clone___lt__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone___lt__" "', argument " "1"" of type '" "clone_t const *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_clone_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "clone___lt__" "', argument " "2"" of type '" "clone_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clone___lt__" "', argument " "2"" of type '" "clone_t const &""'"); 
  }
  arg2 = reinterpret_cast< clone_t * >(argp2);
  result = (bool)((clone_t const *)arg1)->operator <((clone_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  clone_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:clone___gt__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone___gt__" "', argument " "1"" of type '" "clone_t const *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_clone_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "clone___gt__" "', argument " "2"" of type '" "clone_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clone___gt__" "', argument " "2"" of type '" "clone_t const &""'"); 
  }
  arg2 = reinterpret_cast< clone_t * >(argp2);
  result = (bool)((clone_t const *)arg1)->operator >((clone_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone___str__" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  result = (char *)clone_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone___repr__" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  result = (char *)clone_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone_number_of_traits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone_number_of_traits_get" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  result = (int)clone_t_number_of_traits_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clone__get_trait(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "DIM1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:clone__get_trait",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_clone_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clone__get_trait" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg2 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg2;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg3 = (double*) array_data(array2);
  }
  clone_t__get_trait(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  clone_t *arg1 = (clone_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_clone_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_clone" "', argument " "1"" of type '" "clone_t *""'"); 
  }
  arg1 = reinterpret_cast< clone_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *clone_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_clone_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *clone_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_tree_key_index_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_key_index_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key_index_set" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_key_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->index = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key_index_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key_index_get" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  result = (int) ((arg1)->index);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key_age_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_key_age_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key_age_set" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_key_age_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->age = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key_age_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key_age_get" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  result = (int) ((arg1)->age);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  tree_key_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_key___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key___eq__" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_key___eq__" "', argument " "2"" of type '" "tree_key_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tree_key___eq__" "', argument " "2"" of type '" "tree_key_t const &""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  result = (bool)(arg1)->operator ==((tree_key_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  tree_key_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_key___ne__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key___ne__" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_key___ne__" "', argument " "2"" of type '" "tree_key_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tree_key___ne__" "', argument " "2"" of type '" "tree_key_t const &""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  result = (bool)(arg1)->operator !=((tree_key_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  tree_key_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_key___lt__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key___lt__" "', argument " "1"" of type '" "tree_key_t const *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_key___lt__" "', argument " "2"" of type '" "tree_key_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tree_key___lt__" "', argument " "2"" of type '" "tree_key_t const &""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  result = (bool)((tree_key_t const *)arg1)->operator <((tree_key_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  tree_key_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_key___gt__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key___gt__" "', argument " "1"" of type '" "tree_key_t const *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_key___gt__" "', argument " "2"" of type '" "tree_key_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tree_key___gt__" "', argument " "2"" of type '" "tree_key_t const &""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  result = (bool)((tree_key_t const *)arg1)->operator >((tree_key_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tree_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "index",(char *) "age", NULL 
  };
  tree_key_t *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_tree_key",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_tree_key" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_tree_key" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  result = (tree_key_t *)new tree_key_t(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key___str__" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  result = (char *)tree_key_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_key___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_key___repr__" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  result = (char *)tree_key_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tree_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tree_key_t *arg1 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tree_key_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tree_key" "', argument " "1"" of type '" "tree_key_t *""'"); 
  }
  arg1 = reinterpret_cast< tree_key_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tree_key_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tree_key_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tree_key_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_tree_step_pos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_step_pos_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step_pos_set" "', argument " "1"" of type '" "step_t *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_step_pos_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->pos = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_step_pos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step_pos_get" "', argument " "1"" of type '" "step_t *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  result = (int) ((arg1)->pos);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_step_step_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_step_step_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step_step_set" "', argument " "1"" of type '" "step_t *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_step_step_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->step = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_step_step_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step_step_get" "', argument " "1"" of type '" "step_t *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  result = (int) ((arg1)->step);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_step___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  step_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_step___lt__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step___lt__" "', argument " "1"" of type '" "step_t const *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_step___lt__" "', argument " "2"" of type '" "step_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tree_step___lt__" "', argument " "2"" of type '" "step_t const &""'"); 
  }
  arg2 = reinterpret_cast< step_t * >(argp2);
  result = (bool)((step_t const *)arg1)->operator <((step_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_step___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  step_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_step___gt__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step___gt__" "', argument " "1"" of type '" "step_t const *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_step___gt__" "', argument " "2"" of type '" "step_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tree_step___gt__" "', argument " "2"" of type '" "step_t const &""'"); 
  }
  arg2 = reinterpret_cast< step_t * >(argp2);
  result = (bool)((step_t const *)arg1)->operator >((step_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_step___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  step_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "other", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_step___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step___eq__" "', argument " "1"" of type '" "step_t const *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_step_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_step___eq__" "', argument " "2"" of type '" "step_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tree_step___eq__" "', argument " "2"" of type '" "step_t const &""'"); 
  }
  arg2 = reinterpret_cast< step_t * >(argp2);
  result = (bool)((step_t const *)arg1)->operator ==((step_t const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tree_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "pos",(char *) "step", NULL 
  };
  step_t *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_tree_step",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_tree_step" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_tree_step" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  result = (step_t *)new step_t(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_step_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_step___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step___str__" "', argument " "1"" of type '" "step_t *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  result = (char *)step_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_step___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_step_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_step___repr__" "', argument " "1"" of type '" "step_t *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  result = (char *)step_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tree_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  step_t *arg1 = (step_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_step_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tree_step" "', argument " "1"" of type '" "step_t *""'"); 
  }
  arg1 = reinterpret_cast< step_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tree_step_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_step_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tree_step_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_tree_node_parent_node_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  tree_key_t *arg2 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_node_parent_node_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_parent_node_set" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_node_parent_node_set" "', argument " "2"" of type '" "tree_key_t *""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  if (arg1) (arg1)->parent_node = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_parent_node_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tree_key_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_parent_node_get" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (tree_key_t *)& ((arg1)->parent_node);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node__child_edges_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  std::list< tree_key_t > *arg2 = (std::list< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_node__child_edges_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node__child_edges_set" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_node__child_edges_set" "', argument " "2"" of type '" "std::list< tree_key_t > *""'"); 
  }
  arg2 = reinterpret_cast< std::list< tree_key_t > * >(argp2);
  if (arg1) (arg1)->child_edges = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node__child_edges_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::list< tree_key_t > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node__child_edges_get" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (std::list< tree_key_t > *)& ((arg1)->child_edges);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_fitness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_node_fitness_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_fitness_set" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_node_fitness_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fitness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_fitness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_fitness_get" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (double) ((arg1)->fitness);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_own_key_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  tree_key_t *arg2 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_node_own_key_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_own_key_set" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_node_own_key_set" "', argument " "2"" of type '" "tree_key_t *""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  if (arg1) (arg1)->own_key = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_own_key_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tree_key_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_own_key_get" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (tree_key_t *)& ((arg1)->own_key);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node__weight_distribution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  std::vector< step_t > *arg2 = (std::vector< step_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_node__weight_distribution_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node__weight_distribution_set" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_node__weight_distribution_set" "', argument " "2"" of type '" "std::vector< step_t > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< step_t > * >(argp2);
  if (arg1) (arg1)->weight_distribution = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node__weight_distribution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< step_t > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node__weight_distribution_get" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (std::vector< step_t > *)& ((arg1)->weight_distribution);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_number_of_offspring_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_node_number_of_offspring_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_number_of_offspring_set" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_node_number_of_offspring_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->number_of_offspring = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_number_of_offspring_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_number_of_offspring_get" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (int) ((arg1)->number_of_offspring);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_clone_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_node_clone_size_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_clone_size_set" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_node_clone_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->clone_size = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node_clone_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node_clone_size_get" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (int) ((arg1)->clone_size);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node___str__" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (char *)node_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node___repr__" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  result = (char *)node_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_node__get_crossover_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_node__get_crossover_chunk",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_node__get_crossover_chunk" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_node__get_crossover_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)node_t__get_crossover_chunk(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tree_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_tree_node",0,0,0)) SWIG_fail;
  result = (node_t *)new node_t();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tree_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  node_t *arg1 = (node_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_node_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tree_node" "', argument " "1"" of type '" "node_t *""'"); 
  }
  arg1 = reinterpret_cast< node_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tree_node_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tree_node_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_tree_edge_parent_node_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  tree_key_t *arg2 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_edge_parent_node_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge_parent_node_set" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_edge_parent_node_set" "', argument " "2"" of type '" "tree_key_t *""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  if (arg1) (arg1)->parent_node = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge_parent_node_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tree_key_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge_parent_node_get" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  result = (tree_key_t *)& ((arg1)->parent_node);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge_own_key_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  tree_key_t *arg2 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_edge_own_key_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge_own_key_set" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_edge_own_key_set" "', argument " "2"" of type '" "tree_key_t *""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  if (arg1) (arg1)->own_key = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge_own_key_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tree_key_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge_own_key_get" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  result = (tree_key_t *)& ((arg1)->own_key);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_edge_length_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge_length_set" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_edge_length_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->length = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge_length_get" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  result = (int) ((arg1)->length);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge_number_of_offspring_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"tree_edge_number_of_offspring_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge_number_of_offspring_set" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_edge_number_of_offspring_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->number_of_offspring = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge_number_of_offspring_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge_number_of_offspring_get" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  result = (int) ((arg1)->number_of_offspring);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge___str__" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  result = (char *)edge_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge___repr__" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  result = (char *)edge_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tree_edge__get_segment_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tree_edge__get_segment_chunk",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_edge_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edge__get_segment_chunk" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tree_edge__get_segment_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)edge_t__get_segment_chunk(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tree_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_tree_edge",0,0,0)) SWIG_fail;
  result = (edge_t *)new edge_t();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_edge_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tree_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  edge_t *arg1 = (edge_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_edge_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tree_edge" "', argument " "1"" of type '" "edge_t *""'"); 
  }
  arg1 = reinterpret_cast< edge_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tree_edge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_edge_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *tree_edge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_polymorphism_birth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"polymorphism_birth_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_birth_set" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polymorphism_birth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->birth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_birth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_birth_get" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  result = (int) ((arg1)->birth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_sweep_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"polymorphism_sweep_time_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_sweep_time_set" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polymorphism_sweep_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->sweep_time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_sweep_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_sweep_time_get" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  result = (int) ((arg1)->sweep_time);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_effect_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"polymorphism_effect_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_effect_set" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polymorphism_effect_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->effect = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_effect_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_effect_get" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  result = (double) ((arg1)->effect);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_fitness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"polymorphism_fitness_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_fitness_set" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polymorphism_fitness_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fitness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_fitness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_fitness_get" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  result = (double) ((arg1)->fitness);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_fitness_variance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"polymorphism_fitness_variance_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_fitness_variance_set" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polymorphism_fitness_variance_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fitness_variance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism_fitness_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism_fitness_variance_get" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  result = (double) ((arg1)->fitness_variance);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_polymorphism(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  double arg3 = (double) 0 ;
  double arg4 = (double) 0 ;
  double arg5 = (double) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "b",(char *) "age",(char *) "e",(char *) "f",(char *) "fvar", NULL 
  };
  poly_t *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:new_polymorphism",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_polymorphism" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_polymorphism" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_polymorphism" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_polymorphism" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_polymorphism" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  result = (poly_t *)new poly_t(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_poly_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism___str__" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  result = (char *)poly_t___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polymorphism___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polymorphism___repr__" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  result = (char *)poly_t___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_polymorphism(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  poly_t *arg1 = (poly_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_poly_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polymorphism" "', argument " "1"" of type '" "poly_t *""'"); 
  }
  arg1 = reinterpret_cast< poly_t * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polymorphism_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_poly_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *polymorphism_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_rooted_tree__edges_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  std::map< tree_key_t,edge_t > *arg2 = (std::map< tree_key_t,edge_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"rooted_tree__edges_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree__edges_set" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rooted_tree__edges_set" "', argument " "2"" of type '" "std::map< tree_key_t,edge_t > *""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,edge_t > * >(argp2);
  if (arg1) (arg1)->edges = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree__edges_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,edge_t > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree__edges_get" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (std::map< tree_key_t,edge_t > *)& ((arg1)->edges);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree__nodes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  std::map< tree_key_t,node_t > *arg2 = (std::map< tree_key_t,node_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"rooted_tree__nodes_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree__nodes_set" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rooted_tree__nodes_set" "', argument " "2"" of type '" "std::map< tree_key_t,node_t > *""'"); 
  }
  arg2 = reinterpret_cast< std::map< tree_key_t,node_t > * >(argp2);
  if (arg1) (arg1)->nodes = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree__nodes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< tree_key_t,node_t > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree__nodes_get" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (std::map< tree_key_t,node_t > *)& ((arg1)->nodes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree__leafs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  std::vector< tree_key_t > *arg2 = (std::vector< tree_key_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"rooted_tree__leafs_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree__leafs_set" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rooted_tree__leafs_set" "', argument " "2"" of type '" "std::vector< tree_key_t > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< tree_key_t > * >(argp2);
  if (arg1) (arg1)->leafs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree__leafs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tree_key_t > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree__leafs_get" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (std::vector< tree_key_t > *)& ((arg1)->leafs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_root_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  tree_key_t *arg2 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"rooted_tree_root_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_root_set" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rooted_tree_root_set" "', argument " "2"" of type '" "tree_key_t *""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  if (arg1) (arg1)->root = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_root_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tree_key_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_root_get" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (tree_key_t *)& ((arg1)->root);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_MRCA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  tree_key_t *arg2 = (tree_key_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"rooted_tree_MRCA_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_MRCA_set" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_tree_key_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rooted_tree_MRCA_set" "', argument " "2"" of type '" "tree_key_t *""'"); 
  }
  arg2 = reinterpret_cast< tree_key_t * >(argp2);
  if (arg1) (arg1)->MRCA = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_MRCA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tree_key_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_MRCA_get" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (tree_key_t *)& ((arg1)->MRCA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tree_key_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_rooted_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_rooted_tree",0,0,0)) SWIG_fail;
  result = (rooted_tree *)new rooted_tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_rooted_tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_rooted_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_rooted_tree" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_external_branch_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_external_branch_length" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (int)(arg1)->external_branch_length();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_total_branch_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_total_branch_length" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (int)(arg1)->total_branch_length();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_calc_weight_distribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  tree_key_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "subtree_root", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rooted_tree_calc_weight_distribution",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_calc_weight_distribution" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rooted_tree_calc_weight_distribution" "', argument " "2"" of type '" "tree_key_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rooted_tree_calc_weight_distribution" "', argument " "2"" of type '" "tree_key_t""'");
    } else {
      tree_key_t * temp = reinterpret_cast< tree_key_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)(arg1)->calc_weight_distribution(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_print_newick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_print_newick" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (arg1)->print_newick();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_subtree_newick(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  tree_key_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "root", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rooted_tree_subtree_newick",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_subtree_newick" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rooted_tree_subtree_newick" "', argument " "2"" of type '" "tree_key_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rooted_tree_subtree_newick" "', argument " "2"" of type '" "tree_key_t""'");
    } else {
      tree_key_t * temp = reinterpret_cast< tree_key_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->subtree_newick(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_print_weight_distribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  tree_key_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "node_key", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rooted_tree_print_weight_distribution",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_print_weight_distribution" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_tree_key_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rooted_tree_print_weight_distribution" "', argument " "2"" of type '" "tree_key_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rooted_tree_print_weight_distribution" "', argument " "2"" of type '" "tree_key_t""'");
    } else {
      tree_key_t * temp = reinterpret_cast< tree_key_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->print_weight_distribution(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree___str__" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (char *)rooted_tree___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree___repr__" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  result = (char *)rooted_tree___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree__ancestors_at_age(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  int arg2 ;
  tree_key_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "age",(char *) "subtree_root", NULL 
  };
  std::vector< tree_key_t > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:rooted_tree__ancestors_at_age",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree__ancestors_at_age" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rooted_tree__ancestors_at_age" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_tree_key_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "rooted_tree__ancestors_at_age" "', argument " "3"" of type '" "tree_key_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rooted_tree__ancestors_at_age" "', argument " "3"" of type '" "tree_key_t""'");
    } else {
      tree_key_t * temp = reinterpret_cast< tree_key_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = rooted_tree__ancestors_at_age(arg1,arg2,arg3);
  resultobj = swig::from(static_cast< std::vector<tree_key_t,std::allocator< tree_key_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rooted_tree_create_subtree_from_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  rooted_tree *arg1 = (rooted_tree *) 0 ;
  std::vector< tree_key_t > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "leaves", NULL 
  };
  rooted_tree result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rooted_tree_create_subtree_from_keys",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rooted_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rooted_tree_create_subtree_from_keys" "', argument " "1"" of type '" "rooted_tree *""'"); 
  }
  arg1 = reinterpret_cast< rooted_tree * >(argp1);
  {
    std::vector<tree_key_t,std::allocator< tree_key_t > > *ptr = (std::vector<tree_key_t,std::allocator< tree_key_t > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "rooted_tree_create_subtree_from_keys" "', argument " "2"" of type '" "std::vector< tree_key_t >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = rooted_tree_create_subtree_from_keys(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new rooted_tree(static_cast< const rooted_tree& >(result))), SWIGTYPE_p_rooted_tree, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *rooted_tree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_rooted_tree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *rooted_tree_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_multi_locus_genealogy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_multi_locus_genealogy",0,0,0)) SWIG_fail;
  result = (multi_locus_genealogy *)new multi_locus_genealogy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_multi_locus_genealogy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_multi_locus_genealogy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_multi_locus_genealogy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_multi_locus_genealogy" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multi_locus_genealogy_track_locus(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "new_locus", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:multi_locus_genealogy_track_locus",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_multi_locus_genealogy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multi_locus_genealogy_track_locus" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multi_locus_genealogy_track_locus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->track_locus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multi_locus_genealogy_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_multi_locus_genealogy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multi_locus_genealogy_reset" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multi_locus_genealogy_reset_but_loci(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_multi_locus_genealogy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multi_locus_genealogy_reset_but_loci" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  (arg1)->reset_but_loci();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multi_locus_genealogy___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_multi_locus_genealogy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multi_locus_genealogy___str__" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  result = (char *)multi_locus_genealogy___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multi_locus_genealogy___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_multi_locus_genealogy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multi_locus_genealogy___repr__" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  result = (char *)multi_locus_genealogy___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multi_locus_genealogy__get_number_of_loci(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_multi_locus_genealogy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multi_locus_genealogy__get_number_of_loci" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  result = (int)multi_locus_genealogy__get_number_of_loci(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multi_locus_genealogy__get_loci(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "DIM1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:multi_locus_genealogy__get_loci",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_multi_locus_genealogy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multi_locus_genealogy__get_loci" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg2 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg2;
    array2 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array2) SWIG_fail;
    arg3 = (int*) array_data(array2);
  }
  multi_locus_genealogy__get_loci(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multi_locus_genealogy_get_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  multi_locus_genealogy *arg1 = (multi_locus_genealogy *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus", NULL 
  };
  rooted_tree result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:multi_locus_genealogy_get_tree",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_multi_locus_genealogy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multi_locus_genealogy_get_tree" "', argument " "1"" of type '" "multi_locus_genealogy *""'"); 
  }
  arg1 = reinterpret_cast< multi_locus_genealogy * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multi_locus_genealogy_get_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = multi_locus_genealogy_get_tree(arg1,arg2);
    } catch (int err) {
      PyErr_SetString(PyExc_ValueError,"Locus not found among the tracked ones.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new rooted_tree(static_cast< const rooted_tree& >(result))), SWIGTYPE_p_rooted_tree, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *multi_locus_genealogy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_multi_locus_genealogy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *multi_locus_genealogy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_haploid_highd(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 1 ;
  bool arg4 = (bool) false ;
  bool arg5 = (bool) false ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "L",(char *) "rng_seed",(char *) "number_of_traits",(char *) "all_polymorphic",(char *) "most_polymorphic", NULL 
  };
  haploid_highd *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:new_haploid_highd",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_haploid_highd" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_haploid_highd" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_haploid_highd" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_haploid_highd" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_haploid_highd" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      result = (haploid_highd *)new haploid_highd(arg1,arg2,arg3,arg4,arg5);
    } catch (int err) {
      PyErr_SetString(PyExc_ValueError,
        "Construction impossible. Please check input args.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_haploid_highd, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_haploid_highd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_haploid_highd" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_carrying_capacity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_highd_carrying_capacity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_carrying_capacity_set" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_carrying_capacity_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->carrying_capacity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_carrying_capacity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_carrying_capacity_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int) ((arg1)->carrying_capacity);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_outcrossing_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_highd_outcrossing_rate_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_outcrossing_rate_set" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_outcrossing_rate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->outcrossing_rate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_outcrossing_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_outcrossing_rate_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (double) ((arg1)->outcrossing_rate);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_crossover_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_highd_crossover_rate_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_crossover_rate_set" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_crossover_rate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->crossover_rate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_crossover_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_crossover_rate_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (double) ((arg1)->crossover_rate);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_recombination_model_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_highd_recombination_model_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_recombination_model_set" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_recombination_model_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->recombination_model = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_recombination_model_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_recombination_model_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int) ((arg1)->recombination_model);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_circular_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_highd_circular_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_circular_set" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_circular_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->circular = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_circular_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_circular_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (bool) ((arg1)->circular);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__get_mutation_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__get_mutation_rate" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (double)(arg1)->get_mutation_rate();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__set_mutation_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd__set_mutation_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__set_mutation_rate" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd__set_mutation_rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_mutation_rate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__get_polymorphisms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__get_polymorphisms" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (arg1)->get_polymorphisms();
  resultobj = swig::from(static_cast< std::vector<poly_t,std::allocator< poly_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__get_fixed_mutations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< poly_t > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__get_fixed_mutations" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (arg1)->get_fixed_mutations();
  resultobj = swig::from(static_cast< std::vector<poly_t,std::allocator< poly_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__get_number_of_mutations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__get_number_of_mutations" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (arg1)->get_number_of_mutations();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_set_allele_frequencies(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequencies",(char *) "N", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_highd_set_allele_frequencies",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_set_allele_frequencies" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_set_allele_frequencies" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    result = (int)(arg1)->set_allele_frequencies(arg2,arg3);
    if (result) {
      PyErr_SetString(PyExc_RuntimeError,"Error in the C++ function.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_set_wildtype(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "N", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_set_wildtype",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_set_wildtype" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_set_wildtype" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (int)(arg1)->set_wildtype(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_track_locus_genealogy(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  std::vector< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "loci", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_track_locus_genealogy",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_track_locus_genealogy" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    /* Ensure input is a Python sequence */
    PyObject *tmplist = PySequence_Fast(obj1, "I expected a sequence");
    unsigned long L = PySequence_Length(tmplist);
    
    /* Create std::vector from Python list */
    temp2.reserve(L);
    long tmplong;
    for(size_t i=0; i < L; i++) {
      tmplong = PyInt_AsLong(PySequence_Fast_GET_ITEM(tmplist, i));
      if(tmplong < 0) {
        PyErr_SetString(PyExc_ValueError, "Expecting an array of positive integers (the loci).");
        SWIG_fail;
      }
      temp2.push_back((int)tmplong); 
    }      
    arg2 = temp2;
  }
  {
    result = (int)(arg1)->track_locus_genealogy(arg2);
    if (result) {
      PyErr_SetString(PyExc_ValueError,"Track the genealogy before initializing the population.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_add_genotype(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  boost::dynamic_bitset< > arg2 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::dynamic_bitset< > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "genotype",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:haploid_highd_add_genotype",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_add_genotype" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    /* Ensure input is a Python sequence */
    PyObject *tmplist = PySequence_Fast(obj1, "I expected a sequence");
    unsigned long L = PySequence_Length(tmplist);
    
    /* Create boost::dynamic_bitset from Python list */
    temp2.resize(L);
    long tmplong;
    for(size_t i=0; i < L; i++) {
      tmplong = PyInt_AsLong(PySequence_Fast_GET_ITEM(tmplist, i));
      if(tmplong < 0) {
        PyErr_SetString(PyExc_ValueError, "Expecting an array of bool.");
        SWIG_fail;
      }
      temp2[i] = (bool)tmplong; 
    }      
    arg2 = temp2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_add_genotype" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  (arg1)->add_genotype(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_add_trait_coefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double arg2 ;
  std::vector< int > arg3 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< int > temp3 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "value",(char *) "loci",(char *) "t", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:haploid_highd_add_trait_coefficient",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_add_trait_coefficient" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_add_trait_coefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    /* Ensure input is a Python sequence */
    PyObject *tmplist = PySequence_Fast(obj2, "I expected a sequence");
    unsigned long L = PySequence_Length(tmplist);
    
    /* Create std::vector from Python list */
    temp3.reserve(L);
    long tmplong;
    for(size_t i=0; i < L; i++) {
      tmplong = PyInt_AsLong(PySequence_Fast_GET_ITEM(tmplist, i));
      if(tmplong < 0) {
        PyErr_SetString(PyExc_ValueError, "Expecting an array of positive integers (the loci).");
        SWIG_fail;
      }
      temp3.push_back((int)tmplong); 
    }      
    arg3 = temp3;
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "haploid_highd_add_trait_coefficient" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (int)(arg1)->add_trait_coefficient(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_clear_trait(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "t", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_highd_clear_trait",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_clear_trait" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_clear_trait" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  (arg1)->clear_trait(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_clear_traits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_clear_traits" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  (arg1)->clear_traits();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_set_random_trait_epistasis(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double arg2 ;
  int arg3 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "epistasis_std",(char *) "traitnumber", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:haploid_highd_set_random_trait_epistasis",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_set_random_trait_epistasis" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_set_random_trait_epistasis" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_set_random_trait_epistasis" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  (arg1)->set_random_trait_epistasis(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_add_fitness_coefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double arg2 ;
  std::vector< int > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "value",(char *) "loci", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_highd_add_fitness_coefficient",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_add_fitness_coefficient" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_add_fitness_coefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    /* Ensure input is a Python sequence */
    PyObject *tmplist = PySequence_Fast(obj2, "I expected a sequence");
    unsigned long L = PySequence_Length(tmplist);
    
    /* Create std::vector from Python list */
    temp3.reserve(L);
    long tmplong;
    for(size_t i=0; i < L; i++) {
      tmplong = PyInt_AsLong(PySequence_Fast_GET_ITEM(tmplist, i));
      if(tmplong < 0) {
        PyErr_SetString(PyExc_ValueError, "Expecting an array of positive integers (the loci).");
        SWIG_fail;
      }
      temp3.push_back((int)tmplong); 
    }      
    arg3 = temp3;
  }
  result = (int)(arg1)->add_fitness_coefficient(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_clear_fitness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_clear_fitness" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    try {
      (arg1)->clear_fitness();
    } catch (int err) {
      PyErr_SetString(PyExc_ValueError,"Fitness depends only on traits, not on the genome directly.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_set_random_epistasis(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "epistasis_std", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_set_random_epistasis",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_set_random_epistasis" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_set_random_epistasis" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_random_epistasis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_evolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gen", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_highd_evolve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_evolve" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_evolve" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    result = (int)(arg1)->evolve(arg2);
    if (result) {
      PyErr_SetString(PyExc_RuntimeError,"Error in the C++ function.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_bottleneck(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "size_of_bottleneck", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_bottleneck",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_bottleneck" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_bottleneck" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->bottleneck(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_flip_single_locus(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_flip_single_locus",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_flip_single_locus" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_flip_single_locus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (unsigned int)(arg1)->flip_single_locus(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_calc_stat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_calc_stat" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  (arg1)->calc_stat();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_unique_clones(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_unique_clones" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  (arg1)->unique_clones();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__get_nonempty_clones(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__get_nonempty_clones" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (arg1)->get_nonempty_clones();
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_random_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_random_clone" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int)(arg1)->random_clone();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_diversity_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  unsigned int arg2 = (unsigned int) 1000 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n_sample", NULL 
  };
  stat_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_highd_get_diversity_statistics",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_diversity_statistics" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_diversity_statistics" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  result = (arg1)->get_diversity_statistics(arg2);
  resultobj = SWIG_NewPointerObj((new stat_t(static_cast< const stat_t& >(result))), SWIGTYPE_p_stat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_divergence_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  unsigned int arg2 = (unsigned int) 1000 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n_sample", NULL 
  };
  stat_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_highd_get_divergence_statistics",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_divergence_statistics" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_divergence_statistics" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  result = (arg1)->get_divergence_statistics(arg2);
  resultobj = SWIG_NewPointerObj((new stat_t(static_cast< const stat_t& >(result))), SWIGTYPE_p_stat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_allele_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "l", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_allele_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_allele_frequency" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_allele_frequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_allele_frequency(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_derived_allele_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "l", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_derived_allele_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_derived_allele_frequency" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_derived_allele_frequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_derived_allele_frequency(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_pair_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus1",(char *) "locus2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_highd_get_pair_frequency",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_pair_frequency" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_pair_frequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_get_pair_frequency" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_pair_frequency(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_chi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "l", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_chi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_chi" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_chi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_chi(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_derived_chi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "l", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_derived_chi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_derived_chi" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_derived_chi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_derived_chi(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_chi2(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus1",(char *) "locus2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_highd_get_chi2",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_chi2" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_chi2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_get_chi2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_chi2(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_LD(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus1",(char *) "locus2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_highd_get_LD",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_LD" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_LD" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_get_LD" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_LD(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_moment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "locus1",(char *) "locus2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_highd_get_moment",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_moment" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_moment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_get_moment" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_moment(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_trait_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "t", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_trait_weight",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_trait_weight" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_trait_weight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_trait_weight(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_fitness(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_fitness",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_fitness" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_fitness" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->get_fitness(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_clone_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_clone_size",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_clone_size" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_clone_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->get_clone_size(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_trait(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  int arg3 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "t", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:haploid_highd_get_trait",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_trait" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_trait" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_get_trait" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (double)(arg1)->get_trait(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_trait_epistasis(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "t", NULL 
  };
  SwigValueWrapper< std::vector< coeff_t > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_highd_get_trait_epistasis",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_trait_epistasis" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_trait_epistasis" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  result = (arg1)->get_trait_epistasis(arg2);
  {
    PyObject *tmpitem, *tmploci;
    double tmpval;
    int tmporder;
    coeff_t *tmpcoeff;
    
    PyObject *tmplist = PyList_New(0);
    for(int i=0; i < (&result)->size(); i++) {
      /* set the i-th coefficient */
      tmpcoeff = &((&result)->at(i));
      tmpval = tmpcoeff->value;
      tmporder = tmpcoeff->order; 
      tmpitem = PyTuple_New(2);
      /* set the value */
      PyTuple_SET_ITEM(tmpitem, 0, PyFloat_FromDouble(tmpval));
      /* set the loci */
      tmploci = PyTuple_New(tmporder);
      for(int j=0; j < tmporder; j++)
      PyTuple_SET_ITEM(tmploci, j, PyInt_FromLong((long)(tmpcoeff->loci[j])));
      PyTuple_SET_ITEM(tmpitem, 1, tmploci);
      /* set the coeff */
      PyList_Append(tmplist, tmpitem);
    }
    resultobj = tmplist;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_fitness_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stat_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_fitness_statistics" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (arg1)->get_fitness_statistics();
  resultobj = SWIG_NewPointerObj((new stat_t(static_cast< const stat_t& >(result))), SWIGTYPE_p_stat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_trait_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "t", NULL 
  };
  stat_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:haploid_highd_get_trait_statistics",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_trait_statistics" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_trait_statistics" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  result = (arg1)->get_trait_statistics(arg2);
  resultobj = SWIG_NewPointerObj((new stat_t(static_cast< const stat_t& >(result))), SWIGTYPE_p_stat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_trait_covariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "t1",(char *) "t2", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_highd_get_trait_covariance",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_trait_covariance" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_trait_covariance" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "haploid_highd_get_trait_covariance" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->get_trait_covariance(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__update_traits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__update_traits" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  (arg1)->update_traits();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__update_fitness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__update_fitness" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  (arg1)->update_fitness();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd___str__" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (char *)haploid_highd___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd___repr__" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (char *)haploid_highd___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  clone_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_clone",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_clone" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_clone" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = haploid_highd_get_clone(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new clone_t(static_cast< const clone_t& >(result))), SWIGTYPE_p_clone_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_L_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_L_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int)haploid_highd_L_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_number_of_loci_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_number_of_loci_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int)haploid_highd_number_of_loci_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_N_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_N_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int)haploid_highd_N_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_population_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_population_size_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int)haploid_highd_population_size_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_generation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"haploid_highd_generation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_generation_set" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_generation_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  haploid_highd_generation_set(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_generation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_generation_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int)haploid_highd_generation_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_number_of_clones_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_number_of_clones_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int)haploid_highd_number_of_clones_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_number_of_traits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_number_of_traits_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (int)haploid_highd_number_of_traits_get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_max_fitness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_max_fitness_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (double)haploid_highd_max_fitness_get(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_participation_ratio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_participation_ratio_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (double)haploid_highd_participation_ratio_get(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_all_polymorphic_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_all_polymorphic_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (bool)haploid_highd_all_polymorphic_get(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_most_polymorphic_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_most_polymorphic_get" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = (bool)haploid_highd_most_polymorphic_get(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__set_mutant_loci(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "IN_ARRAY1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd__set_mutant_loci",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__set_mutant_loci" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_INT,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  haploid_highd__set_mutant_loci(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__set_trait_weights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "IN_ARRAY1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd__set_trait_weights",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__set_trait_weights" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  haploid_highd__set_trait_weights(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__get_trait_weights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ARGOUT_ARRAY1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd__get_trait_weights",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__get_trait_weights" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  haploid_highd__get_trait_weights(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_set_genotypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "len1",(char *) "len2", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:haploid_highd_set_genotypes",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_set_genotypes" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp size[1] = {
      -1
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int) array_size(array2,0);
    arg3 = (double*) array_data(array2);
  }
  {
    npy_intp size[1] = {
      -1
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int) array_size(array4,0);
    arg5 = (double*) array_data(array4);
  }
  {
    result = (int)haploid_highd_set_genotypes(arg1,arg2,arg3,arg4,arg5);
    if (result) {
      PyErr_SetString(PyExc_RuntimeError,"Error in the C++ function.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd__get_genealogy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  multi_locus_genealogy result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd__get_genealogy" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  result = haploid_highd__get_genealogy(arg1);
  resultobj = SWIG_NewPointerObj((new multi_locus_genealogy(static_cast< const multi_locus_genealogy& >(result))), SWIGTYPE_p_multi_locus_genealogy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_allele_frequencies(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ARGOUT_ARRAY1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_allele_frequencies",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_allele_frequencies" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  haploid_highd_get_allele_frequencies(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_derived_allele_frequencies(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ARGOUT_ARRAY1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_derived_allele_frequencies",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_derived_allele_frequencies" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  haploid_highd_get_derived_allele_frequencies(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_trait_additive(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ARGOUT_ARRAY1",(char *) "t", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:haploid_highd_get_trait_additive",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_trait_additive" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  if (obj2) {
    ecode4 = SWIG_AsVal_int(obj2, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "haploid_highd_get_trait_additive" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  haploid_highd_get_trait_additive(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_set_trait_additive(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "DIM1",(char *) "t", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:haploid_highd_set_trait_additive",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_set_trait_additive" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp size[1] = {
      -1
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int) array_size(array2,0);
    arg3 = (double*) array_data(array2);
  }
  if (obj2) {
    ecode4 = SWIG_AsVal_int(obj2, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "haploid_highd_set_trait_additive" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  haploid_highd_set_trait_additive(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_set_fitness_additive(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "DIM1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_set_fitness_additive",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_set_fitness_additive" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  {
    npy_intp size[1] = {
      -1
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int) array_size(array2,0);
    arg3 = (double*) array_data(array2);
  }
  haploid_highd_set_fitness_additive(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_haploid_highd_get_genotype(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  haploid_highd *arg1 = (haploid_highd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  boost::dynamic_bitset< > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:haploid_highd_get_genotype",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_haploid_highd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "haploid_highd_get_genotype" "', argument " "1"" of type '" "haploid_highd *""'"); 
  }
  arg1 = reinterpret_cast< haploid_highd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "haploid_highd_get_genotype" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = haploid_highd_get_genotype(arg1,arg2);
  {
    unsigned long L = (&result)->size();
    npy_intp dims[1] = {
      (npy_intp) L
    };
    PyObject *array = PyArray_ZEROS(1, dims, NPY_BOOL, 0);
    if (!array) SWIG_fail;
    
    /* no checks on memory alignments, since we create a new array */
    bool *ptr = (bool *)PyArray_DATA(array);
    for(int i=0; i < L; i++, ptr++)
    if((&result)->test(i))
    *ptr = true;
    resultobj = array;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *haploid_highd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_haploid_highd, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *haploid_highd_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_hivgene_start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivgene *arg1 = (hivgene *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"hivgene_start_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivgene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivgene_start_set" "', argument " "1"" of type '" "hivgene *""'"); 
  }
  arg1 = reinterpret_cast< hivgene * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hivgene_start_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->start = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivgene_start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivgene *arg1 = (hivgene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivgene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivgene_start_get" "', argument " "1"" of type '" "hivgene *""'"); 
  }
  arg1 = reinterpret_cast< hivgene * >(argp1);
  result = (unsigned int) ((arg1)->start);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivgene_end_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivgene *arg1 = (hivgene *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"hivgene_end_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivgene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivgene_end_set" "', argument " "1"" of type '" "hivgene *""'"); 
  }
  arg1 = reinterpret_cast< hivgene * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hivgene_end_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->end = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivgene_end_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivgene *arg1 = (hivgene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivgene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivgene_end_get" "', argument " "1"" of type '" "hivgene *""'"); 
  }
  arg1 = reinterpret_cast< hivgene * >(argp1);
  result = (unsigned int) ((arg1)->end);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hivgene(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 = (unsigned int) 0 ;
  unsigned int arg2 = (unsigned int) 10000 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "start_in",(char *) "end_in", NULL 
  };
  hivgene *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_hivgene",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_hivgene" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_hivgene" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  result = (hivgene *)new hivgene(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hivgene, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivgene___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivgene *arg1 = (hivgene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivgene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivgene___str__" "', argument " "1"" of type '" "hivgene *""'"); 
  }
  arg1 = reinterpret_cast< hivgene * >(argp1);
  result = (char *)hivgene___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivgene___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivgene *arg1 = (hivgene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivgene, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivgene___repr__" "', argument " "1"" of type '" "hivgene *""'"); 
  }
  arg1 = reinterpret_cast< hivgene * >(argp1);
  result = (char *)hivgene___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_hivgene(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivgene *arg1 = (hivgene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivgene, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hivgene" "', argument " "1"" of type '" "hivgene *""'"); 
  }
  arg1 = reinterpret_cast< hivgene * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *hivgene_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hivgene, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *hivgene_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_hivpopulation(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  double arg3 = (double) 3e-5 ;
  double arg4 = (double) 1e-2 ;
  double arg5 = (double) 1e-3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "N",(char *) "rng_seed",(char *) "mutation_rate",(char *) "coinfection_rate",(char *) "crossover_rate", NULL 
  };
  hivpopulation *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:new_hivpopulation",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_hivpopulation" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_hivpopulation" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_hivpopulation" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_hivpopulation" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_hivpopulation" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  {
    try {
      result = (hivpopulation *)new hivpopulation(arg1,arg2,arg3,arg4,arg5);
    } catch (int err) {
      PyErr_SetString(PyExc_ValueError,"Construction impossible. Please check input args.");
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hivpopulation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_hivpopulation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivpopulation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hivpopulation" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation_env_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  hivgene *arg2 = (hivgene *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"hivpopulation_env_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation_env_set" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hivgene, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hivpopulation_env_set" "', argument " "2"" of type '" "hivgene *""'"); 
  }
  arg2 = reinterpret_cast< hivgene * >(argp2);
  if (arg1) (arg1)->env = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation_env_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hivgene *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation_env_get" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  result = (hivgene *)& ((arg1)->env);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hivgene, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation_read_replication_coefficients(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ifstream temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "model", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hivpopulation_read_replication_coefficients",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation_read_replication_coefficients" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  {
    if (!PyString_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a string");
      return NULL;
    }
    temp2.open(PyString_AsString(obj1));
    arg2 = &temp2;
  }
  result = (int)(arg1)->read_replication_coefficients(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation_read_resistance_coefficients(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ifstream temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "model", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hivpopulation_read_resistance_coefficients",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation_read_resistance_coefficients" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  {
    if (!PyString_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a string");
      return NULL;
    }
    temp2.open(PyString_AsString(obj1));
    arg2 = &temp2;
  }
  result = (int)(arg1)->read_resistance_coefficients(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation_write_genotypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  ostream *arg2 = 0 ;
  int arg3 ;
  std::string arg4 = (std::string) "" ;
  int arg5 = (int) 0 ;
  int arg6 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ofstream temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "out_genotypes",(char *) "sample_size",(char *) "gt_label",(char *) "start",(char *) "length", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OOO:hivpopulation_write_genotypes",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation_write_genotypes" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  {
    if (!PyString_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a string");
      return NULL;
    }
    temp2.open(PyString_AsString(obj1));
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hivpopulation_write_genotypes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (obj3) {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(obj3, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hivpopulation_write_genotypes" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hivpopulation_write_genotypes" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "hivpopulation_write_genotypes" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  result = (int)(arg1)->write_genotypes(*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation___str__" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  result = (char *)hivpopulation___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation___repr__" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  result = (char *)hivpopulation___repr__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation_treatment_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"hivpopulation_treatment_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation_treatment_set" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hivpopulation_treatment_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  hivpopulation_treatment_set(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hivpopulation_treatment_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hivpopulation *arg1 = (hivpopulation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hivpopulation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hivpopulation_treatment_get" "', argument " "1"" of type '" "hivpopulation *""'"); 
  }
  arg1 = reinterpret_cast< hivpopulation * >(argp1);
  result = (double)hivpopulation_treatment_get(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *hivpopulation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hivpopulation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *hivpopulation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", (PyCFunction)_wrap_delete_SwigPyIterator, METH_O, NULL},
	 { (char *)"SwigPyIterator_value", (PyCFunction)_wrap_SwigPyIterator_value, METH_O, NULL},
	 { (char *)"SwigPyIterator_incr", (PyCFunction) _wrap_SwigPyIterator_incr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_decr", (PyCFunction) _wrap_SwigPyIterator_decr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_distance", (PyCFunction) _wrap_SwigPyIterator_distance, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_equal", (PyCFunction) _wrap_SwigPyIterator_equal, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_copy", (PyCFunction)_wrap_SwigPyIterator_copy, METH_O, NULL},
	 { (char *)"SwigPyIterator_next", (PyCFunction)_wrap_SwigPyIterator_next, METH_O, NULL},
	 { (char *)"SwigPyIterator___next__", (PyCFunction)_wrap_SwigPyIterator___next__, METH_O, NULL},
	 { (char *)"SwigPyIterator_previous", (PyCFunction)_wrap_SwigPyIterator_previous, METH_O, NULL},
	 { (char *)"SwigPyIterator_advance", (PyCFunction) _wrap_SwigPyIterator_advance, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___eq__", (PyCFunction) _wrap_SwigPyIterator___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___ne__", (PyCFunction) _wrap_SwigPyIterator___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___iadd__", (PyCFunction) _wrap_SwigPyIterator___iadd__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___isub__", (PyCFunction) _wrap_SwigPyIterator___isub__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___add__", (PyCFunction) _wrap_SwigPyIterator___add__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"_intVector_iterator", (PyCFunction)_wrap__intVector_iterator, METH_O, NULL},
	 { (char *)"_intVector___nonzero__", (PyCFunction)_wrap__intVector___nonzero__, METH_O, NULL},
	 { (char *)"_intVector___bool__", (PyCFunction)_wrap__intVector___bool__, METH_O, NULL},
	 { (char *)"_intVector___len__", (PyCFunction)_wrap__intVector___len__, METH_O, NULL},
	 { (char *)"_intVector_pop", (PyCFunction)_wrap__intVector_pop, METH_O, NULL},
	 { (char *)"_intVector___getslice__", (PyCFunction) _wrap__intVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"_intVector___setslice__", (PyCFunction) _wrap__intVector___setslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"_intVector___delslice__", (PyCFunction) _wrap__intVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"_intVector___delitem__", _wrap__intVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"_intVector___getitem__", _wrap__intVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"_intVector___setitem__", _wrap__intVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"_intVector_append", (PyCFunction) _wrap__intVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"_intVector_empty", (PyCFunction)_wrap__intVector_empty, METH_O, NULL},
	 { (char *)"_intVector_size", (PyCFunction)_wrap__intVector_size, METH_O, NULL},
	 { (char *)"_intVector_clear", (PyCFunction)_wrap__intVector_clear, METH_O, NULL},
	 { (char *)"_intVector_swap", (PyCFunction) _wrap__intVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"_intVector_get_allocator", (PyCFunction)_wrap__intVector_get_allocator, METH_O, NULL},
	 { (char *)"_intVector_begin", (PyCFunction)_wrap__intVector_begin, METH_O, NULL},
	 { (char *)"_intVector_end", (PyCFunction)_wrap__intVector_end, METH_O, NULL},
	 { (char *)"_intVector_rbegin", (PyCFunction)_wrap__intVector_rbegin, METH_O, NULL},
	 { (char *)"_intVector_rend", (PyCFunction)_wrap__intVector_rend, METH_O, NULL},
	 { (char *)"_intVector_pop_back", (PyCFunction)_wrap__intVector_pop_back, METH_O, NULL},
	 { (char *)"_intVector_erase", _wrap__intVector_erase, METH_VARARGS, NULL},
	 { (char *)"new__intVector", _wrap_new__intVector, METH_VARARGS, NULL},
	 { (char *)"_intVector_push_back", (PyCFunction) _wrap__intVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"_intVector_front", (PyCFunction)_wrap__intVector_front, METH_O, NULL},
	 { (char *)"_intVector_back", (PyCFunction)_wrap__intVector_back, METH_O, NULL},
	 { (char *)"_intVector_assign", (PyCFunction) _wrap__intVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"_intVector_resize", _wrap__intVector_resize, METH_VARARGS, NULL},
	 { (char *)"_intVector_insert", _wrap__intVector_insert, METH_VARARGS, NULL},
	 { (char *)"_intVector_reserve", (PyCFunction) _wrap__intVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"_intVector_capacity", (PyCFunction)_wrap__intVector_capacity, METH_O, NULL},
	 { (char *)"delete__intVector", (PyCFunction)_wrap_delete__intVector, METH_O, (char *)"delete__intVector(_intVector self)"},
	 { (char *)"_intVector_swigregister", _intVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"_intVector_swiginit", _intVector_swiginit, METH_VARARGS, NULL},
	 { (char *)"vector_tree_step_iterator", (PyCFunction)_wrap_vector_tree_step_iterator, METH_O, NULL},
	 { (char *)"vector_tree_step___nonzero__", (PyCFunction)_wrap_vector_tree_step___nonzero__, METH_O, NULL},
	 { (char *)"vector_tree_step___bool__", (PyCFunction)_wrap_vector_tree_step___bool__, METH_O, NULL},
	 { (char *)"vector_tree_step___len__", (PyCFunction)_wrap_vector_tree_step___len__, METH_O, NULL},
	 { (char *)"vector_tree_step_pop", (PyCFunction)_wrap_vector_tree_step_pop, METH_O, NULL},
	 { (char *)"vector_tree_step___getslice__", (PyCFunction) _wrap_vector_tree_step___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_step___setslice__", (PyCFunction) _wrap_vector_tree_step___setslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_step___delslice__", (PyCFunction) _wrap_vector_tree_step___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_step___delitem__", _wrap_vector_tree_step___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_tree_step___getitem__", _wrap_vector_tree_step___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_tree_step___setitem__", _wrap_vector_tree_step___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_tree_step_append", (PyCFunction) _wrap_vector_tree_step_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_step_empty", (PyCFunction)_wrap_vector_tree_step_empty, METH_O, NULL},
	 { (char *)"vector_tree_step_size", (PyCFunction)_wrap_vector_tree_step_size, METH_O, NULL},
	 { (char *)"vector_tree_step_clear", (PyCFunction)_wrap_vector_tree_step_clear, METH_O, NULL},
	 { (char *)"vector_tree_step_swap", (PyCFunction) _wrap_vector_tree_step_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_step_get_allocator", (PyCFunction)_wrap_vector_tree_step_get_allocator, METH_O, NULL},
	 { (char *)"vector_tree_step_begin", (PyCFunction)_wrap_vector_tree_step_begin, METH_O, NULL},
	 { (char *)"vector_tree_step_end", (PyCFunction)_wrap_vector_tree_step_end, METH_O, NULL},
	 { (char *)"vector_tree_step_rbegin", (PyCFunction)_wrap_vector_tree_step_rbegin, METH_O, NULL},
	 { (char *)"vector_tree_step_rend", (PyCFunction)_wrap_vector_tree_step_rend, METH_O, NULL},
	 { (char *)"vector_tree_step_pop_back", (PyCFunction)_wrap_vector_tree_step_pop_back, METH_O, NULL},
	 { (char *)"vector_tree_step_erase", _wrap_vector_tree_step_erase, METH_VARARGS, NULL},
	 { (char *)"new_vector_tree_step", _wrap_new_vector_tree_step, METH_VARARGS, NULL},
	 { (char *)"vector_tree_step_push_back", (PyCFunction) _wrap_vector_tree_step_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_step_front", (PyCFunction)_wrap_vector_tree_step_front, METH_O, NULL},
	 { (char *)"vector_tree_step_back", (PyCFunction)_wrap_vector_tree_step_back, METH_O, NULL},
	 { (char *)"vector_tree_step_assign", (PyCFunction) _wrap_vector_tree_step_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_step_resize", _wrap_vector_tree_step_resize, METH_VARARGS, NULL},
	 { (char *)"vector_tree_step_insert", _wrap_vector_tree_step_insert, METH_VARARGS, NULL},
	 { (char *)"vector_tree_step_reserve", (PyCFunction) _wrap_vector_tree_step_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_step_capacity", (PyCFunction)_wrap_vector_tree_step_capacity, METH_O, NULL},
	 { (char *)"delete_vector_tree_step", (PyCFunction)_wrap_delete_vector_tree_step, METH_O, (char *)"delete_vector_tree_step(vector_tree_step self)"},
	 { (char *)"vector_tree_step_swigregister", vector_tree_step_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_tree_step_swiginit", vector_tree_step_swiginit, METH_VARARGS, NULL},
	 { (char *)"vector_tree_key_iterator", (PyCFunction)_wrap_vector_tree_key_iterator, METH_O, NULL},
	 { (char *)"vector_tree_key___nonzero__", (PyCFunction)_wrap_vector_tree_key___nonzero__, METH_O, NULL},
	 { (char *)"vector_tree_key___bool__", (PyCFunction)_wrap_vector_tree_key___bool__, METH_O, NULL},
	 { (char *)"vector_tree_key___len__", (PyCFunction)_wrap_vector_tree_key___len__, METH_O, NULL},
	 { (char *)"vector_tree_key_pop", (PyCFunction)_wrap_vector_tree_key_pop, METH_O, NULL},
	 { (char *)"vector_tree_key___getslice__", (PyCFunction) _wrap_vector_tree_key___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_key___setslice__", (PyCFunction) _wrap_vector_tree_key___setslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_key___delslice__", (PyCFunction) _wrap_vector_tree_key___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_key___delitem__", _wrap_vector_tree_key___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_tree_key___getitem__", _wrap_vector_tree_key___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_tree_key___setitem__", _wrap_vector_tree_key___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_tree_key_append", (PyCFunction) _wrap_vector_tree_key_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_key_empty", (PyCFunction)_wrap_vector_tree_key_empty, METH_O, NULL},
	 { (char *)"vector_tree_key_size", (PyCFunction)_wrap_vector_tree_key_size, METH_O, NULL},
	 { (char *)"vector_tree_key_clear", (PyCFunction)_wrap_vector_tree_key_clear, METH_O, NULL},
	 { (char *)"vector_tree_key_swap", (PyCFunction) _wrap_vector_tree_key_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_key_get_allocator", (PyCFunction)_wrap_vector_tree_key_get_allocator, METH_O, NULL},
	 { (char *)"vector_tree_key_begin", (PyCFunction)_wrap_vector_tree_key_begin, METH_O, NULL},
	 { (char *)"vector_tree_key_end", (PyCFunction)_wrap_vector_tree_key_end, METH_O, NULL},
	 { (char *)"vector_tree_key_rbegin", (PyCFunction)_wrap_vector_tree_key_rbegin, METH_O, NULL},
	 { (char *)"vector_tree_key_rend", (PyCFunction)_wrap_vector_tree_key_rend, METH_O, NULL},
	 { (char *)"vector_tree_key_pop_back", (PyCFunction)_wrap_vector_tree_key_pop_back, METH_O, NULL},
	 { (char *)"vector_tree_key_erase", _wrap_vector_tree_key_erase, METH_VARARGS, NULL},
	 { (char *)"new_vector_tree_key", _wrap_new_vector_tree_key, METH_VARARGS, NULL},
	 { (char *)"vector_tree_key_push_back", (PyCFunction) _wrap_vector_tree_key_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_key_front", (PyCFunction)_wrap_vector_tree_key_front, METH_O, NULL},
	 { (char *)"vector_tree_key_back", (PyCFunction)_wrap_vector_tree_key_back, METH_O, NULL},
	 { (char *)"vector_tree_key_assign", (PyCFunction) _wrap_vector_tree_key_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_key_resize", _wrap_vector_tree_key_resize, METH_VARARGS, NULL},
	 { (char *)"vector_tree_key_insert", _wrap_vector_tree_key_insert, METH_VARARGS, NULL},
	 { (char *)"vector_tree_key_reserve", (PyCFunction) _wrap_vector_tree_key_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_tree_key_capacity", (PyCFunction)_wrap_vector_tree_key_capacity, METH_O, NULL},
	 { (char *)"delete_vector_tree_key", (PyCFunction)_wrap_delete_vector_tree_key, METH_O, (char *)"delete_vector_tree_key(vector_tree_key self)"},
	 { (char *)"vector_tree_key_swigregister", vector_tree_key_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_tree_key_swiginit", vector_tree_key_swiginit, METH_VARARGS, NULL},
	 { (char *)"list_tree_key_iterator", (PyCFunction)_wrap_list_tree_key_iterator, METH_O, NULL},
	 { (char *)"list_tree_key___nonzero__", (PyCFunction)_wrap_list_tree_key___nonzero__, METH_O, NULL},
	 { (char *)"list_tree_key___bool__", (PyCFunction)_wrap_list_tree_key___bool__, METH_O, NULL},
	 { (char *)"list_tree_key___len__", (PyCFunction)_wrap_list_tree_key___len__, METH_O, NULL},
	 { (char *)"list_tree_key_pop", (PyCFunction)_wrap_list_tree_key_pop, METH_O, NULL},
	 { (char *)"list_tree_key___getslice__", (PyCFunction) _wrap_list_tree_key___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"list_tree_key___setslice__", (PyCFunction) _wrap_list_tree_key___setslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"list_tree_key___delslice__", (PyCFunction) _wrap_list_tree_key___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"list_tree_key___delitem__", _wrap_list_tree_key___delitem__, METH_VARARGS, NULL},
	 { (char *)"list_tree_key___getitem__", _wrap_list_tree_key___getitem__, METH_VARARGS, NULL},
	 { (char *)"list_tree_key___setitem__", _wrap_list_tree_key___setitem__, METH_VARARGS, NULL},
	 { (char *)"list_tree_key_append", (PyCFunction) _wrap_list_tree_key_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"list_tree_key_empty", (PyCFunction)_wrap_list_tree_key_empty, METH_O, NULL},
	 { (char *)"list_tree_key_size", (PyCFunction)_wrap_list_tree_key_size, METH_O, NULL},
	 { (char *)"list_tree_key_clear", (PyCFunction)_wrap_list_tree_key_clear, METH_O, NULL},
	 { (char *)"list_tree_key_swap", (PyCFunction) _wrap_list_tree_key_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"list_tree_key_get_allocator", (PyCFunction)_wrap_list_tree_key_get_allocator, METH_O, NULL},
	 { (char *)"list_tree_key_begin", (PyCFunction)_wrap_list_tree_key_begin, METH_O, NULL},
	 { (char *)"list_tree_key_end", (PyCFunction)_wrap_list_tree_key_end, METH_O, NULL},
	 { (char *)"list_tree_key_rbegin", (PyCFunction)_wrap_list_tree_key_rbegin, METH_O, NULL},
	 { (char *)"list_tree_key_rend", (PyCFunction)_wrap_list_tree_key_rend, METH_O, NULL},
	 { (char *)"list_tree_key_pop_back", (PyCFunction)_wrap_list_tree_key_pop_back, METH_O, NULL},
	 { (char *)"list_tree_key_erase", _wrap_list_tree_key_erase, METH_VARARGS, NULL},
	 { (char *)"new_list_tree_key", _wrap_new_list_tree_key, METH_VARARGS, NULL},
	 { (char *)"list_tree_key_push_back", (PyCFunction) _wrap_list_tree_key_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"list_tree_key_front", (PyCFunction)_wrap_list_tree_key_front, METH_O, NULL},
	 { (char *)"list_tree_key_back", (PyCFunction)_wrap_list_tree_key_back, METH_O, NULL},
	 { (char *)"list_tree_key_assign", (PyCFunction) _wrap_list_tree_key_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"list_tree_key_resize", _wrap_list_tree_key_resize, METH_VARARGS, NULL},
	 { (char *)"list_tree_key_insert", _wrap_list_tree_key_insert, METH_VARARGS, NULL},
	 { (char *)"list_tree_key_pop_front", (PyCFunction)_wrap_list_tree_key_pop_front, METH_O, NULL},
	 { (char *)"list_tree_key_push_front", (PyCFunction) _wrap_list_tree_key_push_front, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"list_tree_key_reverse", (PyCFunction)_wrap_list_tree_key_reverse, METH_O, NULL},
	 { (char *)"delete_list_tree_key", (PyCFunction)_wrap_delete_list_tree_key, METH_O, (char *)"delete_list_tree_key(list_tree_key self)"},
	 { (char *)"list_tree_key_swigregister", list_tree_key_swigregister, METH_VARARGS, NULL},
	 { (char *)"list_tree_key_swiginit", list_tree_key_swiginit, METH_VARARGS, NULL},
	 { (char *)"map_key_edge_iterator", (PyCFunction)_wrap_map_key_edge_iterator, METH_O, NULL},
	 { (char *)"map_key_edge___nonzero__", (PyCFunction)_wrap_map_key_edge___nonzero__, METH_O, NULL},
	 { (char *)"map_key_edge___bool__", (PyCFunction)_wrap_map_key_edge___bool__, METH_O, NULL},
	 { (char *)"map_key_edge___len__", (PyCFunction)_wrap_map_key_edge___len__, METH_O, NULL},
	 { (char *)"map_key_edge___getitem__", (PyCFunction) _wrap_map_key_edge___getitem__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_edge___delitem__", (PyCFunction) _wrap_map_key_edge___delitem__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_edge_has_key", (PyCFunction) _wrap_map_key_edge_has_key, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_edge_keys", (PyCFunction)_wrap_map_key_edge_keys, METH_O, NULL},
	 { (char *)"map_key_edge_values", (PyCFunction)_wrap_map_key_edge_values, METH_O, NULL},
	 { (char *)"map_key_edge_items", (PyCFunction)_wrap_map_key_edge_items, METH_O, NULL},
	 { (char *)"map_key_edge___contains__", (PyCFunction) _wrap_map_key_edge___contains__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_edge_key_iterator", (PyCFunction)_wrap_map_key_edge_key_iterator, METH_O, NULL},
	 { (char *)"map_key_edge_value_iterator", (PyCFunction)_wrap_map_key_edge_value_iterator, METH_O, NULL},
	 { (char *)"map_key_edge___setitem__", _wrap_map_key_edge___setitem__, METH_VARARGS, NULL},
	 { (char *)"map_key_edge_asdict", (PyCFunction)_wrap_map_key_edge_asdict, METH_O, NULL},
	 { (char *)"new_map_key_edge", _wrap_new_map_key_edge, METH_VARARGS, NULL},
	 { (char *)"map_key_edge_empty", (PyCFunction)_wrap_map_key_edge_empty, METH_O, NULL},
	 { (char *)"map_key_edge_size", (PyCFunction)_wrap_map_key_edge_size, METH_O, NULL},
	 { (char *)"map_key_edge_clear", (PyCFunction)_wrap_map_key_edge_clear, METH_O, NULL},
	 { (char *)"map_key_edge_swap", (PyCFunction) _wrap_map_key_edge_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_edge_get_allocator", (PyCFunction)_wrap_map_key_edge_get_allocator, METH_O, NULL},
	 { (char *)"map_key_edge_begin", (PyCFunction)_wrap_map_key_edge_begin, METH_O, NULL},
	 { (char *)"map_key_edge_end", (PyCFunction)_wrap_map_key_edge_end, METH_O, NULL},
	 { (char *)"map_key_edge_rbegin", (PyCFunction)_wrap_map_key_edge_rbegin, METH_O, NULL},
	 { (char *)"map_key_edge_rend", (PyCFunction)_wrap_map_key_edge_rend, METH_O, NULL},
	 { (char *)"map_key_edge_count", (PyCFunction) _wrap_map_key_edge_count, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_edge_erase", _wrap_map_key_edge_erase, METH_VARARGS, NULL},
	 { (char *)"map_key_edge_find", (PyCFunction) _wrap_map_key_edge_find, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_edge_lower_bound", (PyCFunction) _wrap_map_key_edge_lower_bound, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_edge_upper_bound", (PyCFunction) _wrap_map_key_edge_upper_bound, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_map_key_edge", (PyCFunction)_wrap_delete_map_key_edge, METH_O, (char *)"delete_map_key_edge(map_key_edge self)"},
	 { (char *)"map_key_edge_swigregister", map_key_edge_swigregister, METH_VARARGS, NULL},
	 { (char *)"map_key_edge_swiginit", map_key_edge_swiginit, METH_VARARGS, NULL},
	 { (char *)"map_key_node_iterator", (PyCFunction)_wrap_map_key_node_iterator, METH_O, NULL},
	 { (char *)"map_key_node___nonzero__", (PyCFunction)_wrap_map_key_node___nonzero__, METH_O, NULL},
	 { (char *)"map_key_node___bool__", (PyCFunction)_wrap_map_key_node___bool__, METH_O, NULL},
	 { (char *)"map_key_node___len__", (PyCFunction)_wrap_map_key_node___len__, METH_O, NULL},
	 { (char *)"map_key_node___getitem__", (PyCFunction) _wrap_map_key_node___getitem__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_node___delitem__", (PyCFunction) _wrap_map_key_node___delitem__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_node_has_key", (PyCFunction) _wrap_map_key_node_has_key, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_node_keys", (PyCFunction)_wrap_map_key_node_keys, METH_O, NULL},
	 { (char *)"map_key_node_values", (PyCFunction)_wrap_map_key_node_values, METH_O, NULL},
	 { (char *)"map_key_node_items", (PyCFunction)_wrap_map_key_node_items, METH_O, NULL},
	 { (char *)"map_key_node___contains__", (PyCFunction) _wrap_map_key_node___contains__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_node_key_iterator", (PyCFunction)_wrap_map_key_node_key_iterator, METH_O, NULL},
	 { (char *)"map_key_node_value_iterator", (PyCFunction)_wrap_map_key_node_value_iterator, METH_O, NULL},
	 { (char *)"map_key_node___setitem__", _wrap_map_key_node___setitem__, METH_VARARGS, NULL},
	 { (char *)"map_key_node_asdict", (PyCFunction)_wrap_map_key_node_asdict, METH_O, NULL},
	 { (char *)"new_map_key_node", _wrap_new_map_key_node, METH_VARARGS, NULL},
	 { (char *)"map_key_node_empty", (PyCFunction)_wrap_map_key_node_empty, METH_O, NULL},
	 { (char *)"map_key_node_size", (PyCFunction)_wrap_map_key_node_size, METH_O, NULL},
	 { (char *)"map_key_node_clear", (PyCFunction)_wrap_map_key_node_clear, METH_O, NULL},
	 { (char *)"map_key_node_swap", (PyCFunction) _wrap_map_key_node_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_node_get_allocator", (PyCFunction)_wrap_map_key_node_get_allocator, METH_O, NULL},
	 { (char *)"map_key_node_begin", (PyCFunction)_wrap_map_key_node_begin, METH_O, NULL},
	 { (char *)"map_key_node_end", (PyCFunction)_wrap_map_key_node_end, METH_O, NULL},
	 { (char *)"map_key_node_rbegin", (PyCFunction)_wrap_map_key_node_rbegin, METH_O, NULL},
	 { (char *)"map_key_node_rend", (PyCFunction)_wrap_map_key_node_rend, METH_O, NULL},
	 { (char *)"map_key_node_count", (PyCFunction) _wrap_map_key_node_count, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_node_erase", _wrap_map_key_node_erase, METH_VARARGS, NULL},
	 { (char *)"map_key_node_find", (PyCFunction) _wrap_map_key_node_find, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_node_lower_bound", (PyCFunction) _wrap_map_key_node_lower_bound, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"map_key_node_upper_bound", (PyCFunction) _wrap_map_key_node_upper_bound, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_map_key_node", (PyCFunction)_wrap_delete_map_key_node, METH_O, (char *)"delete_map_key_node(map_key_node self)"},
	 { (char *)"map_key_node_swigregister", map_key_node_swigregister, METH_VARARGS, NULL},
	 { (char *)"map_key_node_swiginit", map_key_node_swiginit, METH_VARARGS, NULL},
	 { (char *)"vector_polymorphism_iterator", (PyCFunction)_wrap_vector_polymorphism_iterator, METH_O, NULL},
	 { (char *)"vector_polymorphism___nonzero__", (PyCFunction)_wrap_vector_polymorphism___nonzero__, METH_O, NULL},
	 { (char *)"vector_polymorphism___bool__", (PyCFunction)_wrap_vector_polymorphism___bool__, METH_O, NULL},
	 { (char *)"vector_polymorphism___len__", (PyCFunction)_wrap_vector_polymorphism___len__, METH_O, NULL},
	 { (char *)"vector_polymorphism_pop", (PyCFunction)_wrap_vector_polymorphism_pop, METH_O, NULL},
	 { (char *)"vector_polymorphism___getslice__", (PyCFunction) _wrap_vector_polymorphism___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_polymorphism___setslice__", (PyCFunction) _wrap_vector_polymorphism___setslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_polymorphism___delslice__", (PyCFunction) _wrap_vector_polymorphism___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_polymorphism___delitem__", _wrap_vector_polymorphism___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_polymorphism___getitem__", _wrap_vector_polymorphism___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_polymorphism___setitem__", _wrap_vector_polymorphism___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_polymorphism_append", (PyCFunction) _wrap_vector_polymorphism_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_polymorphism_empty", (PyCFunction)_wrap_vector_polymorphism_empty, METH_O, NULL},
	 { (char *)"vector_polymorphism_size", (PyCFunction)_wrap_vector_polymorphism_size, METH_O, NULL},
	 { (char *)"vector_polymorphism_clear", (PyCFunction)_wrap_vector_polymorphism_clear, METH_O, NULL},
	 { (char *)"vector_polymorphism_swap", (PyCFunction) _wrap_vector_polymorphism_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_polymorphism_get_allocator", (PyCFunction)_wrap_vector_polymorphism_get_allocator, METH_O, NULL},
	 { (char *)"vector_polymorphism_begin", (PyCFunction)_wrap_vector_polymorphism_begin, METH_O, NULL},
	 { (char *)"vector_polymorphism_end", (PyCFunction)_wrap_vector_polymorphism_end, METH_O, NULL},
	 { (char *)"vector_polymorphism_rbegin", (PyCFunction)_wrap_vector_polymorphism_rbegin, METH_O, NULL},
	 { (char *)"vector_polymorphism_rend", (PyCFunction)_wrap_vector_polymorphism_rend, METH_O, NULL},
	 { (char *)"vector_polymorphism_pop_back", (PyCFunction)_wrap_vector_polymorphism_pop_back, METH_O, NULL},
	 { (char *)"vector_polymorphism_erase", _wrap_vector_polymorphism_erase, METH_VARARGS, NULL},
	 { (char *)"new_vector_polymorphism", _wrap_new_vector_polymorphism, METH_VARARGS, NULL},
	 { (char *)"vector_polymorphism_push_back", (PyCFunction) _wrap_vector_polymorphism_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_polymorphism_front", (PyCFunction)_wrap_vector_polymorphism_front, METH_O, NULL},
	 { (char *)"vector_polymorphism_back", (PyCFunction)_wrap_vector_polymorphism_back, METH_O, NULL},
	 { (char *)"vector_polymorphism_assign", (PyCFunction) _wrap_vector_polymorphism_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_polymorphism_resize", _wrap_vector_polymorphism_resize, METH_VARARGS, NULL},
	 { (char *)"vector_polymorphism_insert", _wrap_vector_polymorphism_insert, METH_VARARGS, NULL},
	 { (char *)"vector_polymorphism_reserve", (PyCFunction) _wrap_vector_polymorphism_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"vector_polymorphism_capacity", (PyCFunction)_wrap_vector_polymorphism_capacity, METH_O, NULL},
	 { (char *)"delete_vector_polymorphism", (PyCFunction)_wrap_delete_vector_polymorphism, METH_O, (char *)"delete_vector_polymorphism(vector_polymorphism self)"},
	 { (char *)"vector_polymorphism_swigregister", vector_polymorphism_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_polymorphism_swiginit", vector_polymorphism_swiginit, METH_VARARGS, NULL},
	 { (char *)"index_value_pair_index_set", _wrap_index_value_pair_index_set, METH_VARARGS, (char *)"Index"},
	 { (char *)"index_value_pair_index_get", (PyCFunction)_wrap_index_value_pair_index_get, METH_O, (char *)"Index"},
	 { (char *)"index_value_pair_val_set", _wrap_index_value_pair_val_set, METH_VARARGS, (char *)"Value"},
	 { (char *)"index_value_pair_val_get", (PyCFunction)_wrap_index_value_pair_val_get, METH_O, (char *)"Value"},
	 { (char *)"new_index_value_pair", (PyCFunction) _wrap_new_index_value_pair, METH_VARARGS | METH_KEYWORDS, (char *)"Pair of an index and a value"},
	 { (char *)"index_value_pair___str__", (PyCFunction)_wrap_index_value_pair___str__, METH_O, (char *)"index_value_pair___str__(index_value_pair self) -> char const *"},
	 { (char *)"index_value_pair___repr__", (PyCFunction)_wrap_index_value_pair___repr__, METH_O, (char *)"index_value_pair___repr__(index_value_pair self) -> char const *"},
	 { (char *)"delete_index_value_pair", (PyCFunction)_wrap_delete_index_value_pair, METH_O, (char *)"delete_index_value_pair(index_value_pair self)"},
	 { (char *)"index_value_pair_swigregister", index_value_pair_swigregister, METH_VARARGS, NULL},
	 { (char *)"index_value_pair_swiginit", index_value_pair_swiginit, METH_VARARGS, NULL},
	 { (char *)"genotype_value_pair_genotype_set", _wrap_genotype_value_pair_genotype_set, METH_VARARGS, (char *)"Genotype"},
	 { (char *)"genotype_value_pair_genotype_get", (PyCFunction)_wrap_genotype_value_pair_genotype_get, METH_O, (char *)"Genotype"},
	 { (char *)"genotype_value_pair_val_set", _wrap_genotype_value_pair_val_set, METH_VARARGS, (char *)"Value"},
	 { (char *)"genotype_value_pair_val_get", (PyCFunction)_wrap_genotype_value_pair_val_get, METH_O, (char *)"Value"},
	 { (char *)"new_genotype_value_pair", (PyCFunction) _wrap_new_genotype_value_pair, METH_VARARGS | METH_KEYWORDS, (char *)"Pair of a genotype and a value"},
	 { (char *)"genotype_value_pair___str__", (PyCFunction)_wrap_genotype_value_pair___str__, METH_O, (char *)"genotype_value_pair___str__(genotype_value_pair self) -> char const *"},
	 { (char *)"genotype_value_pair___repr__", (PyCFunction)_wrap_genotype_value_pair___repr__, METH_O, (char *)"genotype_value_pair___repr__(genotype_value_pair self) -> char const *"},
	 { (char *)"delete_genotype_value_pair", (PyCFunction)_wrap_delete_genotype_value_pair, METH_O, (char *)"delete_genotype_value_pair(genotype_value_pair self)"},
	 { (char *)"genotype_value_pair_swigregister", genotype_value_pair_swigregister, METH_VARARGS, NULL},
	 { (char *)"genotype_value_pair_swiginit", genotype_value_pair_swiginit, METH_VARARGS, NULL},
	 { (char *)"stat_mean_set", _wrap_stat_mean_set, METH_VARARGS, (char *)"Mean"},
	 { (char *)"stat_mean_get", (PyCFunction)_wrap_stat_mean_get, METH_O, (char *)"Mean"},
	 { (char *)"stat_variance_set", _wrap_stat_variance_set, METH_VARARGS, (char *)"Variance"},
	 { (char *)"stat_variance_get", (PyCFunction)_wrap_stat_variance_get, METH_O, (char *)"Variance"},
	 { (char *)"new_stat", (PyCFunction) _wrap_new_stat, METH_VARARGS | METH_KEYWORDS, (char *)"Mean and variance of a statistical distribution"},
	 { (char *)"stat___str__", (PyCFunction)_wrap_stat___str__, METH_O, (char *)"stat___str__(stat self) -> char const *"},
	 { (char *)"stat___repr__", (PyCFunction)_wrap_stat___repr__, METH_O, (char *)"stat___repr__(stat self) -> char const *"},
	 { (char *)"delete_stat", (PyCFunction)_wrap_delete_stat, METH_O, (char *)"delete_stat(stat self)"},
	 { (char *)"stat_swigregister", stat_swigregister, METH_VARARGS, NULL},
	 { (char *)"stat_swiginit", stat_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_haploid_lowd", (PyCFunction) _wrap_new_haploid_lowd, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Construct a low-dimensional population with certain parameters.\n"
		"\n"
		"Parameters:\n"
		"    - L : number of loci (at least 1)\n"
		"    - rng_seed : seed for the random number generator    \n"
		"\n"
		""},
	 { (char *)"delete_haploid_lowd", (PyCFunction)_wrap_delete_haploid_lowd, METH_O, (char *)"delete_haploid_lowd(haploid_lowd self)"},
	 { (char *)"haploid_lowd_carrying_capacity_set", _wrap_haploid_lowd_carrying_capacity_set, METH_VARARGS, (char *)"current carrying capacity of the environment"},
	 { (char *)"haploid_lowd_carrying_capacity_get", (PyCFunction)_wrap_haploid_lowd_carrying_capacity_get, METH_O, (char *)"current carrying capacity of the environment"},
	 { (char *)"haploid_lowd_outcrossing_rate_set", _wrap_haploid_lowd_outcrossing_rate_set, METH_VARARGS, (char *)"outcrossing rate (probability of sexual reproduction per generation)"},
	 { (char *)"haploid_lowd_outcrossing_rate_get", (PyCFunction)_wrap_haploid_lowd_outcrossing_rate_get, METH_O, (char *)"outcrossing rate (probability of sexual reproduction per generation)"},
	 { (char *)"haploid_lowd_circular_set", _wrap_haploid_lowd_circular_set, METH_VARARGS, (char *)"is the genome circular?"},
	 { (char *)"haploid_lowd_circular_get", (PyCFunction)_wrap_haploid_lowd_circular_get, METH_O, (char *)"is the genome circular?"},
	 { (char *)"haploid_lowd__get_mutation_rate", (PyCFunction) _wrap_haploid_lowd__get_mutation_rate, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_lowd__get_mutation_rate(haploid_lowd self, int locus, int direction) -> double"},
	 { (char *)"haploid_lowd__get_recombination_model", (PyCFunction)_wrap_haploid_lowd__get_recombination_model, METH_O, (char *)"\n"
		"Model of recombination to use\n"
		"\n"
		"Available values:\n"
		"\n"
		"   - FFPopSim.FREE_RECOMBINATION: free shuffling between parents\n"
		"   - FFPopSim.CROSSOVERS: block recombination with crossover probability\n"
		"   - FFPopSim.SINGLE_CROSSOVER: block recombination with crossover probability\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_recombination_rate", (PyCFunction) _wrap_haploid_lowd_get_recombination_rate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the recombination rate between the specified locus and the following one.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_set_allele_frequencies", (PyCFunction) _wrap_haploid_lowd_set_allele_frequencies, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Initialize the population in linkage equilibrium with specified allele frequencies.\n"
		"\n"
		"Parameters:\n"
		"   - frequencies: an array of length L with all allele frequencies\n"
		"   - N: set the population size and, if still unset, the carrying\n"
		"     capacity to this value\n"
		"\n"
		".. note:: the population size is only used for resampling and has therefore\n"
		"          no effect on the speed of the simulation.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_set_wildtype", (PyCFunction) _wrap_haploid_lowd_set_wildtype, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Initialize population of N individuals with the - allele at all loci (wildtype)\n"
		"\n"
		"Parameters:\n"
		"   - N: the number of individuals\n"
		"\n"
		".. note:: the carrying capacity is set to the same value if still unset.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd__set_recombination_model", (PyCFunction) _wrap_haploid_lowd__set_recombination_model, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_lowd__set_recombination_model(haploid_lowd self, int rec_model) -> int"},
	 { (char *)"haploid_lowd__set_recombination_rates", (PyCFunction) _wrap_haploid_lowd__set_recombination_rates, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_lowd__set_recombination_rates(haploid_lowd self, double * rec_rates, int rec_model=-1) -> int"},
	 { (char *)"haploid_lowd_evolve", (PyCFunction) _wrap_haploid_lowd_evolve, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Evolve for some generations\n"
		"\n"
		"Parameters:\n"
		"    - gen: number of generations to evolve the population, defaults to one\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_evolve_norec", (PyCFunction) _wrap_haploid_lowd_evolve_norec, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Evolve for some generations without recombination\n"
		"\n"
		"Parameters:\n"
		"    - gen: number of generations to evolve the population\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_evolve_deterministic", (PyCFunction) _wrap_haploid_lowd_evolve_deterministic, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Evolve for some generations deterministically (skips the resampling)\n"
		"\n"
		"Parameters:\n"
		"    - gen: number of generations to evolve the population\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_genotype_frequency", (PyCFunction) _wrap_haploid_lowd_get_genotype_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the frequency of a genotype\n"
		"\n"
		"Parameters:\n"
		"    - genotype: genotype, whose the frequency is to be returned\n"
		"\n"
		"Returns:\n"
		"    - the frequency of the genotype\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_allele_frequency", (PyCFunction) _wrap_haploid_lowd_get_allele_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the frequency of the + allele\n"
		"\n"
		"Parameters:\n"
		"    - locus: locus, at which the frequency of the + allele is to be computed\n"
		"\n"
		"Returns:\n"
		"    - the frequency of the + allele, :math:`\\nu_i := \\frac{1 + \\left<s_i\\right>}{2}`, where :math:`s_i \\in \\{-1, 1\\}`.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_pair_frequency", (PyCFunction) _wrap_haploid_lowd_get_pair_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the frequency of genotypes with the + allele at both loci.\n"
		"\n"
		"Parameters:\n"
		"    - locus1: first locus\n"
		"    - locus2: second locus\n"
		"\n"
		"Returns:\n"
		"    - the joint frequency of the + alleles\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_chi", (PyCFunction) _wrap_haploid_lowd_get_chi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get chi of an allele in the -/+ basis\n"
		"\n"
		"Parameters:\n"
		"    - locus: locus whose chi is to be computed\n"
		"\n"
		"Returns:\n"
		"    - the chi of that allele, :math:`\\chi_i := \\left<s_i\\right>`, where :math:`s_i \\in \\{-1, 1\\}`.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_chi2", (PyCFunction) _wrap_haploid_lowd_get_chi2, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get :math:`\\chi_{ij}`\n"
		"\n"
		"Parameters:\n"
		"    - locus1: first locus\n"
		"    - locus2: second locus\n"
		"\n"
		"Returns:\n"
		"    - the linkage disequilibiurm between them, i.e. :math:`\\chi_{ij} := \\left<s_i s_j\\right> - \\chi_i \\cdot \\chi_j`.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_LD", (PyCFunction) _wrap_haploid_lowd_get_LD, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get linkage disequilibrium\n"
		"\n"
		"Parameters:\n"
		"    - locus1: first locus\n"
		"    - locus2: second locus\n"
		"\n"
		"Returns:\n"
		"    - the linkage disequilibiurm between them, i.e. :math:`D_{ij} := 1 / 4 \\left[\\left<s_i s_j\\right> - \\chi_i \\cdot \\chi_j\\right]`.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_moment", (PyCFunction) _wrap_haploid_lowd_get_moment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get moment of two alleles in the -/+ basis\n"
		"\n"
		"Parameters:\n"
		"    - locus1: first locus\n"
		"    - locus2: second locus\n"
		"\n"
		"Returns:\n"
		"    - the second moment, i.e. :math:`\\left<s_i s_j\\right>`, where :math:`s_i, s_j \\in \\{-1, 1\\}`.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_genotype_entropy", (PyCFunction)_wrap_haploid_lowd_genotype_entropy, METH_O, (char *)"\n"
		"Get the genotype entropy of the population\n"
		"\n"
		".. note:: the genotype entropy is defined as :math:`-\\sum_{i=0}^{2^L} p_i \\log p_i`.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_allele_entropy", (PyCFunction)_wrap_haploid_lowd_allele_entropy, METH_O, (char *)"\n"
		"get the allele entropy of the population\n"
		"\n"
		".. note:: the allele entropy is defined as :math:`-\\sum_{i=0}^{L} \\left[\\nu_i\\log \\nu_i + (1-\\nu_i)\\log(1-\\nu_i)\\right]`.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_fitness", (PyCFunction) _wrap_haploid_lowd_get_fitness, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get fitness values of a genotype\n"
		"\n"
		"Parameters:\n"
		"    - genotype: genotype whose fitness is to be calculated. This can either be an integer or in binary format, e.g. 5 = 0b101 \n"
		"\n"
		"Returns:\n"
		"    - the fitness of that genotype.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_get_fitness_statistics", (PyCFunction)_wrap_haploid_lowd_get_fitness_statistics, METH_O, (char *)"haploid_lowd_get_fitness_statistics(haploid_lowd self) -> stat"},
	 { (char *)"haploid_lowd___str__", (PyCFunction)_wrap_haploid_lowd___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"haploid_lowd___repr__", (PyCFunction)_wrap_haploid_lowd___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"haploid_lowd_L_get", (PyCFunction)_wrap_haploid_lowd_L_get, METH_O, (char *)"Number of loci (read-only)"},
	 { (char *)"haploid_lowd_number_of_loci_get", (PyCFunction)_wrap_haploid_lowd_number_of_loci_get, METH_O, (char *)"Number of loci (read-only)"},
	 { (char *)"haploid_lowd_N_get", (PyCFunction)_wrap_haploid_lowd_N_get, METH_O, (char *)"Population size (read-only)"},
	 { (char *)"haploid_lowd_population_size_get", (PyCFunction)_wrap_haploid_lowd_population_size_get, METH_O, (char *)"Population size (read-only)"},
	 { (char *)"haploid_lowd_generation_set", _wrap_haploid_lowd_generation_set, METH_VARARGS, (char *)"Current generation (read-only)"},
	 { (char *)"haploid_lowd_generation_get", (PyCFunction)_wrap_haploid_lowd_generation_get, METH_O, (char *)"Current generation (read-only)"},
	 { (char *)"haploid_lowd__set_genotypes", (PyCFunction) _wrap_haploid_lowd__set_genotypes, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_lowd__set_genotypes(haploid_lowd self, int len1, int len2) -> int"},
	 { (char *)"haploid_lowd__set_mutation_rates", (PyCFunction) _wrap_haploid_lowd__set_mutation_rates, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_lowd__set_mutation_rates(haploid_lowd self, double * IN_ARRAY2) -> int"},
	 { (char *)"haploid_lowd_get_fitnesses", (PyCFunction) _wrap_haploid_lowd_get_fitnesses, METH_VARARGS | METH_KEYWORDS, (char *)"Get the fitness of all possible genotypes."},
	 { (char *)"haploid_lowd__set_fitness_func", (PyCFunction) _wrap_haploid_lowd__set_fitness_func, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_lowd__set_fitness_func(haploid_lowd self, int len1, int len2) -> int"},
	 { (char *)"haploid_lowd__set_fitness_coeff", (PyCFunction) _wrap_haploid_lowd__set_fitness_coeff, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_lowd__set_fitness_coeff(haploid_lowd self, int len1, int len2) -> int"},
	 { (char *)"haploid_lowd_set_fitness_additive", (PyCFunction) _wrap_haploid_lowd_set_fitness_additive, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Set an additive fitness landscape. Coefficients obey +/- convention.\n"
		"\n"
		"Parameters:\n"
		"    - coefficients: array/list of additive fitness coefficients. It must have length L.\n"
		"\n"
		""},
	 { (char *)"haploid_lowd_swigregister", haploid_lowd_swigregister, METH_VARARGS, NULL},
	 { (char *)"haploid_lowd_swiginit", haploid_lowd_swiginit, METH_VARARGS, NULL},
	 { (char *)"clone_genotype_set", _wrap_clone_genotype_set, METH_VARARGS, (char *)"Genotype of the clone"},
	 { (char *)"clone_genotype_get", (PyCFunction)_wrap_clone_genotype_get, METH_O, (char *)"Genotype of the clone"},
	 { (char *)"clone_fitness_set", _wrap_clone_fitness_set, METH_VARARGS, (char *)"Fitness of the clone"},
	 { (char *)"clone_fitness_get", (PyCFunction)_wrap_clone_fitness_get, METH_O, (char *)"Fitness of the clone"},
	 { (char *)"clone_clone_size_set", _wrap_clone_clone_size_set, METH_VARARGS, (char *)"Number of individuals of the clone"},
	 { (char *)"clone_clone_size_get", (PyCFunction)_wrap_clone_clone_size_get, METH_O, (char *)"Number of individuals of the clone"},
	 { (char *)"new_clone", (PyCFunction) _wrap_new_clone, METH_VARARGS | METH_KEYWORDS, (char *)"Clone of isogenetic individuals"},
	 { (char *)"clone___eq__", (PyCFunction) _wrap_clone___eq__, METH_VARARGS | METH_KEYWORDS, (char *)"clone___eq__(clone self, clone other) -> bool"},
	 { (char *)"clone___ne__", (PyCFunction) _wrap_clone___ne__, METH_VARARGS | METH_KEYWORDS, (char *)"clone___ne__(clone self, clone other) -> bool"},
	 { (char *)"clone___lt__", (PyCFunction) _wrap_clone___lt__, METH_VARARGS | METH_KEYWORDS, (char *)"clone___lt__(clone self, clone other) -> bool"},
	 { (char *)"clone___gt__", (PyCFunction) _wrap_clone___gt__, METH_VARARGS | METH_KEYWORDS, (char *)"clone___gt__(clone self, clone other) -> bool"},
	 { (char *)"clone___str__", (PyCFunction)_wrap_clone___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"clone___repr__", (PyCFunction)_wrap_clone___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"clone_number_of_traits_get", (PyCFunction)_wrap_clone_number_of_traits_get, METH_O, (char *)"Number of traits (read-only)"},
	 { (char *)"clone__get_trait", (PyCFunction) _wrap_clone__get_trait, METH_VARARGS | METH_KEYWORDS, (char *)"clone__get_trait(clone self, int DIM1)"},
	 { (char *)"delete_clone", (PyCFunction)_wrap_delete_clone, METH_O, (char *)"delete_clone(clone self)"},
	 { (char *)"clone_swigregister", clone_swigregister, METH_VARARGS, NULL},
	 { (char *)"clone_swiginit", clone_swiginit, METH_VARARGS, NULL},
	 { (char *)"tree_key_index_set", _wrap_tree_key_index_set, METH_VARARGS, (char *)"tree_key_index_set(tree_key self, int index)"},
	 { (char *)"tree_key_index_get", (PyCFunction)_wrap_tree_key_index_get, METH_O, (char *)"tree_key_index_get(tree_key self) -> int"},
	 { (char *)"tree_key_age_set", _wrap_tree_key_age_set, METH_VARARGS, (char *)"tree_key_age_set(tree_key self, int age)"},
	 { (char *)"tree_key_age_get", (PyCFunction)_wrap_tree_key_age_get, METH_O, (char *)"tree_key_age_get(tree_key self) -> int"},
	 { (char *)"tree_key___eq__", (PyCFunction) _wrap_tree_key___eq__, METH_VARARGS | METH_KEYWORDS, (char *)"tree_key___eq__(tree_key self, tree_key other) -> bool"},
	 { (char *)"tree_key___ne__", (PyCFunction) _wrap_tree_key___ne__, METH_VARARGS | METH_KEYWORDS, (char *)"tree_key___ne__(tree_key self, tree_key other) -> bool"},
	 { (char *)"tree_key___lt__", (PyCFunction) _wrap_tree_key___lt__, METH_VARARGS | METH_KEYWORDS, (char *)"tree_key___lt__(tree_key self, tree_key other) -> bool"},
	 { (char *)"tree_key___gt__", (PyCFunction) _wrap_tree_key___gt__, METH_VARARGS | METH_KEYWORDS, (char *)"tree_key___gt__(tree_key self, tree_key other) -> bool"},
	 { (char *)"new_tree_key", (PyCFunction) _wrap_new_tree_key, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Initialize new tree_key.\n"
		"\n"
		"Parameters:\n"
		"   - index: index of the key\n"
		"   - age: age of the key\n"
		"\n"
		""},
	 { (char *)"tree_key___str__", (PyCFunction)_wrap_tree_key___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"tree_key___repr__", (PyCFunction)_wrap_tree_key___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"delete_tree_key", (PyCFunction)_wrap_delete_tree_key, METH_O, (char *)"delete_tree_key(tree_key self)"},
	 { (char *)"tree_key_swigregister", tree_key_swigregister, METH_VARARGS, NULL},
	 { (char *)"tree_key_swiginit", tree_key_swiginit, METH_VARARGS, NULL},
	 { (char *)"tree_step_pos_set", _wrap_tree_step_pos_set, METH_VARARGS, (char *)"tree_step_pos_set(tree_step self, int pos)"},
	 { (char *)"tree_step_pos_get", (PyCFunction)_wrap_tree_step_pos_get, METH_O, (char *)"tree_step_pos_get(tree_step self) -> int"},
	 { (char *)"tree_step_step_set", _wrap_tree_step_step_set, METH_VARARGS, (char *)"tree_step_step_set(tree_step self, int step)"},
	 { (char *)"tree_step_step_get", (PyCFunction)_wrap_tree_step_step_get, METH_O, (char *)"tree_step_step_get(tree_step self) -> int"},
	 { (char *)"tree_step___lt__", (PyCFunction) _wrap_tree_step___lt__, METH_VARARGS | METH_KEYWORDS, (char *)"tree_step___lt__(tree_step self, tree_step other) -> bool"},
	 { (char *)"tree_step___gt__", (PyCFunction) _wrap_tree_step___gt__, METH_VARARGS | METH_KEYWORDS, (char *)"tree_step___gt__(tree_step self, tree_step other) -> bool"},
	 { (char *)"tree_step___eq__", (PyCFunction) _wrap_tree_step___eq__, METH_VARARGS | METH_KEYWORDS, (char *)"tree_step___eq__(tree_step self, tree_step other) -> bool"},
	 { (char *)"new_tree_step", (PyCFunction) _wrap_new_tree_step, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Initialize new step.\n"
		"\n"
		"Parameters:\n"
		"   - pos: position\n"
		"   - step: length of step\n"
		"\n"
		""},
	 { (char *)"tree_step___str__", (PyCFunction)_wrap_tree_step___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"tree_step___repr__", (PyCFunction)_wrap_tree_step___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"delete_tree_step", (PyCFunction)_wrap_delete_tree_step, METH_O, (char *)"delete_tree_step(tree_step self)"},
	 { (char *)"tree_step_swigregister", tree_step_swigregister, METH_VARARGS, NULL},
	 { (char *)"tree_step_swiginit", tree_step_swiginit, METH_VARARGS, NULL},
	 { (char *)"tree_node_parent_node_set", _wrap_tree_node_parent_node_set, METH_VARARGS, (char *)"tree_node_parent_node_set(tree_node self, tree_key parent_node)"},
	 { (char *)"tree_node_parent_node_get", (PyCFunction)_wrap_tree_node_parent_node_get, METH_O, (char *)"tree_node_parent_node_get(tree_node self) -> tree_key"},
	 { (char *)"tree_node__child_edges_set", _wrap_tree_node__child_edges_set, METH_VARARGS, (char *)"tree_node__child_edges_set(tree_node self, list_tree_key child_edges)"},
	 { (char *)"tree_node__child_edges_get", (PyCFunction)_wrap_tree_node__child_edges_get, METH_O, (char *)"tree_node__child_edges_get(tree_node self) -> list_tree_key"},
	 { (char *)"tree_node_fitness_set", _wrap_tree_node_fitness_set, METH_VARARGS, (char *)"tree_node_fitness_set(tree_node self, double fitness)"},
	 { (char *)"tree_node_fitness_get", (PyCFunction)_wrap_tree_node_fitness_get, METH_O, (char *)"tree_node_fitness_get(tree_node self) -> double"},
	 { (char *)"tree_node_own_key_set", _wrap_tree_node_own_key_set, METH_VARARGS, (char *)"tree_node_own_key_set(tree_node self, tree_key own_key)"},
	 { (char *)"tree_node_own_key_get", (PyCFunction)_wrap_tree_node_own_key_get, METH_O, (char *)"tree_node_own_key_get(tree_node self) -> tree_key"},
	 { (char *)"tree_node__weight_distribution_set", _wrap_tree_node__weight_distribution_set, METH_VARARGS, (char *)"tree_node__weight_distribution_set(tree_node self, vector_tree_step weight_distribution)"},
	 { (char *)"tree_node__weight_distribution_get", (PyCFunction)_wrap_tree_node__weight_distribution_get, METH_O, (char *)"tree_node__weight_distribution_get(tree_node self) -> vector_tree_step"},
	 { (char *)"tree_node_number_of_offspring_set", _wrap_tree_node_number_of_offspring_set, METH_VARARGS, (char *)"tree_node_number_of_offspring_set(tree_node self, int number_of_offspring)"},
	 { (char *)"tree_node_number_of_offspring_get", (PyCFunction)_wrap_tree_node_number_of_offspring_get, METH_O, (char *)"tree_node_number_of_offspring_get(tree_node self) -> int"},
	 { (char *)"tree_node_clone_size_set", _wrap_tree_node_clone_size_set, METH_VARARGS, (char *)"tree_node_clone_size_set(tree_node self, int clone_size)"},
	 { (char *)"tree_node_clone_size_get", (PyCFunction)_wrap_tree_node_clone_size_get, METH_O, (char *)"tree_node_clone_size_get(tree_node self) -> int"},
	 { (char *)"tree_node___str__", (PyCFunction)_wrap_tree_node___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"tree_node___repr__", (PyCFunction)_wrap_tree_node___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"tree_node__get_crossover_chunk", (PyCFunction) _wrap_tree_node__get_crossover_chunk, METH_VARARGS | METH_KEYWORDS, (char *)"tree_node__get_crossover_chunk(tree_node self, int i) -> int"},
	 { (char *)"new_tree_node", (PyCFunction)_wrap_new_tree_node, METH_NOARGS, (char *)"Node of a phylogenetic tree"},
	 { (char *)"delete_tree_node", (PyCFunction)_wrap_delete_tree_node, METH_O, (char *)"delete_tree_node(tree_node self)"},
	 { (char *)"tree_node_swigregister", tree_node_swigregister, METH_VARARGS, NULL},
	 { (char *)"tree_node_swiginit", tree_node_swiginit, METH_VARARGS, NULL},
	 { (char *)"tree_edge_parent_node_set", _wrap_tree_edge_parent_node_set, METH_VARARGS, (char *)"tree_edge_parent_node_set(tree_edge self, tree_key parent_node)"},
	 { (char *)"tree_edge_parent_node_get", (PyCFunction)_wrap_tree_edge_parent_node_get, METH_O, (char *)"tree_edge_parent_node_get(tree_edge self) -> tree_key"},
	 { (char *)"tree_edge_own_key_set", _wrap_tree_edge_own_key_set, METH_VARARGS, (char *)"tree_edge_own_key_set(tree_edge self, tree_key own_key)"},
	 { (char *)"tree_edge_own_key_get", (PyCFunction)_wrap_tree_edge_own_key_get, METH_O, (char *)"tree_edge_own_key_get(tree_edge self) -> tree_key"},
	 { (char *)"tree_edge_length_set", _wrap_tree_edge_length_set, METH_VARARGS, (char *)"tree_edge_length_set(tree_edge self, int length)"},
	 { (char *)"tree_edge_length_get", (PyCFunction)_wrap_tree_edge_length_get, METH_O, (char *)"tree_edge_length_get(tree_edge self) -> int"},
	 { (char *)"tree_edge_number_of_offspring_set", _wrap_tree_edge_number_of_offspring_set, METH_VARARGS, (char *)"tree_edge_number_of_offspring_set(tree_edge self, int number_of_offspring)"},
	 { (char *)"tree_edge_number_of_offspring_get", (PyCFunction)_wrap_tree_edge_number_of_offspring_get, METH_O, (char *)"tree_edge_number_of_offspring_get(tree_edge self) -> int"},
	 { (char *)"tree_edge___str__", (PyCFunction)_wrap_tree_edge___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"tree_edge___repr__", (PyCFunction)_wrap_tree_edge___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"tree_edge__get_segment_chunk", (PyCFunction) _wrap_tree_edge__get_segment_chunk, METH_VARARGS | METH_KEYWORDS, (char *)"tree_edge__get_segment_chunk(tree_edge self, int i) -> int"},
	 { (char *)"new_tree_edge", (PyCFunction)_wrap_new_tree_edge, METH_NOARGS, (char *)"Edge of a phylogenetic tree"},
	 { (char *)"delete_tree_edge", (PyCFunction)_wrap_delete_tree_edge, METH_O, (char *)"delete_tree_edge(tree_edge self)"},
	 { (char *)"tree_edge_swigregister", tree_edge_swigregister, METH_VARARGS, NULL},
	 { (char *)"tree_edge_swiginit", tree_edge_swiginit, METH_VARARGS, NULL},
	 { (char *)"polymorphism_birth_set", _wrap_polymorphism_birth_set, METH_VARARGS, (char *)"Birth generation"},
	 { (char *)"polymorphism_birth_get", (PyCFunction)_wrap_polymorphism_birth_get, METH_O, (char *)"Birth generation"},
	 { (char *)"polymorphism_sweep_time_set", _wrap_polymorphism_sweep_time_set, METH_VARARGS, (char *)"Sweep time [in generations]"},
	 { (char *)"polymorphism_sweep_time_get", (PyCFunction)_wrap_polymorphism_sweep_time_get, METH_O, (char *)"Sweep time [in generations]"},
	 { (char *)"polymorphism_effect_set", _wrap_polymorphism_effect_set, METH_VARARGS, (char *)"polymorphism_effect_set(polymorphism self, double effect)"},
	 { (char *)"polymorphism_effect_get", (PyCFunction)_wrap_polymorphism_effect_get, METH_O, (char *)"polymorphism_effect_get(polymorphism self) -> double"},
	 { (char *)"polymorphism_fitness_set", _wrap_polymorphism_fitness_set, METH_VARARGS, (char *)"Relative fitness of the clone at birth"},
	 { (char *)"polymorphism_fitness_get", (PyCFunction)_wrap_polymorphism_fitness_get, METH_O, (char *)"Relative fitness of the clone at birth"},
	 { (char *)"polymorphism_fitness_variance_set", _wrap_polymorphism_fitness_variance_set, METH_VARARGS, (char *)"Fitness variance of the population at birth"},
	 { (char *)"polymorphism_fitness_variance_get", (PyCFunction)_wrap_polymorphism_fitness_variance_get, METH_O, (char *)"Fitness variance of the population at birth"},
	 { (char *)"new_polymorphism", (PyCFunction) _wrap_new_polymorphism, METH_VARARGS | METH_KEYWORDS, (char *)"Polymorphism history"},
	 { (char *)"polymorphism___str__", (PyCFunction)_wrap_polymorphism___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"polymorphism___repr__", (PyCFunction)_wrap_polymorphism___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"delete_polymorphism", (PyCFunction)_wrap_delete_polymorphism, METH_O, (char *)"delete_polymorphism(polymorphism self)"},
	 { (char *)"polymorphism_swigregister", polymorphism_swigregister, METH_VARARGS, NULL},
	 { (char *)"polymorphism_swiginit", polymorphism_swiginit, METH_VARARGS, NULL},
	 { (char *)"rooted_tree__edges_set", _wrap_rooted_tree__edges_set, METH_VARARGS, (char *)"rooted_tree__edges_set(rooted_tree self, map_key_edge edges)"},
	 { (char *)"rooted_tree__edges_get", (PyCFunction)_wrap_rooted_tree__edges_get, METH_O, (char *)"rooted_tree__edges_get(rooted_tree self) -> map_key_edge"},
	 { (char *)"rooted_tree__nodes_set", _wrap_rooted_tree__nodes_set, METH_VARARGS, (char *)"rooted_tree__nodes_set(rooted_tree self, map_key_node nodes)"},
	 { (char *)"rooted_tree__nodes_get", (PyCFunction)_wrap_rooted_tree__nodes_get, METH_O, (char *)"rooted_tree__nodes_get(rooted_tree self) -> map_key_node"},
	 { (char *)"rooted_tree__leafs_set", _wrap_rooted_tree__leafs_set, METH_VARARGS, (char *)"rooted_tree__leafs_set(rooted_tree self, vector_tree_key leafs)"},
	 { (char *)"rooted_tree__leafs_get", (PyCFunction)_wrap_rooted_tree__leafs_get, METH_O, (char *)"rooted_tree__leafs_get(rooted_tree self) -> vector_tree_key"},
	 { (char *)"rooted_tree_root_set", _wrap_rooted_tree_root_set, METH_VARARGS, (char *)"rooted_tree_root_set(rooted_tree self, tree_key root)"},
	 { (char *)"rooted_tree_root_get", (PyCFunction)_wrap_rooted_tree_root_get, METH_O, (char *)"rooted_tree_root_get(rooted_tree self) -> tree_key"},
	 { (char *)"rooted_tree_MRCA_set", _wrap_rooted_tree_MRCA_set, METH_VARARGS, (char *)"rooted_tree_MRCA_set(rooted_tree self, tree_key MRCA)"},
	 { (char *)"rooted_tree_MRCA_get", (PyCFunction)_wrap_rooted_tree_MRCA_get, METH_O, (char *)"rooted_tree_MRCA_get(rooted_tree self) -> tree_key"},
	 { (char *)"new_rooted_tree", (PyCFunction)_wrap_new_rooted_tree, METH_NOARGS, (char *)"\n"
		"Rooted phylogenetic tree.\n"
		"\n"
		"This class is used to represent the phylogenetic tree of a single locus.\n"
		"It is possible to print the tree in Newick format, to get the subtree\n"
		"spanned by some of the leaves, and to look at the tree nodes and edges.\n"
		"\n"
		""},
	 { (char *)"delete_rooted_tree", (PyCFunction)_wrap_delete_rooted_tree, METH_O, (char *)"delete_rooted_tree(rooted_tree self)"},
	 { (char *)"rooted_tree_external_branch_length", (PyCFunction)_wrap_rooted_tree_external_branch_length, METH_O, (char *)"\n"
		"Measure the length of the external branches.\n"
		"\n"
		"Returns:\n"
		"   - length: the sum of the lengths of the external branches.\n"
		"\n"
		""},
	 { (char *)"rooted_tree_total_branch_length", (PyCFunction)_wrap_rooted_tree_total_branch_length, METH_O, (char *)"\n"
		"Measure the length of the branches.\n"
		"\n"
		"Returns:\n"
		"   - length: the sum of the lengths of all branches.\n"
		"\n"
		""},
	 { (char *)"rooted_tree_calc_weight_distribution", (PyCFunction) _wrap_rooted_tree_calc_weight_distribution, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Recalculate the weight of some internal nodes.\n"
		"\n"
		"Parameters:\n"
		"   - subtree_root: the node whose hanging subtree is recalculated\n"
		"\n"
		"Returns:\n"
		"   - error code: zero if successful\n"
		"\n"
		""},
	 { (char *)"rooted_tree_print_newick", (PyCFunction)_wrap_rooted_tree_print_newick, METH_O, (char *)"rooted_tree_print_newick(rooted_tree self) -> std::string"},
	 { (char *)"rooted_tree_subtree_newick", (PyCFunction) _wrap_rooted_tree_subtree_newick, METH_VARARGS | METH_KEYWORDS, (char *)"rooted_tree_subtree_newick(rooted_tree self, tree_key root) -> std::string"},
	 { (char *)"rooted_tree_print_weight_distribution", (PyCFunction) _wrap_rooted_tree_print_weight_distribution, METH_VARARGS | METH_KEYWORDS, (char *)"rooted_tree_print_weight_distribution(rooted_tree self, tree_key node_key) -> std::string"},
	 { (char *)"rooted_tree___str__", (PyCFunction)_wrap_rooted_tree___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"rooted_tree___repr__", (PyCFunction)_wrap_rooted_tree___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"rooted_tree__ancestors_at_age", (PyCFunction) _wrap_rooted_tree__ancestors_at_age, METH_VARARGS | METH_KEYWORDS, (char *)"rooted_tree__ancestors_at_age(rooted_tree self, int age, tree_key subtree_root) -> vector_tree_key"},
	 { (char *)"rooted_tree_create_subtree_from_keys", (PyCFunction) _wrap_rooted_tree_create_subtree_from_keys, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Create a subtree from a list of leaves.\n"
		"\n"
		"Parameters:\n"
		"   - leaves: the leaves used to contruct the subtree\n"
		"\n"
		"Returns:\n"
		"   - subtree: the subtree spanned by those leaves.\n"
		"\n"
		".. note:: leaves can be a Python list or a numpy array of tree_key, or a vector_tree_key.\n"
		"\n"
		""},
	 { (char *)"rooted_tree_swigregister", rooted_tree_swigregister, METH_VARARGS, NULL},
	 { (char *)"rooted_tree_swiginit", rooted_tree_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_multi_locus_genealogy", (PyCFunction)_wrap_new_multi_locus_genealogy, METH_NOARGS, (char *)"Default constructor"},
	 { (char *)"delete_multi_locus_genealogy", (PyCFunction)_wrap_delete_multi_locus_genealogy, METH_O, (char *)"delete_multi_locus_genealogy(multi_locus_genealogy self)"},
	 { (char *)"multi_locus_genealogy_track_locus", (PyCFunction) _wrap_multi_locus_genealogy_track_locus, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Start tracking a new locus.\n"
		"\n"
		"Parameters:\n"
		"   - new_locus: locus to be tracked\n"
		"\n"
		".. note:: the locus gets appended to the 'loci' array.\n"
		"\n"
		""},
	 { (char *)"multi_locus_genealogy_reset", (PyCFunction)_wrap_multi_locus_genealogy_reset, METH_O, (char *)"Reset (empty) the genealogy."},
	 { (char *)"multi_locus_genealogy_reset_but_loci", (PyCFunction)_wrap_multi_locus_genealogy_reset_but_loci, METH_O, (char *)"multi_locus_genealogy_reset_but_loci(multi_locus_genealogy self)"},
	 { (char *)"multi_locus_genealogy___str__", (PyCFunction)_wrap_multi_locus_genealogy___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"multi_locus_genealogy___repr__", (PyCFunction)_wrap_multi_locus_genealogy___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"multi_locus_genealogy__get_number_of_loci", (PyCFunction)_wrap_multi_locus_genealogy__get_number_of_loci, METH_O, (char *)"multi_locus_genealogy__get_number_of_loci(multi_locus_genealogy self) -> int"},
	 { (char *)"multi_locus_genealogy__get_loci", (PyCFunction) _wrap_multi_locus_genealogy__get_loci, METH_VARARGS | METH_KEYWORDS, (char *)"multi_locus_genealogy__get_loci(multi_locus_genealogy self, int DIM1)"},
	 { (char *)"multi_locus_genealogy_get_tree", (PyCFunction) _wrap_multi_locus_genealogy_get_tree, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the genealogy tree for a certain locus.\n"
		"\n"
		"Parameters:\n"
		"   - locus: site whose tree is being returned\n"
		"\n"
		".. note:: if you want to know what loci are being tracked, look into the 'loci'\n"
		"          attribute.\n"
		"\n"
		""},
	 { (char *)"multi_locus_genealogy_swigregister", multi_locus_genealogy_swigregister, METH_VARARGS, NULL},
	 { (char *)"multi_locus_genealogy_swiginit", multi_locus_genealogy_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_haploid_highd", (PyCFunction) _wrap_new_haploid_highd, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Construct a high-dimensional population with certain parameters.\n"
		"\n"
		"Parameters:\n"
		"   - L: number of loci\n"
		"   - rng_seed: seed for the random generator. If zero (default) pick a random number\n"
		"   - number_of_traits: number of phenotypic traits, defaults to one\n"
		"   - all_polymorphic: option to use an infinite-sites model tracking ancestral alleles\n"
		"                      (only available with a single phenotypic trait and zero mutation rate)\n"
		"\n"
		""},
	 { (char *)"delete_haploid_highd", (PyCFunction)_wrap_delete_haploid_highd, METH_O, (char *)"delete_haploid_highd(haploid_highd self)"},
	 { (char *)"haploid_highd_carrying_capacity_set", _wrap_haploid_highd_carrying_capacity_set, METH_VARARGS, (char *)"current carrying capacity of the environment"},
	 { (char *)"haploid_highd_carrying_capacity_get", (PyCFunction)_wrap_haploid_highd_carrying_capacity_get, METH_O, (char *)"current carrying capacity of the environment"},
	 { (char *)"haploid_highd_outcrossing_rate_set", _wrap_haploid_highd_outcrossing_rate_set, METH_VARARGS, (char *)"outcrossing rate (probability of sexual reproduction per generation)"},
	 { (char *)"haploid_highd_outcrossing_rate_get", (PyCFunction)_wrap_haploid_highd_outcrossing_rate_get, METH_O, (char *)"outcrossing rate (probability of sexual reproduction per generation)"},
	 { (char *)"haploid_highd_crossover_rate_set", _wrap_haploid_highd_crossover_rate_set, METH_VARARGS, (char *)"crossover rate (probability of crossover per site per generation)"},
	 { (char *)"haploid_highd_crossover_rate_get", (PyCFunction)_wrap_haploid_highd_crossover_rate_get, METH_O, (char *)"crossover rate (probability of crossover per site per generation)"},
	 { (char *)"haploid_highd_recombination_model_set", _wrap_haploid_highd_recombination_model_set, METH_VARARGS, (char *)"\n"
		"Model of recombination to use\n"
		"\n"
		"Available values:\n"
		"   - FFPopSim.FREE_RECOMBINATION: free reassortment of all loci between parents\n"
		"   - FFPopSim.CROSSOVERS: linear chromosome with crossover probability per locus\n"
		"\n"
		""},
	 { (char *)"haploid_highd_recombination_model_get", (PyCFunction)_wrap_haploid_highd_recombination_model_get, METH_O, (char *)"\n"
		"Model of recombination to use\n"
		"\n"
		"Available values:\n"
		"   - FFPopSim.FREE_RECOMBINATION: free reassortment of all loci between parents\n"
		"   - FFPopSim.CROSSOVERS: linear chromosome with crossover probability per locus\n"
		"\n"
		""},
	 { (char *)"haploid_highd_circular_set", _wrap_haploid_highd_circular_set, METH_VARARGS, (char *)"is the genome circular?"},
	 { (char *)"haploid_highd_circular_get", (PyCFunction)_wrap_haploid_highd_circular_get, METH_O, (char *)"is the genome circular?"},
	 { (char *)"haploid_highd__get_mutation_rate", (PyCFunction)_wrap_haploid_highd__get_mutation_rate, METH_O, (char *)"haploid_highd__get_mutation_rate(haploid_highd self) -> double"},
	 { (char *)"haploid_highd__set_mutation_rate", (PyCFunction) _wrap_haploid_highd__set_mutation_rate, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_highd__set_mutation_rate(haploid_highd self, double m)"},
	 { (char *)"haploid_highd__get_polymorphisms", (PyCFunction)_wrap_haploid_highd__get_polymorphisms, METH_O, (char *)"haploid_highd__get_polymorphisms(haploid_highd self) -> vector_polymorphism"},
	 { (char *)"haploid_highd__get_fixed_mutations", (PyCFunction)_wrap_haploid_highd__get_fixed_mutations, METH_O, (char *)"haploid_highd__get_fixed_mutations(haploid_highd self) -> vector_polymorphism"},
	 { (char *)"haploid_highd__get_number_of_mutations", (PyCFunction)_wrap_haploid_highd__get_number_of_mutations, METH_O, (char *)"haploid_highd__get_number_of_mutations(haploid_highd self) -> _intVector"},
	 { (char *)"haploid_highd_set_allele_frequencies", (PyCFunction) _wrap_haploid_highd_set_allele_frequencies, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Initialize the population according to the given allele frequencies in linkage equilibrium.\n"
		"\n"
		"Parameters:\n"
		"   - frequencies: an array of length L with all allele frequencies\n"
		"   - N: set the population size and, if still unset, the carrying\n"
		"     capacity to this value\n"
		"\n"
		""},
	 { (char *)"haploid_highd_set_wildtype", (PyCFunction) _wrap_haploid_highd_set_wildtype, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Initialize a population of wildtype individuals\n"
		"\n"
		"Parameters:\n"
		"   - N: the number of individuals\n"
		"\n"
		".. note:: the carrying capacity is set to the same value if still unset.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_track_locus_genealogy", (PyCFunction) _wrap_haploid_highd_track_locus_genealogy, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Track the genealogy of some loci.\n"
		"\n"
		"Parameters:\n"
		"   - loci: sites whose genealogy is being stored\n"
		"\n"
		"Returns:\n"
		"   - zero if successful\n"
		"\n"
		""},
	 { (char *)"haploid_highd_add_genotype", (PyCFunction) _wrap_haploid_highd_add_genotype, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Add new individuals to the population with certain genotypes\n"
		"\n"
		"Parameters:\n"
		"   - genotype: genotype to add to the population (Boolean list)\n"
		"   - n: number of new individuals carrying that genotype\n"
		"\n"
		""},
	 { (char *)"haploid_highd_add_trait_coefficient", (PyCFunction) _wrap_haploid_highd_add_trait_coefficient, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Add a coefficient to the trait landscape.\n"
		" \n"
		"Parameters:\n"
		"   - value: value of the coefficient\n"
		"   - loci: array/list of loci indexed by the coefficient.\n"
		"   - t: number of the trait to be changed\n"
		"\n"
		"**Example**: to set a second-order epistatic term :math:`t_{ij} = 0.1`, use ``add_trait_coefficient(0.1, [i, j])``.\n"
		"\n"
		".. warning:: the -/+ basis is used throughout the library. If you are used to the 0/1 basis, keep in mind that the interaction series-expansion is different.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_clear_trait", (PyCFunction) _wrap_haploid_highd_clear_trait, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Clear a trait landscape.\n"
		"\n"
		"Parameters:\n"
		"   - t: number of the trait to be cleared\n"
		"\n"
		""},
	 { (char *)"haploid_highd_clear_traits", (PyCFunction)_wrap_haploid_highd_clear_traits, METH_O, (char *)"Clear all trait landscapes"},
	 { (char *)"haploid_highd_set_random_trait_epistasis", (PyCFunction) _wrap_haploid_highd_set_random_trait_epistasis, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Set a random epistatic term in the genotype-phenotype map. This is meant as an approximation to multi-locus epistasis to which many locus sets contribute. It assigns to each genotype a reprodrucible fitness component drawn from a Gaussian distribution.\n"
		"\n"
		"Parameters:\n"
		"   - epistasis_std: standard deviation of the random epistatic terms\n"
		"   - t: trait number\n"
		"\n"
		".. note:: the epistatic terms will be Gaussian distributed around zero with the given standard deviation.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_add_fitness_coefficient", (PyCFunction) _wrap_haploid_highd_add_fitness_coefficient, METH_VARARGS | METH_KEYWORDS, (char *)"Shortcut for add_trait_coefficient when there is only one trait"},
	 { (char *)"haploid_highd_clear_fitness", (PyCFunction)_wrap_haploid_highd_clear_fitness, METH_O, (char *)"Shortcut for clear_trait when there is only one trait"},
	 { (char *)"haploid_highd_set_random_epistasis", (PyCFunction) _wrap_haploid_highd_set_random_epistasis, METH_VARARGS | METH_KEYWORDS, (char *)"Shortcut for set_random_trait_epistasis when there is only one trait"},
	 { (char *)"haploid_highd_evolve", (PyCFunction) _wrap_haploid_highd_evolve, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Evolve for some generations.\n"
		"\n"
		"Parameters:\n"
		"   - gen: number of generations, defaults to one\n"
		"\n"
		""},
	 { (char *)"haploid_highd_bottleneck", (PyCFunction) _wrap_haploid_highd_bottleneck, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Make the population undergo a bottleneck\n"
		"\n"
		"Parameters:\n"
		"   - size_of_bottleneck: the number of individuals at the bottleneck\n"
		"\n"
		""},
	 { (char *)"haploid_highd_flip_single_locus", (PyCFunction) _wrap_haploid_highd_flip_single_locus, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Take a random clone, flip the allele at the selected locus and create a new clone.\n"
		"\n"
		"Parameters:\n"
		"   - locus: locus to flip\n"
		"\n"
		"Returns:\n"
		"   - index: index of the new clone with the flipped locus\n"
		"\n"
		""},
	 { (char *)"haploid_highd_calc_stat", (PyCFunction)_wrap_haploid_highd_calc_stat, METH_O, (char *)"Calculate trait and fitness statistics for the population"},
	 { (char *)"haploid_highd_unique_clones", (PyCFunction)_wrap_haploid_highd_unique_clones, METH_O, (char *)"\n"
		"Recompress the clone structure\n"
		"\n"
		"During its evolution, identical clones might be generated by different routes at\n"
		"different times. This function merges any such duplicates into unique clones with\n"
		"the size equal to the sum of the sizes of the duplicates.\n"
		"\n"
		""},
	 { (char *)"haploid_highd__get_nonempty_clones", (PyCFunction)_wrap_haploid_highd__get_nonempty_clones, METH_O, (char *)"haploid_highd__get_nonempty_clones(haploid_highd self) -> _intVector"},
	 { (char *)"haploid_highd_random_clone", (PyCFunction)_wrap_haploid_highd_random_clone, METH_O, (char *)"\n"
		"Get a random clone\n"
		"\n"
		"Returns:\n"
		"   - clone: index of the random clone\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_diversity_statistics", (PyCFunction) _wrap_haploid_highd_get_diversity_statistics, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the mean and variance of the diversity in the population.\n"
		"\n"
		"Parameters:\n"
		"   - n_sample: number of individuals to sample at random from the population\n"
		"\n"
		"Returns:\n"
		"   - stat: structure with mean and variance of diversity in the population\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_divergence_statistics", (PyCFunction) _wrap_haploid_highd_get_divergence_statistics, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the mean and variance of the divergence in the population.\n"
		"\n"
		"Parameters:\n"
		"   - n_sample: number of individuals to sample at random from the population\n"
		"\n"
		"Returns:\n"
		"   - stat: structure with mean and variance of divergence in the population\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_allele_frequency", (PyCFunction) _wrap_haploid_highd_get_allele_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the frequency of the + allele at the selected locus\n"
		"\n"
		"Parameters:\n"
		"   - locus: locus whose frequency of the + allele is to be returned\n"
		"\n"
		"Returns:\n"
		"   - frequency: allele frequency in the population\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_derived_allele_frequency", (PyCFunction) _wrap_haploid_highd_get_derived_allele_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the frequency of the derived allele at the selected locus\n"
		"\n"
		"Parameters:\n"
		"   - locus: locus whose frequency of the derived allele is to be returned\n"
		"\n"
		"Returns:\n"
		"   - frequency: allele frequency in the population\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_pair_frequency", (PyCFunction) _wrap_haploid_highd_get_pair_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the joint frequency of two + alleles\n"
		"\n"
		"Parameters:\n"
		"    - locus1: first locus\n"
		"    - locus2: second locus\n"
		"\n"
		"Returns:\n"
		"    - the joint frequency of the + alleles\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_chi", (PyCFunction) _wrap_haploid_highd_get_chi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get :math:`\\chi_i` of an allele\n"
		"\n"
		"Parameters:\n"
		"    - locus: locus whose chi is to be computed\n"
		"\n"
		"Returns:\n"
		"    - the chi of that allele, :math:`\\chi_i := \\left<s_i\\right>`, where :math:`s_i \\in \\{\\pm1\\}`.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_derived_chi", (PyCFunction) _wrap_haploid_highd_get_derived_chi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get :math:`\\chi_i` of a derived allele\n"
		"\n"
		"Parameters:\n"
		"    - locus: locus whose chi is to be computed\n"
		"\n"
		"Returns:\n"
		"    - the chi of that derived allele, :math:`\\chi_i := \\left<s_i\\right>`, where :math:`s_i \\in \\{\\pm1\\}`.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_chi2", (PyCFunction) _wrap_haploid_highd_get_chi2, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get :math:`\\chi_{ij}`\n"
		"\n"
		"Parameters:\n"
		"    - locus1: first locus\n"
		"    - locus2: second locus\n"
		"\n"
		"Returns:\n"
		"    - the linkage disequilibiurm between them, i.e. :math:`\\chi_{ij} := \\left<s_i s_j\\right> - \\chi_i \\cdot \\chi_j`.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_LD", (PyCFunction) _wrap_haploid_highd_get_LD, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get linkage disequilibrium\n"
		"\n"
		"Parameters:\n"
		"    - locus1: first locus\n"
		"    - locus2: second locus\n"
		"\n"
		"Returns:\n"
		"    - the linkage disequilibiurm between them, i.e. :math:`LD := 1 / 4 \\left[\\left<s_i s_j\\right> - \\chi_i \\cdot \\chi_j\\right]`.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_moment", (PyCFunction) _wrap_haploid_highd_get_moment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get moment of two alleles in the -/+ basis\n"
		"\n"
		"Parameters:\n"
		"    - locus1: first locus\n"
		"    - locus2: second locus\n"
		"\n"
		"Returns:\n"
		"    - the second moment, i.e. :math:`\\left<s_i s_j\\right>`, where :math:`s_i, s_j \\in \\{-1, 1\\}`.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_trait_weight", (PyCFunction) _wrap_haploid_highd_get_trait_weight, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_highd_get_trait_weight(haploid_highd self, int t) -> double"},
	 { (char *)"haploid_highd_get_fitness", (PyCFunction) _wrap_haploid_highd_get_fitness, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the fitness of an individual\n"
		"\n"
		"Parameters:\n"
		"   - n: index of the clone whose fitness is to be computed\n"
		"\n"
		"Returns:\n"
		"   - fitness: fitness value of that clone\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_clone_size", (PyCFunction) _wrap_haploid_highd_get_clone_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the size of a clone\n"
		"\n"
		"Parameters:\n"
		"   - n: index of the clone\n"
		"\n"
		"Returns:\n"
		"   - size: size of the selected clone\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_trait", (PyCFunction) _wrap_haploid_highd_get_trait, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get a trait of an individual\n"
		"\n"
		"Parameters:\n"
		"   - n: index of the clone whose trait is to be computed\n"
		"   - t: trait to be computed\n"
		"\n"
		"Returns:\n"
		"   - trait: value of that trait for that clone\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_trait_epistasis", (PyCFunction) _wrap_haploid_highd_get_trait_epistasis, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the epistatic terms of the genotype/phenotype map of the chosen trait.\n"
		"\n"
		"Parameters:\n"
		"   - t: trait number\n"
		"\n"
		"Returns:\n"
		"   - coefficients: tuple of coefficients, with a value and a tuple of loci\n"
		"\n"
		".. note:: This function is designed to work well in conjunction with add_trait_coefficient.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_fitness_statistics", (PyCFunction)_wrap_haploid_highd_get_fitness_statistics, METH_O, (char *)"\n"
		"Get the mean and variance of the fitness in the population.\n"
		"\n"
		"Returns:\n"
		"   - stat: structure with mean and variance of the fitness in the population\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_trait_statistics", (PyCFunction) _wrap_haploid_highd_get_trait_statistics, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the mean and variance of a trait in the population.\n"
		"\n"
		"Parameters:\n"
		"   - t: number of the trait whose statistics are to be computed\n"
		"\n"
		"Returns:\n"
		"   - stat: structure with mean and variance of the trait in the population\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_trait_covariance", (PyCFunction) _wrap_haploid_highd_get_trait_covariance, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get the covariance of two traits in the population.\n"
		"\n"
		"Parameters:\n"
		"   - t1: first trait\n"
		"   - t2: second trait\n"
		"\n"
		"Returns:\n"
		"   - cov: the covariance of the two traits\n"
		"\n"
		""},
	 { (char *)"haploid_highd__update_traits", (PyCFunction)_wrap_haploid_highd__update_traits, METH_O, (char *)"haploid_highd__update_traits(haploid_highd self)"},
	 { (char *)"haploid_highd__update_fitness", (PyCFunction)_wrap_haploid_highd__update_fitness, METH_O, (char *)"haploid_highd__update_fitness(haploid_highd self)"},
	 { (char *)"haploid_highd___str__", (PyCFunction)_wrap_haploid_highd___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"haploid_highd___repr__", (PyCFunction)_wrap_haploid_highd___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"haploid_highd_get_clone", (PyCFunction) _wrap_haploid_highd_get_clone, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get a single clone\n"
		"\n"
		"Parameters:\n"
		"   - n: index of the clone\n"
		"\n"
		"Returns:\n"
		"   - clone: the n-th clone in the population\n"
		"\n"
		""},
	 { (char *)"haploid_highd_L_get", (PyCFunction)_wrap_haploid_highd_L_get, METH_O, (char *)"Number of loci (read-only)"},
	 { (char *)"haploid_highd_number_of_loci_get", (PyCFunction)_wrap_haploid_highd_number_of_loci_get, METH_O, (char *)"Number of loci (read-only)"},
	 { (char *)"haploid_highd_N_get", (PyCFunction)_wrap_haploid_highd_N_get, METH_O, (char *)"Population size (read-only)"},
	 { (char *)"haploid_highd_population_size_get", (PyCFunction)_wrap_haploid_highd_population_size_get, METH_O, (char *)"Population size (read-only)"},
	 { (char *)"haploid_highd_generation_set", _wrap_haploid_highd_generation_set, METH_VARARGS, (char *)"Current generation (read-only)"},
	 { (char *)"haploid_highd_generation_get", (PyCFunction)_wrap_haploid_highd_generation_get, METH_O, (char *)"Current generation (read-only)"},
	 { (char *)"haploid_highd_number_of_clones_get", (PyCFunction)_wrap_haploid_highd_number_of_clones_get, METH_O, (char *)"Number of non-empty clones (read-only)"},
	 { (char *)"haploid_highd_number_of_traits_get", (PyCFunction)_wrap_haploid_highd_number_of_traits_get, METH_O, (char *)"Number of traits (read-only)"},
	 { (char *)"haploid_highd_max_fitness_get", (PyCFunction)_wrap_haploid_highd_max_fitness_get, METH_O, (char *)"Maximal fitness in the population (read-only)"},
	 { (char *)"haploid_highd_participation_ratio_get", (PyCFunction)_wrap_haploid_highd_participation_ratio_get, METH_O, (char *)"Participation ratio (read-only)"},
	 { (char *)"haploid_highd_all_polymorphic_get", (PyCFunction)_wrap_haploid_highd_all_polymorphic_get, METH_O, (char *)"All polymorphic? (read-only)"},
	 { (char *)"haploid_highd_most_polymorphic_get", (PyCFunction)_wrap_haploid_highd_most_polymorphic_get, METH_O, (char *)"Most loci polymorphic? (read-only)"},
	 { (char *)"haploid_highd__set_mutant_loci", (PyCFunction) _wrap_haploid_highd__set_mutant_loci, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_highd__set_mutant_loci(haploid_highd self, int * IN_ARRAY1)"},
	 { (char *)"haploid_highd__set_trait_weights", (PyCFunction) _wrap_haploid_highd__set_trait_weights, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_highd__set_trait_weights(haploid_highd self, double * IN_ARRAY1)"},
	 { (char *)"haploid_highd__get_trait_weights", (PyCFunction) _wrap_haploid_highd__get_trait_weights, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"weight of each trait on fitness\n"
		"\n"
		".. note:: Fitness is updated automatically when the weights are changed.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_set_genotypes", (PyCFunction) _wrap_haploid_highd_set_genotypes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Initialize population with fixed counts for specific genotypes.\n"
		"\n"
		"Parameters:\n"
		"   - genotypes: list of genotypes to set. Genotypes are lists of alleles,\n"
		"     e.g. [[0,0,1,0], [0,1,1,1]] for genotypes 0010 and 0111   \n"
		"   - counts: list of the number at which each of those genotypes it to be present\n"
		"\n"
		".. note:: the population size and, if unset, the carrying capacity will be set\n"
		"          as the sum of the counts.\n"
		"\n"
		"**Example**: if you want to initialize 200 individuals with genotype 001 and\n"
		"             300 individuals with genotype 110, you can use\n"
		"             ``set_genotypes([[0,0,1], [1,1,0]], [200, 300])``\n"
		"\n"
		""},
	 { (char *)"haploid_highd__get_genealogy", (PyCFunction)_wrap_haploid_highd__get_genealogy, METH_O, (char *)"\n"
		"Genealogy of the tracked loci.\n"
		"\n"
		".. note:: This attribute is read-only.\n"
		"\n"
		""},
	 { (char *)"haploid_highd_get_allele_frequencies", (PyCFunction) _wrap_haploid_highd_get_allele_frequencies, METH_VARARGS | METH_KEYWORDS, (char *)"Get all allele frequencies"},
	 { (char *)"haploid_highd_get_derived_allele_frequencies", (PyCFunction) _wrap_haploid_highd_get_derived_allele_frequencies, METH_VARARGS | METH_KEYWORDS, (char *)"Get all derived allele frequencies"},
	 { (char *)"haploid_highd_get_trait_additive", (PyCFunction) _wrap_haploid_highd_get_trait_additive, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Get an array with the additive coefficients of all loci of a trait. \n"
		"\n"
		"Parameters:\n"
		"   - t: number of the trait\n"
		"\n"
		"Returns:\n"
		"   - coefficients: array of additive coefficients for the selected trait\n"
		"\n"
		""},
	 { (char *)"haploid_highd_set_trait_additive", (PyCFunction) _wrap_haploid_highd_set_trait_additive, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Set the additive part of a trait\n"
		"\n"
		"Parameters:\n"
		"   - coefficients: array of coefficients for the trait (of length L). All previous additive coefficents are erased\n"
		"   - t: number of the trait to set\n"
		"\n"
		""},
	 { (char *)"haploid_highd_set_fitness_additive", (PyCFunction) _wrap_haploid_highd_set_fitness_additive, METH_VARARGS | METH_KEYWORDS, (char *)"Shortcut for set_trait_additive when there is only one trait"},
	 { (char *)"haploid_highd_get_genotype", (PyCFunction) _wrap_haploid_highd_get_genotype, METH_VARARGS | METH_KEYWORDS, (char *)"haploid_highd_get_genotype(haploid_highd self, int n) -> boost::dynamic_bitset< >"},
	 { (char *)"haploid_highd_swigregister", haploid_highd_swigregister, METH_VARARGS, NULL},
	 { (char *)"haploid_highd_swiginit", haploid_highd_swiginit, METH_VARARGS, NULL},
	 { (char *)"hivgene_start_set", _wrap_hivgene_start_set, METH_VARARGS, (char *)"Initial position of the gene"},
	 { (char *)"hivgene_start_get", (PyCFunction)_wrap_hivgene_start_get, METH_O, (char *)"Initial position of the gene"},
	 { (char *)"hivgene_end_set", _wrap_hivgene_end_set, METH_VARARGS, (char *)"Final position of the gene"},
	 { (char *)"hivgene_end_get", (PyCFunction)_wrap_hivgene_end_get, METH_O, (char *)"Final position of the gene"},
	 { (char *)"new_hivgene", (PyCFunction) _wrap_new_hivgene, METH_VARARGS | METH_KEYWORDS, (char *)"Structure for an HIV gene."},
	 { (char *)"hivgene___str__", (PyCFunction)_wrap_hivgene___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"hivgene___repr__", (PyCFunction)_wrap_hivgene___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"delete_hivgene", (PyCFunction)_wrap_delete_hivgene, METH_O, (char *)"delete_hivgene(hivgene self)"},
	 { (char *)"hivgene_swigregister", hivgene_swigregister, METH_VARARGS, NULL},
	 { (char *)"hivgene_swiginit", hivgene_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_hivpopulation", (PyCFunction) _wrap_new_hivpopulation, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Construct a HIV population with certain parameters.\n"
		"\n"
		"Parameters:\n"
		"\n"
		"   - N     number of viral particles\n"
		"   - rng_seed	seed for the random number generator. If this is 0, time(NULL)+getpid() is used.\n"
		"   - mutation_rate	mutation rate in events / generation / site\n"
		"   - coinfection_rate	probability of coinfection of the same cell by two viral particles in events / generation\n"
		"   - crossover_rate	probability of template switching during coinfection in events / site\n"
		"\n"
		".. note:: the genome length is 10000 (see HIVGENOME).\n"
		"\n"
		""},
	 { (char *)"delete_hivpopulation", (PyCFunction)_wrap_delete_hivpopulation, METH_O, (char *)"delete_hivpopulation(hivpopulation self)"},
	 { (char *)"hivpopulation_env_set", _wrap_hivpopulation_env_set, METH_VARARGS, (char *)"hivpopulation_env_set(hivpopulation self, hivgene env)"},
	 { (char *)"hivpopulation_env_get", (PyCFunction)_wrap_hivpopulation_env_get, METH_O, (char *)"hivpopulation_env_get(hivpopulation self) -> hivgene"},
	 { (char *)"hivpopulation_read_replication_coefficients", (PyCFunction) _wrap_hivpopulation_read_replication_coefficients, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Read replication coefficients from a text file\n"
		"\n"
		"Parameters:\n"
		"   - filename: string with the name of the file to read the coefficients from\n"
		"\n"
		""},
	 { (char *)"hivpopulation_read_resistance_coefficients", (PyCFunction) _wrap_hivpopulation_read_resistance_coefficients, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Read resistance coefficients from a text file\n"
		"\n"
		"Parameters:\n"
		"   - filename: string with the name of the file to read the coefficients from\n"
		"\n"
		""},
	 { (char *)"hivpopulation_write_genotypes", (PyCFunction) _wrap_hivpopulation_write_genotypes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"Store random genotypes into a plain text file.\n"
		"\n"
		"Parameters:\n"
		"   - filename: string with the name of the file to store the genotype into\n"
		"   - sample_size: how many random genotypes to store\n"
		"   - gt_label: common fasta label for the genotypes (e.g. 'HIV-sim')\n"
		"   - start: if only a portion of the genome is to be stored, start from this position\n"
		"   - length: store a chunk from ``start`` to this length\n"
		"\n"
		""},
	 { (char *)"hivpopulation___str__", (PyCFunction)_wrap_hivpopulation___str__, METH_O, (char *)"x.__str__() <==> str(x)"},
	 { (char *)"hivpopulation___repr__", (PyCFunction)_wrap_hivpopulation___repr__, METH_O, (char *)"x.__repr__() <==> repr(x)"},
	 { (char *)"hivpopulation_treatment_set", _wrap_hivpopulation_treatment_set, METH_VARARGS, (char *)"\n"
		"Treatment weight (between 0 and 1)\n"
		"\n"
		".. note:: this variable controls how important is either of the two phenotypic\n"
		"          traits, replication and resistance. Their contribution to fitness is\n"
		"          always linear (in this implementation).\n"
		"\n"
		""},
	 { (char *)"hivpopulation_treatment_get", (PyCFunction)_wrap_hivpopulation_treatment_get, METH_O, (char *)"\n"
		"Treatment weight (between 0 and 1)\n"
		"\n"
		".. note:: this variable controls how important is either of the two phenotypic\n"
		"          traits, replication and resistance. Their contribution to fitness is\n"
		"          always linear (in this implementation).\n"
		"\n"
		""},
	 { (char *)"hivpopulation_swigregister", hivpopulation_swigregister, METH_VARARGS, NULL},
	 { (char *)"hivpopulation_swiginit", hivpopulation_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_hivpopulationTo_p_haploid_highd(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((haploid_highd *)  ((hivpopulation *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clone_t = {"_p_clone_t", "clone_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_edge_t = {"_p_edge_t", "std::map< tree_key_t,edge_t >::mapped_type *|edge_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_genotype_value_pair_t = {"_p_genotype_value_pair_t", "genotype_value_pair_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_haploid_highd = {"_p_haploid_highd", "haploid_highd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_haploid_lowd = {"_p_haploid_lowd", "haploid_lowd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hivgene = {"_p_hivgene", "hivgene *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hivpopulation = {"_p_hivpopulation", "hivpopulation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_index_value_pair_t = {"_p_index_value_pair_t", "index_value_pair_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_istream = {"_p_istream", "istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_multi_locus_genealogy = {"_p_multi_locus_genealogy", "multi_locus_genealogy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_t = {"_p_node_t", "std::map< tree_key_t,node_t >::mapped_type *|node_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ostream = {"_p_ostream", "ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_poly_t = {"_p_poly_t", "std::vector< poly_t >::value_type *|poly_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rooted_tree = {"_p_rooted_tree", "rooted_tree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stat_t = {"_p_stat_t", "stat_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_poly_t_t = {"_p_std__allocatorT_poly_t_t", "std::vector< poly_t >::allocator_type *|std::allocator< poly_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t = {"_p_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t", "std::map< tree_key_t,edge_t >::allocator_type *|std::allocator< std::pair< tree_key_t const,edge_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t = {"_p_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t", "std::map< tree_key_t,node_t >::allocator_type *|std::allocator< std::pair< tree_key_t const,node_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_step_t_t = {"_p_std__allocatorT_step_t_t", "std::vector< step_t >::allocator_type *|std::allocator< step_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_tree_key_t_t = {"_p_std__allocatorT_tree_key_t_t", "std::vector< tree_key_t >::allocator_type *|std::list< tree_key_t >::allocator_type *|std::allocator< tree_key_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_tree_key_t_t = {"_p_std__lessT_tree_key_t_t", "std::less< tree_key_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t = {"_p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t", "std::list< tree_key_t,std::allocator< tree_key_t > > *|std::list< tree_key_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t = {"_p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t", "std::map< tree_key_t,edge_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,edge_t > > > *|std::map< tree_key_t,edge_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t = {"_p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t", "std::map< tree_key_t,node_t,std::less< tree_key_t >,std::allocator< std::pair< tree_key_t const,node_t > > > *|std::map< tree_key_t,node_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t = {"_p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t", "std::vector< poly_t,std::allocator< poly_t > > *|std::vector< poly_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_step_t_std__allocatorT_step_t_t_t = {"_p_std__vectorT_step_t_std__allocatorT_step_t_t_t", "std::vector< step_t,std::allocator< step_t > > *|std::vector< step_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t = {"_p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t", "std::vector< tree_key_t > *|std::vector< tree_key_t,std::allocator< tree_key_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_step_t = {"_p_step_t", "std::vector< step_t >::value_type *|step_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tree_key_t = {"_p_tree_key_t", "std::map< tree_key_t,edge_t >::key_type *|std::map< tree_key_t,node_t >::key_type *|std::vector< tree_key_t >::value_type *|std::list< tree_key_t >::value_type *|tree_key_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_clone_t,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_edge_t,
  &_swigt__p_genotype_value_pair_t,
  &_swigt__p_haploid_highd,
  &_swigt__p_haploid_lowd,
  &_swigt__p_hivgene,
  &_swigt__p_hivpopulation,
  &_swigt__p_index_value_pair_t,
  &_swigt__p_int,
  &_swigt__p_istream,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_multi_locus_genealogy,
  &_swigt__p_node_t,
  &_swigt__p_ostream,
  &_swigt__p_p_PyObject,
  &_swigt__p_poly_t,
  &_swigt__p_rooted_tree,
  &_swigt__p_size_type,
  &_swigt__p_stat_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_poly_t_t,
  &_swigt__p_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t,
  &_swigt__p_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t,
  &_swigt__p_std__allocatorT_step_t_t,
  &_swigt__p_std__allocatorT_tree_key_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_tree_key_t_t,
  &_swigt__p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t,
  &_swigt__p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t,
  &_swigt__p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t,
  &_swigt__p_std__vectorT_step_t_std__allocatorT_step_t_t_t,
  &_swigt__p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t,
  &_swigt__p_step_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_tree_key_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clone_t[] = {  {&_swigt__p_clone_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_edge_t[] = {  {&_swigt__p_edge_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_genotype_value_pair_t[] = {  {&_swigt__p_genotype_value_pair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_haploid_highd[] = {  {&_swigt__p_haploid_highd, 0, 0, 0},  {&_swigt__p_hivpopulation, _p_hivpopulationTo_p_haploid_highd, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_haploid_lowd[] = {  {&_swigt__p_haploid_lowd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hivgene[] = {  {&_swigt__p_hivgene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hivpopulation[] = {  {&_swigt__p_hivpopulation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_index_value_pair_t[] = {  {&_swigt__p_index_value_pair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_istream[] = {  {&_swigt__p_istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_multi_locus_genealogy[] = {  {&_swigt__p_multi_locus_genealogy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_t[] = {  {&_swigt__p_node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ostream[] = {  {&_swigt__p_ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_poly_t[] = {  {&_swigt__p_poly_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rooted_tree[] = {  {&_swigt__p_rooted_tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stat_t[] = {  {&_swigt__p_stat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_poly_t_t[] = {  {&_swigt__p_std__allocatorT_poly_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_step_t_t[] = {  {&_swigt__p_std__allocatorT_step_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_tree_key_t_t[] = {  {&_swigt__p_std__allocatorT_tree_key_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_tree_key_t_t[] = {  {&_swigt__p_std__lessT_tree_key_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t[] = {  {&_swigt__p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t[] = {  {&_swigt__p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t[] = {  {&_swigt__p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t[] = {  {&_swigt__p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_step_t_std__allocatorT_step_t_t_t[] = {  {&_swigt__p_std__vectorT_step_t_std__allocatorT_step_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t[] = {  {&_swigt__p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_step_t[] = {  {&_swigt__p_step_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tree_key_t[] = {  {&_swigt__p_tree_key_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_clone_t,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_edge_t,
  _swigc__p_genotype_value_pair_t,
  _swigc__p_haploid_highd,
  _swigc__p_haploid_lowd,
  _swigc__p_hivgene,
  _swigc__p_hivpopulation,
  _swigc__p_index_value_pair_t,
  _swigc__p_int,
  _swigc__p_istream,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_multi_locus_genealogy,
  _swigc__p_node_t,
  _swigc__p_ostream,
  _swigc__p_p_PyObject,
  _swigc__p_poly_t,
  _swigc__p_rooted_tree,
  _swigc__p_size_type,
  _swigc__p_stat_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_poly_t_t,
  _swigc__p_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t,
  _swigc__p_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t,
  _swigc__p_std__allocatorT_step_t_t,
  _swigc__p_std__allocatorT_tree_key_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_tree_key_t_t,
  _swigc__p_std__listT_tree_key_t_std__allocatorT_tree_key_t_t_t,
  _swigc__p_std__mapT_tree_key_t_edge_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_edge_t_t_t_t,
  _swigc__p_std__mapT_tree_key_t_node_t_std__lessT_tree_key_t_t_std__allocatorT_std__pairT_tree_key_t_const_node_t_t_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_poly_t_std__allocatorT_poly_t_t_t,
  _swigc__p_std__vectorT_step_t_std__allocatorT_step_t_t_t,
  _swigc__p_std__vectorT_tree_key_t_std__allocatorT_tree_key_t_t_t,
  _swigc__p_step_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_tree_key_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "FREE_RECOMBINATION",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "CROSSOVERS",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "SINGLE_CROSSOVER",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "HC_MEMERR",SWIG_From_int(static_cast< int >(-131545)));
  SWIG_Python_SetConstant(d, "HC_BADARG",SWIG_From_int(static_cast< int >(-131546)));
  SWIG_Python_SetConstant(d, "HC_VERBOSE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "HC_FUNC",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "HC_COEFF",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "HC_FUNC_EQ_COEFF",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "HG_VERBOSE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "HG_LONGTIMEGEN",SWIG_From_int(static_cast< int >(1000000)));
  SWIG_Python_SetConstant(d, "HG_CONTINUOUS",SWIG_From_int(static_cast< int >(10000)));
  SWIG_Python_SetConstant(d, "HG_NOTHING",SWIG_From_double(static_cast< double >(1e-15)));
  SWIG_Python_SetConstant(d, "HG_EXTINCT",SWIG_From_int(static_cast< int >(-9287465)));
  SWIG_Python_SetConstant(d, "HG_BADARG",SWIG_From_int(static_cast< int >(-879564)));
  SWIG_Python_SetConstant(d, "HG_MEMERR",SWIG_From_int(static_cast< int >(-32656845)));
  SWIG_Python_SetConstant(d, "HCF_MEMERR",SWIG_From_int(static_cast< int >(-131545)));
  SWIG_Python_SetConstant(d, "HCF_BADARG",SWIG_From_int(static_cast< int >(-131546)));
  SWIG_Python_SetConstant(d, "HCF_VERBOSE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "WORDLENGTH",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "HP_VERBOSE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "NO_GENOTYPE",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "HP_MINAF",SWIG_From_double(static_cast< double >(0.02)));
  SWIG_Python_SetConstant(d, "MAX_DELTAFITNESS",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_POPSIZE",SWIG_From_int(static_cast< int >(500000)));
  SWIG_Python_SetConstant(d, "HP_NOTHING",SWIG_From_double(static_cast< double >(1e-12)));
  SWIG_Python_SetConstant(d, "HP_RANDOM_SAMPLE_FRAC",SWIG_From_double(static_cast< double >(0.01)));
  SWIG_Python_SetConstant(d, "HP_VERY_NEGATIVE",SWIG_From_double(static_cast< double >(-1e15)));
  SWIG_Python_SetConstant(d, "HP_BADARG",SWIG_From_int(static_cast< int >(-879564)));
  SWIG_Python_SetConstant(d, "HP_MEMERR",SWIG_From_int(static_cast< int >(-986465)));
  SWIG_Python_SetConstant(d, "HP_EXPLOSIONWARN",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "HP_EXTINCTERR",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "HP_NOBINSERR",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "HP_WRONGBINSERR",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "HP_RUNTIMEERR",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "RT_VERBOSE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "RT_VERYLARGE",SWIG_From_int(static_cast< int >(10000000)));
  SWIG_Python_SetConstant(d, "RT_CHILDNOTFOUND",SWIG_From_int(static_cast< int >(-35343)));
  SWIG_Python_SetConstant(d, "RT_NODENOTFOUND",SWIG_From_int(static_cast< int >(-35765)));
  SWIG_Python_SetConstant(d, "HIVPOP_VERBOSE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "HIVPOP_BADARG",SWIG_From_int(static_cast< int >(-1354341)));
  SWIG_Python_SetConstant(d, "NOTHING",SWIG_From_double(static_cast< double >(1e-10)));
  SWIG_Python_SetConstant(d, "HIVGENOME",SWIG_From_int(static_cast< int >(10000)));
  SWIG_Python_SetConstant(d, "ENV_START",SWIG_From_int(static_cast< int >(7000)));
  SWIG_Python_SetConstant(d, "ENV_END",SWIG_From_int(static_cast< int >(8000)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

